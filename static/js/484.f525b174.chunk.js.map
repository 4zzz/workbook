{"version":3,"file":"static/js/484.f525b174.chunk.js","mappings":"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","sources":["storageWorker/githubStorage/githubApi/baseQuery.ts","storageWorker/githubStorage/githubApi/lastPage.ts","storageWorker/githubStorage/githubApi/baseApi.ts","storageWorker/githubStorage/githubApi/endpoints/git.ts","storageWorker/githubStorage/githubApi/endpoints/pulls.ts","storageWorker/githubStorage/githubApi/endpoints/repos.ts","storageWorker/githubStorage/githubApi/errorMessage.ts","storageWorker/githubStorage/store.ts","storageWorker/githubStorage/utils.ts","storageWorker/githubStorage/githubStorage.ts","storageWorker/githubStorage/engine.ts","storageWorker/githubStorage1/mayfail.ts","storageWorker/githubStorage1/ghContext.ts","storageWorker/githubStorage1/ghEngine.ts","storageWorker/githubStorage1/adapter.ts","features/sheet/slice/logicContext.ts","features/sheet/slice/sheetSlice.ts","features/sheet/slice/workbookFormat.ts","storageWorker/worker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { BaseQueryFn, FetchArgs, fetchBaseQuery, FetchBaseQueryError, FetchBaseQueryMeta } from \"@reduxjs/toolkit/query/react\";\nimport { RootState } from \"../store\";\n\nconst baseQuery = fetchBaseQuery({ \n  baseUrl: \"https://api.github.com/\",\n  prepareHeaders: (headers, { getState }) => {\n    \n    const accessToken = (getState() as RootState).sheetStorage.ghToken;\n    if (accessToken) {\n      headers.append('Authorization', `token ${accessToken}`);\n    }\n    return headers;\n  },\n  cache: 'no-cache',\n\n });\n\n const githubBaseQuery: BaseQueryFn<\n  string | FetchArgs,\n  unknown, FetchBaseQueryError,\n  {},\n  FetchBaseQueryMeta\n> = async (args, api, extraOptions) => {\n  /* Detect when query returns http status 401 (Unauthorized) which means accessToken \n   * is invalid or expired.\n   */\n  let result = await baseQuery(args, api, extraOptions)\n  /*\n  if (result.error && result.error.status === 401) {\n    clearSavedAuthState();\n    api.dispatch(authActions.setAuthState('tokenExpired'));\n  }\n  */\n  return result;\n};\n\nexport default githubBaseQuery;\n","export default function githubApiParseLastPage(link?: string) {\n  let lastPage: number | null = null;\n  if (link) {\n    link.split(', ').forEach(item => {\n      const parts = item.split('; ');\n      if (parts[1] === 'rel=\"last\"') {\n        const match = parts[0].match(/.*[?&]+page=([0-9]+)/)\n        /* was positive integer parsed? */\n        if (match && match[1] !== undefined && /^\\d+$/.test(match[1])) {\n          lastPage = parseInt(match[1]);\n        }\n      }\n    })\n  }\n  if (!lastPage) {\n    return 1\n  } else {\n    return lastPage;\n  }\n}","import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport githubBaseQuery from \"./baseQuery\";\nimport { ReposListBranchesApiArg, ReposListBranchesApiResponse, ReposListForAuthenticatedUserApiArg, ReposListForUserApiArg, ReposMergeApiArg, ReposMergeApiResponse } from \"./endpoints/repos\";\nimport { SearchReposApiArg } from \"./endpoints/search\";\nimport githubApiParseLastPage from \"./lastPage\";\n\nexport const githubApi = createApi({\n  reducerPath: \"githubApi\",\n  baseQuery: githubBaseQuery,\n  tagTypes: ['Files', 'Refs', 'Pulls'],\n  endpoints: (build) => ({\n    reposListForUserHeaders: build.query<{ link?: string }, ReposListForUserApiArg>({\n      query: (queryArg) => ({\n        url: `/users/${queryArg.username}/repos`,\n        method: 'HEAD',\n        params: {\n          type: queryArg['type'],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    reposListForAuthenticatedUserHeaders: build.query<{ link?: string }, ReposListForAuthenticatedUserApiArg>({\n      query: (queryArg) => ({\n        method: 'HEAD',\n        url: `/user/repos`,\n        params: {\n          visibility: queryArg.visibility,\n          affiliation: queryArg.affiliation,\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n          since: queryArg.since,\n          before: queryArg.before,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    searchReposHeaders: build.query<{ link?: string }, SearchReposApiArg>({\n      query: (queryArg) => ({\n        method: 'HEAD',\n        url: `/search/repositories`,\n        params: {\n          q: queryArg.q,\n          sort: queryArg.sort,\n          order: queryArg.order,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    reposListBranchesHeaders: build.query<{ link?: string }, ReposListBranchesApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches`,\n        params: {\n          protected: queryArg[\"protected\"],\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    reposListAllBranches: build.query<ReposListBranchesApiResponse, { owner: string, repo: string, protected?: boolean }>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches`,\n        params: {\n          protected: queryArg[\"protected\"],\n          per_page: 50\n        },\n      }),\n      async onQueryStarted({ owner, repo }, { dispatch, getState, queryFulfilled, updateCachedData }) {\n        let headers = await githubApi.endpoints.reposListBranchesHeaders.initiate({ owner, repo, perPage: 50 })(dispatch, getState, null)\n        if (headers.isSuccess) {\n          const lastPage = githubApiParseLastPage(headers.data.link);\n          try {\n            let result = await queryFulfilled\n            console.log('reposListAllBranches: got result ', result, ' lastPage is ', lastPage);\n            let extraBranches: ReposListBranchesApiResponse = []\n            for (let page = 1; page < lastPage; page++) {\n              //const r1 = await reposApi.endpoints.reposListBranches.initiate({owner, repo, page, perPage: 50})(dispatch, getState, null)\n              console.log('loading extra branches on page ', page);\n              /*if (r1.isSuccess) {\n                extraBranches = extraBranches.concat(r1.data)\n              } else {\n                // TODO\n              }*/\n            }\n            updateCachedData(recipe => recipe.concat(extraBranches))\n          } catch (err) {\n            // TODO\n          }\n        }\n      },\n    }),\n    reposMergeWithResponseCode: build.mutation<{ status: number, response: ReposMergeApiResponse }, ReposMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merges`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      transformResponse: (baseQueryReturnValue, meta, arg) => {\n        console.log(meta);\n        return { status: meta?.response?.status || -1, response: baseQueryReturnValue as ReposMergeApiResponse}\n      },\n    }),\n    reposRenameBranchWithResponseCode: build.mutation<{ status: number, reponse: ReposMergeApiResponse }, ReposMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merges`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      transformResponse: (baseQueryReturnValue, meta, arg) => {\n        console.log(meta);\n        return { status: 0, reponse: undefined }\n      },\n    }),\n  }),\n});\n\n//export { githubApi }\nexport const { useReposListForUserHeadersQuery, useReposListForAuthenticatedUserHeadersQuery, useSearchReposHeadersQuery, useReposListBranchesHeadersQuery, useReposListAllBranchesQuery } = githubApi;","import { githubApi as api } from \"../baseApi\";\nconst injectedRtkApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    gitignoreGetAllTemplates: build.query<\n      GitignoreGetAllTemplatesApiResponse,\n      GitignoreGetAllTemplatesApiArg\n    >({\n      query: () => ({ url: `/gitignore/templates` }),\n    }),\n    gitignoreGetTemplate: build.query<\n      GitignoreGetTemplateApiResponse,\n      GitignoreGetTemplateApiArg\n    >({\n      query: (queryArg) => ({ url: `/gitignore/templates/${queryArg.name}` }),\n    }),\n    gitCreateBlob: build.mutation<\n      GitCreateBlobApiResponse,\n      GitCreateBlobApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/blobs`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetBlob: build.query<GitGetBlobApiResponse, GitGetBlobApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/blobs/${queryArg.fileSha}`,\n      }),\n    }),\n    gitCreateCommit: build.mutation<\n      GitCreateCommitApiResponse,\n      GitCreateCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/commits`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetCommit: build.query<GitGetCommitApiResponse, GitGetCommitApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/commits/${queryArg.commitSha}`,\n      }),\n    }),\n    gitListMatchingRefs: build.query<\n      GitListMatchingRefsApiResponse,\n      GitListMatchingRefsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/matching-refs/${queryArg.ref}`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    gitGetRef: build.query<GitGetRefApiResponse, GitGetRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/ref/${queryArg.ref}`,\n      }),\n    }),\n    gitCreateRef: build.mutation<GitCreateRefApiResponse, GitCreateRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/refs`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Refs']\n    }),\n    gitUpdateRef: build.mutation<GitUpdateRefApiResponse, GitUpdateRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/refs/${queryArg.ref}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Refs']\n    }),\n    gitDeleteRef: build.mutation<GitDeleteRefApiResponse, GitDeleteRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/refs/${queryArg.ref}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: ['Refs']\n    }),\n    gitCreateTag: build.mutation<GitCreateTagApiResponse, GitCreateTagApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/tags`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetTag: build.query<GitGetTagApiResponse, GitGetTagApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/tags/${queryArg.tagSha}`,\n      }),\n    }),\n    gitCreateTree: build.mutation<\n      GitCreateTreeApiResponse,\n      GitCreateTreeApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/trees`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetTree: build.query<GitGetTreeApiResponse, GitGetTreeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/trees/${queryArg.treeSha}`,\n        params: { recursive: queryArg.recursive },\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\nexport { injectedRtkApi as githubApi };\nexport type GitignoreGetAllTemplatesApiResponse =\n  /** status 200 Response */ string[];\nexport type GitignoreGetAllTemplatesApiArg = void;\nexport type GitignoreGetTemplateApiResponse =\n  /** status 200 Response */ GitignoreTemplate;\nexport type GitignoreGetTemplateApiArg = {\n  name: string;\n};\nexport type GitCreateBlobApiResponse = /** status 201 Response */ ShortBlob;\nexport type GitCreateBlobApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    content: string;\n    encoding?: string;\n  };\n};\nexport type GitGetBlobApiResponse = /** status 200 Response */ Blob;\nexport type GitGetBlobApiArg = {\n  owner: string;\n  repo: string;\n  fileSha: string;\n};\nexport type GitCreateCommitApiResponse = /** status 201 Response */ GitCommit;\nexport type GitCreateCommitApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    message: string;\n    tree: string;\n    parents?: string[];\n    author?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n    committer?: {\n      name?: string;\n      email?: string;\n      date?: string;\n    };\n    signature?: string;\n  };\n};\nexport type GitGetCommitApiResponse = /** status 200 Response */ GitCommit;\nexport type GitGetCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n};\nexport type GitListMatchingRefsApiResponse =\n  /** status 200 Response */ GitReference[];\nexport type GitListMatchingRefsApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type GitGetRefApiResponse = /** status 200 Response */ GitReference;\nexport type GitGetRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n};\nexport type GitCreateRefApiResponse = /** status 201 Response */ GitReference;\nexport type GitCreateRefApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    ref: string;\n    sha: string;\n    key?: string;\n  };\n};\nexport type GitUpdateRefApiResponse = /** status 200 Response */ GitReference;\nexport type GitUpdateRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  body: {\n    sha: string;\n    force?: boolean;\n  };\n};\nexport type GitDeleteRefApiResponse = /** status 204 Response */ undefined;\nexport type GitDeleteRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n};\nexport type GitCreateTagApiResponse = /** status 201 Response */ GitTag;\nexport type GitCreateTagApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tag: string;\n    message: string;\n    object: string;\n    type: \"commit\" | \"tree\" | \"blob\";\n    tagger?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n  };\n};\nexport type GitGetTagApiResponse = /** status 200 Response */ GitTag;\nexport type GitGetTagApiArg = {\n  owner: string;\n  repo: string;\n  tagSha: string;\n};\nexport type GitCreateTreeApiResponse = /** status 201 Response */ GitTree;\nexport type GitCreateTreeApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tree: {\n      path?: string;\n      mode?: \"100644\" | \"100755\" | \"040000\" | \"160000\" | \"120000\";\n      type?: \"blob\" | \"tree\" | \"commit\";\n      sha?: string | null;\n      content?: string;\n    }[];\n    base_tree?: string;\n  };\n};\nexport type GitGetTreeApiResponse = /** status 200 Response */ GitTree;\nexport type GitGetTreeApiArg = {\n  owner: string;\n  repo: string;\n  treeSha: string;\n  /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n  recursive?: string;\n};\nexport type GitignoreTemplate = {\n  name: string;\n  source: string;\n};\nexport type ShortBlob = {\n  url: string;\n  sha: string;\n};\nexport type BasicError = {\n  message?: string;\n  documentation_url?: string;\n  url?: string;\n  status?: string;\n};\nexport type ValidationError = {\n  message: string;\n  documentation_url: string;\n  errors?: {\n    resource?: string;\n    field?: string;\n    message?: string;\n    code: string;\n    index?: number;\n    value?: (string | null) | (number | null) | (string[] | null);\n  }[];\n};\nexport type Blob = {\n  content: string;\n  encoding: string;\n  url: string;\n  sha: string;\n  size: number | null;\n  node_id: string;\n  highlighted_content?: string;\n};\nexport type GitCommit = {\n  sha: string;\n  node_id: string;\n  url: string;\n  author: {\n    date: string;\n    email: string;\n    name: string;\n  };\n  committer: {\n    date: string;\n    email: string;\n    name: string;\n  };\n  message: string;\n  tree: {\n    sha: string;\n    url: string;\n  };\n  parents: {\n    sha: string;\n    url: string;\n    html_url: string;\n  }[];\n  verification: {\n    verified: boolean;\n    reason: string;\n    signature: string | null;\n    payload: string | null;\n  };\n  html_url: string;\n};\nexport type GitReference = {\n  ref: string;\n  node_id: string;\n  url: string;\n  object: {\n    type: string;\n    sha: string;\n    url: string;\n  };\n};\nexport type Verification = {\n  verified: boolean;\n  reason: string;\n  payload: string | null;\n  signature: string | null;\n};\nexport type GitTag = {\n  node_id: string;\n  tag: string;\n  sha: string;\n  url: string;\n  message: string;\n  tagger: {\n    date: string;\n    email: string;\n    name: string;\n  };\n  object: {\n    sha: string;\n    type: string;\n    url: string;\n  };\n  verification?: Verification;\n};\nexport type GitTree = {\n  sha: string;\n  url: string;\n  truncated: boolean;\n  tree: {\n    path?: string;\n    mode?: string;\n    type?: string;\n    sha?: string;\n    size?: number;\n    url?: string;\n  }[];\n};\nexport const {\n  useGitignoreGetAllTemplatesQuery,\n  useGitignoreGetTemplateQuery,\n  useGitCreateBlobMutation,\n  useGitGetBlobQuery,\n  useGitCreateCommitMutation,\n  useGitGetCommitQuery,\n  useGitListMatchingRefsQuery,\n  useGitGetRefQuery,\n  useGitCreateRefMutation,\n  useGitUpdateRefMutation,\n  useGitDeleteRefMutation,\n  useGitCreateTagMutation,\n  useGitGetTagQuery,\n  useGitCreateTreeMutation,\n  useGitGetTreeQuery,\n} = injectedRtkApi;\n","import { githubApi as api } from \"../baseApi\";\nconst injectedRtkApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    pullsList: build.query<PullsListApiResponse, PullsListApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls`,\n        params: {\n          state: queryArg.state,\n          head: queryArg.head,\n          base: queryArg.base,\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      providesTags: ['Pulls']\n    }),\n    pullsListWH: build.query<{response: PullsListApiResponse, headers: {[key: string]: string}}, PullsListApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls`,\n        params: {\n          state: queryArg.state,\n          head: queryArg.head,\n          base: queryArg.base,\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        let headers: {[key: string]: string} = {};\n        meta?.response?.headers.forEach((value, key) => headers[key] = value);\n        return {response: apiResponse as PullsListApiResponse, headers}\n      },\n      providesTags: ['Pulls']\n    }),\n    pullsCreate: build.mutation<PullsCreateApiResponse, PullsCreateApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Pulls']\n    }),\n    pullsListReviewCommentsForRepo: build.query<\n      PullsListReviewCommentsForRepoApiResponse,\n      PullsListReviewCommentsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments`,\n        params: {\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          since: queryArg.since,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    pullsGetReviewComment: build.query<\n      PullsGetReviewCommentApiResponse,\n      PullsGetReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments/${queryArg.commentId}`,\n      }),\n    }),\n    pullsUpdateReviewComment: build.mutation<\n      PullsUpdateReviewCommentApiResponse,\n      PullsUpdateReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments/${queryArg.commentId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsDeleteReviewComment: build.mutation<\n      PullsDeleteReviewCommentApiResponse,\n      PullsDeleteReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments/${queryArg.commentId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    pullsGet: build.query<PullsGetApiResponse, PullsGetApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}`,\n      }),\n    }),\n    pullsUpdate: build.mutation<PullsUpdateApiResponse, PullsUpdateApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsListReviewComments: build.query<\n      PullsListReviewCommentsApiResponse,\n      PullsListReviewCommentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/comments`,\n        params: {\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          since: queryArg.since,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    pullsCreateReviewComment: build.mutation<\n      PullsCreateReviewCommentApiResponse,\n      PullsCreateReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/comments`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsCreateReplyForReviewComment: build.mutation<\n      PullsCreateReplyForReviewCommentApiResponse,\n      PullsCreateReplyForReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/comments/${queryArg.commentId}/replies`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsListCommits: build.query<\n      PullsListCommitsApiResponse,\n      PullsListCommitsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/commits`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsListFiles: build.query<\n      PullsListFilesApiResponse,\n      PullsListFilesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/files`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsCheckIfMerged: build.query<\n      PullsCheckIfMergedApiResponse,\n      PullsCheckIfMergedApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/merge`,\n      }),\n    }),\n    pullsMerge: build.mutation<PullsMergeApiResponse, PullsMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/merge`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Files', 'Pulls'],  // workbook file changes after merge \n    }),\n    pullsListRequestedReviewers: build.query<\n      PullsListRequestedReviewersApiResponse,\n      PullsListRequestedReviewersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/requested_reviewers`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsRequestReviewers: build.mutation<\n      PullsRequestReviewersApiResponse,\n      PullsRequestReviewersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/requested_reviewers`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsRemoveRequestedReviewers: build.mutation<\n      PullsRemoveRequestedReviewersApiResponse,\n      PullsRemoveRequestedReviewersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/requested_reviewers`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsListReviews: build.query<\n      PullsListReviewsApiResponse,\n      PullsListReviewsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsCreateReview: build.mutation<\n      PullsCreateReviewApiResponse,\n      PullsCreateReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsGetReview: build.query<\n      PullsGetReviewApiResponse,\n      PullsGetReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}`,\n      }),\n    }),\n    pullsUpdateReview: build.mutation<\n      PullsUpdateReviewApiResponse,\n      PullsUpdateReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsDeletePendingReview: build.mutation<\n      PullsDeletePendingReviewApiResponse,\n      PullsDeletePendingReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    pullsListCommentsForReview: build.query<\n      PullsListCommentsForReviewApiResponse,\n      PullsListCommentsForReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}/comments`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsDismissReview: build.mutation<\n      PullsDismissReviewApiResponse,\n      PullsDismissReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}/dismissals`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsSubmitReview: build.mutation<\n      PullsSubmitReviewApiResponse,\n      PullsSubmitReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}/events`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsUpdateBranch: build.mutation<\n      PullsUpdateBranchApiResponse,\n      PullsUpdateBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/update-branch`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\nexport { injectedRtkApi as githubApi };\nexport type PullsListApiResponse =\n  /** status 200 Response */ PullRequestSimple[];\nexport type PullsListApiArg = {\n  owner: string;\n  repo: string;\n  /** Either `open`, `closed`, or `all` to filter by state. */\n  state?: \"open\" | \"closed\" | \"all\";\n  /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n  head?: string;\n  /** Filter pulls by base branch name. Example: `gh-pages`. */\n  base?: string;\n  /** What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month). */\n  sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\";\n  /** The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCreateApiResponse = /** status 201 Response */ PullRequest;\nexport type PullsCreateApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    title?: string;\n    head: string;\n    base: string;\n    body?: string;\n    maintainer_can_modify?: boolean;\n    draft?: boolean;\n    issue?: number;\n  };\n};\nexport type PullsListReviewCommentsForRepoApiResponse =\n  /** status 200 Response */ PullRequestReviewComment[];\nexport type PullsListReviewCommentsForRepoApiArg = {\n  owner: string;\n  repo: string;\n  sort?: \"created\" | \"updated\" | \"created_at\";\n  /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */\n  direction?: \"asc\" | \"desc\";\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsGetReviewCommentApiResponse =\n  /** status 200 Response */ PullRequestReviewComment;\nexport type PullsGetReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type PullsUpdateReviewCommentApiResponse =\n  /** status 200 Response */ PullRequestReviewComment;\nexport type PullsUpdateReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n  body: {\n    body: string;\n  };\n};\nexport type PullsDeleteReviewCommentApiResponse =\n  /** status 204 Response */ undefined;\nexport type PullsDeleteReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type PullsGetApiResponse =\n  /** status 200 Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. */ PullRequest;\nexport type PullsGetApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n};\nexport type PullsUpdateApiResponse = /** status 200 Response */ PullRequest;\nexport type PullsUpdateApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    title?: string;\n    body?: string;\n    state?: \"open\" | \"closed\";\n    base?: string;\n    maintainer_can_modify?: boolean;\n  };\n};\nexport type PullsListReviewCommentsApiResponse =\n  /** status 200 Response */ PullRequestReviewComment[];\nexport type PullsListReviewCommentsApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n  sort?: \"created\" | \"updated\";\n  /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */\n  direction?: \"asc\" | \"desc\";\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCreateReviewCommentApiResponse =\n  /** status 201 Response */ PullRequestReviewComment;\nexport type PullsCreateReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    body: string;\n    commit_id?: string;\n    path?: string;\n    position?: number;\n    side?: \"LEFT\" | \"RIGHT\";\n    line?: number;\n    start_line?: number;\n    start_side?: \"LEFT\" | \"RIGHT\" | \"side\";\n    in_reply_to?: number;\n  };\n};\nexport type PullsCreateReplyForReviewCommentApiResponse =\n  /** status 201 Response */ PullRequestReviewComment;\nexport type PullsCreateReplyForReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** comment_id parameter */\n  commentId: number;\n  body: {\n    body: string;\n  };\n};\nexport type PullsListCommitsApiResponse = /** status 200 Response */ Commit[];\nexport type PullsListCommitsApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsListFilesApiResponse = /** status 200 Response */ DiffEntry[];\nexport type PullsListFilesApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCheckIfMergedApiResponse = unknown;\nexport type PullsCheckIfMergedApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n};\nexport type PullsMergeApiResponse =\n  /** status 200 if merge was successful */ PullRequestMergeResult;\nexport type PullsMergeApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    commit_title?: string;\n    commit_message?: string;\n    sha?: string;\n    merge_method?: \"merge\" | \"squash\" | \"rebase\";\n  } | null;\n};\nexport type PullsListRequestedReviewersApiResponse =\n  /** status 200 Response */ PullRequestReviewRequest;\nexport type PullsListRequestedReviewersApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsRequestReviewersApiResponse =\n  /** status 201 Response */ PullRequestSimple;\nexport type PullsRequestReviewersApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: any | any;\n};\nexport type PullsRemoveRequestedReviewersApiResponse =\n  /** status 200 Response */ PullRequestSimple;\nexport type PullsRemoveRequestedReviewersApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    reviewers: string[];\n    team_reviewers?: string[];\n  };\n};\nexport type PullsListReviewsApiResponse =\n  /** status 200 The list of reviews returns in chronological order. */ PullRequestReview[];\nexport type PullsListReviewsApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCreateReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsCreateReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    commit_id?: string;\n    body?: string;\n    event?: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\";\n    comments?: {\n      path: string;\n      position?: number;\n      body: string;\n      line?: number;\n      side?: string;\n      start_line?: number;\n      start_side?: string;\n    }[];\n  };\n};\nexport type PullsGetReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsGetReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n};\nexport type PullsUpdateReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsUpdateReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  body: {\n    body: string;\n  };\n};\nexport type PullsDeletePendingReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsDeletePendingReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n};\nexport type PullsListCommentsForReviewApiResponse =\n  /** status 200 Response */ LegacyReviewComment[];\nexport type PullsListCommentsForReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsDismissReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsDismissReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  body: {\n    message: string;\n    event?: string;\n  };\n};\nexport type PullsSubmitReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsSubmitReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  body: {\n    body?: string;\n    event: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\";\n  };\n};\nexport type PullsUpdateBranchApiResponse = /** status 202 Response */ {\n  message?: string;\n  url?: string;\n};\nexport type PullsUpdateBranchApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    expected_head_sha?: string;\n  } | null;\n};\nexport type SimpleUser = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n} | null;\nexport type Milestone = {\n  url: string;\n  html_url: string;\n  labels_url: string;\n  id: number;\n  node_id: string;\n  number: number;\n  state: \"open\" | \"closed\";\n  title: string;\n  description: string | null;\n  creator: SimpleUser;\n  open_issues: number;\n  closed_issues: number;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  due_on: string | null;\n} | null;\nexport type SimpleUser2 = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n};\nexport type TeamSimple = {\n  id: number;\n  node_id: string;\n  url: string;\n  members_url: string;\n  name: string;\n  description: string | null;\n  permission: string;\n  privacy?: string;\n  html_url: string;\n  repositories_url: string;\n  slug: string;\n  ldap_dn?: string;\n} | null;\nexport type Team = {\n  id: number;\n  node_id: string;\n  name: string;\n  slug: string;\n  description: string | null;\n  privacy?: string;\n  permission: string;\n  permissions?: {\n    pull: boolean;\n    triage: boolean;\n    push: boolean;\n    maintain: boolean;\n    admin: boolean;\n  };\n  url: string;\n  html_url: string;\n  members_url: string;\n  repositories_url: string;\n  parent: TeamSimple;\n};\nexport type LicenseSimple = {\n  key: string;\n  name: string;\n  url: string | null;\n  spdx_id: string | null;\n  node_id: string;\n  html_url?: string;\n} | null;\nexport type Repository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: LicenseSimple;\n  organization?: SimpleUser;\n  forks: number;\n  permissions?: {\n    admin: boolean;\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n  };\n  owner: SimpleUser2;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  allow_rebase_merge?: boolean;\n  template_repository?: {\n    id?: number;\n    node_id?: string;\n    name?: string;\n    full_name?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      avatar_url?: string;\n      gravatar_id?: string;\n      url?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      repos_url?: string;\n      events_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    private?: boolean;\n    html_url?: string;\n    description?: string;\n    fork?: boolean;\n    url?: string;\n    archive_url?: string;\n    assignees_url?: string;\n    blobs_url?: string;\n    branches_url?: string;\n    collaborators_url?: string;\n    comments_url?: string;\n    commits_url?: string;\n    compare_url?: string;\n    contents_url?: string;\n    contributors_url?: string;\n    deployments_url?: string;\n    downloads_url?: string;\n    events_url?: string;\n    forks_url?: string;\n    git_commits_url?: string;\n    git_refs_url?: string;\n    git_tags_url?: string;\n    git_url?: string;\n    issue_comment_url?: string;\n    issue_events_url?: string;\n    issues_url?: string;\n    keys_url?: string;\n    labels_url?: string;\n    languages_url?: string;\n    merges_url?: string;\n    milestones_url?: string;\n    notifications_url?: string;\n    pulls_url?: string;\n    releases_url?: string;\n    ssh_url?: string;\n    stargazers_url?: string;\n    statuses_url?: string;\n    subscribers_url?: string;\n    subscription_url?: string;\n    tags_url?: string;\n    teams_url?: string;\n    trees_url?: string;\n    clone_url?: string;\n    mirror_url?: string;\n    hooks_url?: string;\n    svn_url?: string;\n    homepage?: string;\n    language?: string;\n    forks_count?: number;\n    stargazers_count?: number;\n    watchers_count?: number;\n    size?: number;\n    default_branch?: string;\n    open_issues_count?: number;\n    is_template?: boolean;\n    topics?: string[];\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    has_pages?: boolean;\n    has_downloads?: boolean;\n    archived?: boolean;\n    disabled?: boolean;\n    visibility?: string;\n    pushed_at?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      admin?: boolean;\n      maintain?: boolean;\n      push?: boolean;\n      triage?: boolean;\n      pull?: boolean;\n    };\n    allow_rebase_merge?: boolean;\n    temp_clone_token?: string;\n    allow_squash_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    allow_update_branch?: boolean;\n    allow_merge_commit?: boolean;\n    subscribers_count?: number;\n    network_count?: number;\n  } | null;\n  temp_clone_token?: string;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  open_issues: number;\n  watchers: number;\n  master_branch?: string;\n  starred_at?: string;\n};\nexport type Link = {\n  href: string;\n};\nexport type AuthorAssociation =\n  | \"COLLABORATOR\"\n  | \"CONTRIBUTOR\"\n  | \"FIRST_TIMER\"\n  | \"FIRST_TIME_CONTRIBUTOR\"\n  | \"MANNEQUIN\"\n  | \"MEMBER\"\n  | \"NONE\"\n  | \"OWNER\";\nexport type AutoMerge = {\n  enabled_by: SimpleUser2;\n  merge_method: \"merge\" | \"squash\" | \"rebase\";\n  commit_title: string;\n  commit_message: string;\n} | null;\nexport type PullRequestSimple = {\n  url: string;\n  id: number;\n  node_id: string;\n  html_url: string;\n  diff_url: string;\n  patch_url: string;\n  issue_url: string;\n  commits_url: string;\n  review_comments_url: string;\n  review_comment_url: string;\n  comments_url: string;\n  statuses_url: string;\n  number: number;\n  state: string;\n  locked: boolean;\n  title: string;\n  user: SimpleUser;\n  body: string | null;\n  labels: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string;\n    color: string;\n    default: boolean;\n  }[];\n  milestone: Milestone;\n  active_lock_reason?: string | null;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  merged_at: string | null;\n  merge_commit_sha: string | null;\n  assignee: SimpleUser;\n  assignees?: SimpleUser2[] | null;\n  requested_reviewers?: SimpleUser2[] | null;\n  requested_teams?: Team[] | null;\n  head: {\n    label: string;\n    ref: string;\n    repo: Repository;\n    sha: string;\n    user: SimpleUser;\n  };\n  base: {\n    label: string;\n    ref: string;\n    repo: Repository;\n    sha: string;\n    user: SimpleUser;\n  };\n  _links: {\n    comments: Link;\n    commits: Link;\n    statuses: Link;\n    html: Link;\n    issue: Link;\n    review_comments: Link;\n    review_comment: Link;\n    self: Link;\n  };\n  author_association: AuthorAssociation;\n  auto_merge: AutoMerge;\n  draft?: boolean;\n};\nexport type ValidationError = {\n  message: string;\n  documentation_url: string;\n  errors?: {\n    resource?: string;\n    field?: string;\n    message?: string;\n    code: string;\n    index?: number;\n    value?: (string | null) | (number | null) | (string[] | null);\n  }[];\n};\nexport type TeamSimple2 = {\n  id: number;\n  node_id: string;\n  url: string;\n  members_url: string;\n  name: string;\n  description: string | null;\n  permission: string;\n  privacy?: string;\n  html_url: string;\n  repositories_url: string;\n  slug: string;\n  ldap_dn?: string;\n};\nexport type PullRequest = {\n  url: string;\n  id: number;\n  node_id: string;\n  html_url: string;\n  diff_url: string;\n  patch_url: string;\n  issue_url: string;\n  commits_url: string;\n  review_comments_url: string;\n  review_comment_url: string;\n  comments_url: string;\n  statuses_url: string;\n  number: number;\n  state: \"open\" | \"closed\";\n  locked: boolean;\n  title: string;\n  user: SimpleUser;\n  body: string | null;\n  labels: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string | null;\n    color: string;\n    default: boolean;\n  }[];\n  milestone: Milestone;\n  active_lock_reason?: string | null;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  merged_at: string | null;\n  merge_commit_sha: string | null;\n  assignee: SimpleUser;\n  assignees?: SimpleUser2[] | null;\n  requested_reviewers?: SimpleUser2[] | null;\n  requested_teams?: TeamSimple2[] | null;\n  head: {\n    label: string;\n    ref: string;\n    repo: {\n      archive_url: string;\n      assignees_url: string;\n      blobs_url: string;\n      branches_url: string;\n      collaborators_url: string;\n      comments_url: string;\n      commits_url: string;\n      compare_url: string;\n      contents_url: string;\n      contributors_url: string;\n      deployments_url: string;\n      description: string | null;\n      downloads_url: string;\n      events_url: string;\n      fork: boolean;\n      forks_url: string;\n      full_name: string;\n      git_commits_url: string;\n      git_refs_url: string;\n      git_tags_url: string;\n      hooks_url: string;\n      html_url: string;\n      id: number;\n      node_id: string;\n      issue_comment_url: string;\n      issue_events_url: string;\n      issues_url: string;\n      keys_url: string;\n      labels_url: string;\n      languages_url: string;\n      merges_url: string;\n      milestones_url: string;\n      name: string;\n      notifications_url: string;\n      owner: {\n        avatar_url: string;\n        events_url: string;\n        followers_url: string;\n        following_url: string;\n        gists_url: string;\n        gravatar_id: string | null;\n        html_url: string;\n        id: number;\n        node_id: string;\n        login: string;\n        organizations_url: string;\n        received_events_url: string;\n        repos_url: string;\n        site_admin: boolean;\n        starred_url: string;\n        subscriptions_url: string;\n        type: string;\n        url: string;\n      };\n      private: boolean;\n      pulls_url: string;\n      releases_url: string;\n      stargazers_url: string;\n      statuses_url: string;\n      subscribers_url: string;\n      subscription_url: string;\n      tags_url: string;\n      teams_url: string;\n      trees_url: string;\n      url: string;\n      clone_url: string;\n      default_branch: string;\n      forks: number;\n      forks_count: number;\n      git_url: string;\n      has_downloads: boolean;\n      has_issues: boolean;\n      has_projects: boolean;\n      has_wiki: boolean;\n      has_pages: boolean;\n      homepage: string | null;\n      language: string | null;\n      master_branch?: string;\n      archived: boolean;\n      disabled: boolean;\n      visibility?: string;\n      mirror_url: string | null;\n      open_issues: number;\n      open_issues_count: number;\n      permissions?: {\n        admin: boolean;\n        maintain?: boolean;\n        push: boolean;\n        triage?: boolean;\n        pull: boolean;\n      };\n      temp_clone_token?: string;\n      allow_merge_commit?: boolean;\n      allow_squash_merge?: boolean;\n      allow_rebase_merge?: boolean;\n      license: {\n        key: string;\n        name: string;\n        url: string | null;\n        spdx_id: string | null;\n        node_id: string;\n      } | null;\n      pushed_at: string;\n      size: number;\n      ssh_url: string;\n      stargazers_count: number;\n      svn_url: string;\n      topics?: string[];\n      watchers: number;\n      watchers_count: number;\n      created_at: string;\n      updated_at: string;\n      allow_forking?: boolean;\n      is_template?: boolean;\n    } | null;\n    sha: string;\n    user: {\n      avatar_url: string;\n      events_url: string;\n      followers_url: string;\n      following_url: string;\n      gists_url: string;\n      gravatar_id: string | null;\n      html_url: string;\n      id: number;\n      node_id: string;\n      login: string;\n      organizations_url: string;\n      received_events_url: string;\n      repos_url: string;\n      site_admin: boolean;\n      starred_url: string;\n      subscriptions_url: string;\n      type: string;\n      url: string;\n    };\n  };\n  base: {\n    label: string;\n    ref: string;\n    repo: {\n      archive_url: string;\n      assignees_url: string;\n      blobs_url: string;\n      branches_url: string;\n      collaborators_url: string;\n      comments_url: string;\n      commits_url: string;\n      compare_url: string;\n      contents_url: string;\n      contributors_url: string;\n      deployments_url: string;\n      description: string | null;\n      downloads_url: string;\n      events_url: string;\n      fork: boolean;\n      forks_url: string;\n      full_name: string;\n      git_commits_url: string;\n      git_refs_url: string;\n      git_tags_url: string;\n      hooks_url: string;\n      html_url: string;\n      id: number;\n      is_template?: boolean;\n      node_id: string;\n      issue_comment_url: string;\n      issue_events_url: string;\n      issues_url: string;\n      keys_url: string;\n      labels_url: string;\n      languages_url: string;\n      merges_url: string;\n      milestones_url: string;\n      name: string;\n      notifications_url: string;\n      owner: {\n        avatar_url: string;\n        events_url: string;\n        followers_url: string;\n        following_url: string;\n        gists_url: string;\n        gravatar_id: string | null;\n        html_url: string;\n        id: number;\n        node_id: string;\n        login: string;\n        organizations_url: string;\n        received_events_url: string;\n        repos_url: string;\n        site_admin: boolean;\n        starred_url: string;\n        subscriptions_url: string;\n        type: string;\n        url: string;\n      };\n      private: boolean;\n      pulls_url: string;\n      releases_url: string;\n      stargazers_url: string;\n      statuses_url: string;\n      subscribers_url: string;\n      subscription_url: string;\n      tags_url: string;\n      teams_url: string;\n      trees_url: string;\n      url: string;\n      clone_url: string;\n      default_branch: string;\n      forks: number;\n      forks_count: number;\n      git_url: string;\n      has_downloads: boolean;\n      has_issues: boolean;\n      has_projects: boolean;\n      has_wiki: boolean;\n      has_pages: boolean;\n      homepage: string | null;\n      language: string | null;\n      master_branch?: string;\n      archived: boolean;\n      disabled: boolean;\n      visibility?: string;\n      mirror_url: string | null;\n      open_issues: number;\n      open_issues_count: number;\n      permissions?: {\n        admin: boolean;\n        maintain?: boolean;\n        push: boolean;\n        triage?: boolean;\n        pull: boolean;\n      };\n      temp_clone_token?: string;\n      allow_merge_commit?: boolean;\n      allow_squash_merge?: boolean;\n      allow_rebase_merge?: boolean;\n      license: LicenseSimple;\n      pushed_at: string;\n      size: number;\n      ssh_url: string;\n      stargazers_count: number;\n      svn_url: string;\n      topics?: string[];\n      watchers: number;\n      watchers_count: number;\n      created_at: string;\n      updated_at: string;\n      allow_forking?: boolean;\n    };\n    sha: string;\n    user: {\n      avatar_url: string;\n      events_url: string;\n      followers_url: string;\n      following_url: string;\n      gists_url: string;\n      gravatar_id: string | null;\n      html_url: string;\n      id: number;\n      node_id: string;\n      login: string;\n      organizations_url: string;\n      received_events_url: string;\n      repos_url: string;\n      site_admin: boolean;\n      starred_url: string;\n      subscriptions_url: string;\n      type: string;\n      url: string;\n    };\n  };\n  _links: {\n    comments: Link;\n    commits: Link;\n    statuses: Link;\n    html: Link;\n    issue: Link;\n    review_comments: Link;\n    review_comment: Link;\n    self: Link;\n  };\n  author_association: AuthorAssociation;\n  auto_merge: AutoMerge;\n  draft?: boolean;\n  merged: boolean;\n  mergeable: boolean | null;\n  rebaseable?: boolean | null;\n  mergeable_state: string;\n  merged_by: SimpleUser;\n  comments: number;\n  review_comments: number;\n  maintainer_can_modify: boolean;\n  commits: number;\n  additions: number;\n  deletions: number;\n  changed_files: number;\n};\nexport type BasicError = {\n  message?: string;\n  documentation_url?: string;\n  url?: string;\n  status?: string;\n};\nexport type ReactionRollup = {\n  url: string;\n  total_count: number;\n  \"+1\": number;\n  \"-1\": number;\n  laugh: number;\n  confused: number;\n  heart: number;\n  hooray: number;\n  eyes: number;\n  rocket: number;\n};\nexport type PullRequestReviewComment = {\n  url: string;\n  pull_request_review_id: number | null;\n  id: number;\n  node_id: string;\n  diff_hunk: string;\n  path: string;\n  position: number;\n  original_position: number;\n  commit_id: string;\n  original_commit_id: string;\n  in_reply_to_id?: number;\n  user: SimpleUser2;\n  body: string;\n  created_at: string;\n  updated_at: string;\n  html_url: string;\n  pull_request_url: string;\n  author_association: AuthorAssociation;\n  _links: {\n    self: {\n      href: string;\n    };\n    html: {\n      href: string;\n    };\n    pull_request: {\n      href: string;\n    };\n  };\n  start_line?: number | null;\n  original_start_line?: number | null;\n  start_side?: (\"LEFT\" | \"RIGHT\") | null;\n  line?: number;\n  original_line?: number;\n  side?: \"LEFT\" | \"RIGHT\";\n  reactions?: ReactionRollup;\n  body_html?: string;\n  body_text?: string;\n};\nexport type GitUser = {\n  name?: string;\n  email?: string;\n  date?: string;\n} | null;\nexport type Verification = {\n  verified: boolean;\n  reason: string;\n  payload: string | null;\n  signature: string | null;\n};\nexport type DiffEntry = {\n  sha: string;\n  filename: string;\n  status:\n    | \"added\"\n    | \"removed\"\n    | \"modified\"\n    | \"renamed\"\n    | \"copied\"\n    | \"changed\"\n    | \"unchanged\";\n  additions: number;\n  deletions: number;\n  changes: number;\n  blob_url: string;\n  raw_url: string;\n  contents_url: string;\n  patch?: string;\n  previous_filename?: string;\n};\nexport type Commit = {\n  url: string;\n  sha: string;\n  node_id: string;\n  html_url: string;\n  comments_url: string;\n  commit: {\n    url: string;\n    author: GitUser;\n    committer: GitUser;\n    message: string;\n    comment_count: number;\n    tree: {\n      sha: string;\n      url: string;\n    };\n    verification?: Verification;\n  };\n  author: SimpleUser;\n  committer: SimpleUser;\n  parents: {\n    sha: string;\n    url: string;\n    html_url?: string;\n  }[];\n  stats?: {\n    additions?: number;\n    deletions?: number;\n    total?: number;\n  };\n  files?: DiffEntry[];\n};\nexport type PullRequestMergeResult = {\n  sha: string;\n  merged: boolean;\n  message: string;\n};\nexport type PullRequestReviewRequest = {\n  users: SimpleUser2[];\n  teams: Team[];\n};\nexport type PullRequestReview = {\n  id: number;\n  node_id: string;\n  user: SimpleUser;\n  body: string;\n  state: string;\n  html_url: string;\n  pull_request_url: string;\n  _links: {\n    html: {\n      href: string;\n    };\n    pull_request: {\n      href: string;\n    };\n  };\n  submitted_at?: string;\n  commit_id: string;\n  body_html?: string;\n  body_text?: string;\n  author_association: AuthorAssociation;\n};\nexport type ValidationErrorSimple = {\n  message: string;\n  documentation_url: string;\n  errors?: string[];\n};\nexport type LegacyReviewComment = {\n  url: string;\n  pull_request_review_id: number | null;\n  id: number;\n  node_id: string;\n  diff_hunk: string;\n  path: string;\n  position: number | null;\n  original_position: number;\n  commit_id: string;\n  original_commit_id: string;\n  in_reply_to_id?: number;\n  user: SimpleUser;\n  body: string;\n  created_at: string;\n  updated_at: string;\n  html_url: string;\n  pull_request_url: string;\n  author_association: AuthorAssociation;\n  _links: {\n    self: Link;\n    html: Link;\n    pull_request: Link;\n  };\n  body_text?: string;\n  body_html?: string;\n  reactions?: ReactionRollup;\n  side?: \"LEFT\" | \"RIGHT\";\n  start_side?: (\"LEFT\" | \"RIGHT\") | null;\n  line?: number;\n  original_line?: number;\n  start_line?: number | null;\n  original_start_line?: number | null;\n};\nexport const {\n  usePullsListQuery,\n  usePullsCreateMutation,\n  usePullsListReviewCommentsForRepoQuery,\n  usePullsGetReviewCommentQuery,\n  usePullsUpdateReviewCommentMutation,\n  usePullsDeleteReviewCommentMutation,\n  usePullsGetQuery,\n  usePullsUpdateMutation,\n  usePullsListReviewCommentsQuery,\n  usePullsCreateReviewCommentMutation,\n  usePullsCreateReplyForReviewCommentMutation,\n  usePullsListCommitsQuery,\n  usePullsListFilesQuery,\n  usePullsCheckIfMergedQuery,\n  usePullsMergeMutation,\n  usePullsListRequestedReviewersQuery,\n  usePullsRequestReviewersMutation,\n  usePullsRemoveRequestedReviewersMutation,\n  usePullsListReviewsQuery,\n  usePullsCreateReviewMutation,\n  usePullsGetReviewQuery,\n  usePullsUpdateReviewMutation,\n  usePullsDeletePendingReviewMutation,\n  usePullsListCommentsForReviewQuery,\n  usePullsDismissReviewMutation,\n  usePullsSubmitReviewMutation,\n  usePullsUpdateBranchMutation,\n} = injectedRtkApi;\n","import { githubApi as api } from \"../baseApi\";\nconst injectedRtkApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    reposListForOrg: build.query<\n      ReposListForOrgApiResponse,\n      ReposListForOrgApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/orgs/${queryArg.org}/repos`,\n        params: {\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCreateInOrg: build.mutation<\n      ReposCreateInOrgApiResponse,\n      ReposCreateInOrgApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/orgs/${queryArg.org}/repos`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGet: build.query<ReposGetApiResponse, ReposGetApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}`,\n        cache: 'reload'\n      }),\n    }),\n    reposUpdate: build.mutation<ReposUpdateApiResponse, ReposUpdateApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDelete: build.mutation<ReposDeleteApiResponse, ReposDeleteApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListAutolinks: build.query<\n      ReposListAutolinksApiResponse,\n      ReposListAutolinksApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks`,\n        params: { page: queryArg.page },\n      }),\n    }),\n    reposCreateAutolink: build.mutation<\n      ReposCreateAutolinkApiResponse,\n      ReposCreateAutolinkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetAutolink: build.query<\n      ReposGetAutolinkApiResponse,\n      ReposGetAutolinkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks/${queryArg.autolinkId}`,\n      }),\n    }),\n    reposDeleteAutolink: build.mutation<\n      ReposDeleteAutolinkApiResponse,\n      ReposDeleteAutolinkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks/${queryArg.autolinkId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposEnableAutomatedSecurityFixes: build.mutation<\n      ReposEnableAutomatedSecurityFixesApiResponse,\n      ReposEnableAutomatedSecurityFixesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/automated-security-fixes`,\n        method: \"PUT\",\n      }),\n    }),\n    reposDisableAutomatedSecurityFixes: build.mutation<\n      ReposDisableAutomatedSecurityFixesApiResponse,\n      ReposDisableAutomatedSecurityFixesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/automated-security-fixes`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListBranches: build.query<\n      ReposListBranchesApiResponse,\n      ReposListBranchesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches`,\n        params: {\n          protected: queryArg[\"protected\"],\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      providesTags: ['Refs']\n    }),\n    reposGetBranch: build.query<\n      ReposGetBranchApiResponse,\n      ReposGetBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}`,\n      }),\n    }),\n    reposGetBranchProtection: build.query<\n      ReposGetBranchProtectionApiResponse,\n      ReposGetBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection`,\n      }),\n    }),\n    reposUpdateBranchProtection: build.mutation<\n      ReposUpdateBranchProtectionApiResponse,\n      ReposUpdateBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteBranchProtection: build.mutation<\n      ReposDeleteBranchProtectionApiResponse,\n      ReposDeleteBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetAdminBranchProtection: build.query<\n      ReposGetAdminBranchProtectionApiResponse,\n      ReposGetAdminBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/enforce_admins`,\n      }),\n    }),\n    reposSetAdminBranchProtection: build.mutation<\n      ReposSetAdminBranchProtectionApiResponse,\n      ReposSetAdminBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/enforce_admins`,\n        method: \"POST\",\n      }),\n    }),\n    reposDeleteAdminBranchProtection: build.mutation<\n      ReposDeleteAdminBranchProtectionApiResponse,\n      ReposDeleteAdminBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/enforce_admins`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetPullRequestReviewProtection: build.query<\n      ReposGetPullRequestReviewProtectionApiResponse,\n      ReposGetPullRequestReviewProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_pull_request_reviews`,\n      }),\n    }),\n    reposUpdatePullRequestReviewProtection: build.mutation<\n      ReposUpdatePullRequestReviewProtectionApiResponse,\n      ReposUpdatePullRequestReviewProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_pull_request_reviews`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeletePullRequestReviewProtection: build.mutation<\n      ReposDeletePullRequestReviewProtectionApiResponse,\n      ReposDeletePullRequestReviewProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_pull_request_reviews`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetCommitSignatureProtection: build.query<\n      ReposGetCommitSignatureProtectionApiResponse,\n      ReposGetCommitSignatureProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_signatures`,\n      }),\n    }),\n    reposCreateCommitSignatureProtection: build.mutation<\n      ReposCreateCommitSignatureProtectionApiResponse,\n      ReposCreateCommitSignatureProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_signatures`,\n        method: \"POST\",\n      }),\n    }),\n    reposDeleteCommitSignatureProtection: build.mutation<\n      ReposDeleteCommitSignatureProtectionApiResponse,\n      ReposDeleteCommitSignatureProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_signatures`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetStatusChecksProtection: build.query<\n      ReposGetStatusChecksProtectionApiResponse,\n      ReposGetStatusChecksProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks`,\n      }),\n    }),\n    reposUpdateStatusCheckProtection: build.mutation<\n      ReposUpdateStatusCheckProtectionApiResponse,\n      ReposUpdateStatusCheckProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveStatusCheckProtection: build.mutation<\n      ReposRemoveStatusCheckProtectionApiResponse,\n      ReposRemoveStatusCheckProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetAllStatusCheckContexts: build.query<\n      ReposGetAllStatusCheckContextsApiResponse,\n      ReposGetAllStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n      }),\n    }),\n    reposAddStatusCheckContexts: build.mutation<\n      ReposAddStatusCheckContextsApiResponse,\n      ReposAddStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetStatusCheckContexts: build.mutation<\n      ReposSetStatusCheckContextsApiResponse,\n      ReposSetStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveStatusCheckContexts: build.mutation<\n      ReposRemoveStatusCheckContextsApiResponse,\n      ReposRemoveStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetAccessRestrictions: build.query<\n      ReposGetAccessRestrictionsApiResponse,\n      ReposGetAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions`,\n      }),\n    }),\n    reposDeleteAccessRestrictions: build.mutation<\n      ReposDeleteAccessRestrictionsApiResponse,\n      ReposDeleteAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetAppsWithAccessToProtectedBranch: build.query<\n      ReposGetAppsWithAccessToProtectedBranchApiResponse,\n      ReposGetAppsWithAccessToProtectedBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n      }),\n    }),\n    reposAddAppAccessRestrictions: build.mutation<\n      ReposAddAppAccessRestrictionsApiResponse,\n      ReposAddAppAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetAppAccessRestrictions: build.mutation<\n      ReposSetAppAccessRestrictionsApiResponse,\n      ReposSetAppAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveAppAccessRestrictions: build.mutation<\n      ReposRemoveAppAccessRestrictionsApiResponse,\n      ReposRemoveAppAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetTeamsWithAccessToProtectedBranch: build.query<\n      ReposGetTeamsWithAccessToProtectedBranchApiResponse,\n      ReposGetTeamsWithAccessToProtectedBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n      }),\n    }),\n    reposAddTeamAccessRestrictions: build.mutation<\n      ReposAddTeamAccessRestrictionsApiResponse,\n      ReposAddTeamAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetTeamAccessRestrictions: build.mutation<\n      ReposSetTeamAccessRestrictionsApiResponse,\n      ReposSetTeamAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveTeamAccessRestrictions: build.mutation<\n      ReposRemoveTeamAccessRestrictionsApiResponse,\n      ReposRemoveTeamAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetUsersWithAccessToProtectedBranch: build.query<\n      ReposGetUsersWithAccessToProtectedBranchApiResponse,\n      ReposGetUsersWithAccessToProtectedBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n      }),\n    }),\n    reposAddUserAccessRestrictions: build.mutation<\n      ReposAddUserAccessRestrictionsApiResponse,\n      ReposAddUserAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetUserAccessRestrictions: build.mutation<\n      ReposSetUserAccessRestrictionsApiResponse,\n      ReposSetUserAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveUserAccessRestrictions: build.mutation<\n      ReposRemoveUserAccessRestrictionsApiResponse,\n      ReposRemoveUserAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRenameBranch: build.mutation<\n      ReposRenameBranchApiResponse,\n      ReposRenameBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/rename`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposCodeownersErrors: build.query<\n      ReposCodeownersErrorsApiResponse,\n      ReposCodeownersErrorsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/codeowners/errors`,\n        params: { ref: queryArg.ref },\n      }),\n    }),\n    reposListCollaborators: build.query<\n      ReposListCollaboratorsApiResponse,\n      ReposListCollaboratorsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators`,\n        params: {\n          affiliation: queryArg.affiliation,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCheckCollaborator: build.query<\n      ReposCheckCollaboratorApiResponse,\n      ReposCheckCollaboratorApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}`,\n      }),\n    }),\n    reposAddCollaborator: build.mutation<\n      ReposAddCollaboratorApiResponse,\n      ReposAddCollaboratorApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveCollaborator: build.mutation<\n      ReposRemoveCollaboratorApiResponse,\n      ReposRemoveCollaboratorApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetCollaboratorPermissionLevel: build.query<\n      ReposGetCollaboratorPermissionLevelApiResponse,\n      ReposGetCollaboratorPermissionLevelApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}/permission`,\n      }),\n    }),\n    reposListCommitCommentsForRepo: build.query<\n      ReposListCommitCommentsForRepoApiResponse,\n      ReposListCommitCommentsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetCommitComment: build.query<\n      ReposGetCommitCommentApiResponse,\n      ReposGetCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments/${queryArg.commentId}`,\n      }),\n    }),\n    reposUpdateCommitComment: build.mutation<\n      ReposUpdateCommitCommentApiResponse,\n      ReposUpdateCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments/${queryArg.commentId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteCommitComment: build.mutation<\n      ReposDeleteCommitCommentApiResponse,\n      ReposDeleteCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments/${queryArg.commentId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListCommits: build.query<\n      ReposListCommitsApiResponse,\n      ReposListCommitsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits`,\n        params: {\n          sha: queryArg.sha,\n          path: queryArg.path,\n          author: queryArg.author,\n          since: queryArg.since,\n          until: queryArg.until,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposListBranchesForHeadCommit: build.query<\n      ReposListBranchesForHeadCommitApiResponse,\n      ReposListBranchesForHeadCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/branches-where-head`,\n      }),\n    }),\n    reposListCommentsForCommit: build.query<\n      ReposListCommentsForCommitApiResponse,\n      ReposListCommentsForCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/comments`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateCommitComment: build.mutation<\n      ReposCreateCommitCommentApiResponse,\n      ReposCreateCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/comments`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListPullRequestsAssociatedWithCommit: build.query<\n      ReposListPullRequestsAssociatedWithCommitApiResponse,\n      ReposListPullRequestsAssociatedWithCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/pulls`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetCommit: build.query<\n      ReposGetCommitApiResponse,\n      ReposGetCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.ref}`,\n        params: { page: queryArg.page, per_page: queryArg.perPage },\n      }),\n    }),\n    reposGetCombinedStatusForRef: build.query<\n      ReposGetCombinedStatusForRefApiResponse,\n      ReposGetCombinedStatusForRefApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.ref}/status`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposListCommitStatusesForRef: build.query<\n      ReposListCommitStatusesForRefApiResponse,\n      ReposListCommitStatusesForRefApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.ref}/statuses`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetCommunityProfileMetrics: build.query<\n      ReposGetCommunityProfileMetricsApiResponse,\n      ReposGetCommunityProfileMetricsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/community/profile`,\n      }),\n    }),\n    reposCompareCommits: build.query<\n      ReposCompareCommitsApiResponse,\n      ReposCompareCommitsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/compare/${queryArg.basehead}`,\n        params: { page: queryArg.page, per_page: queryArg.perPage },\n      }),\n    }),\n    reposGetContent: build.query<\n      ReposGetContentApiResponse,\n      ReposGetContentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contents/${queryArg.path}`,\n        params: { ref: queryArg.ref },\n      }),\n      providesTags: ['Files']\n    }),\n    reposCreateOrUpdateFileContents: build.mutation<\n      ReposCreateOrUpdateFileContentsApiResponse,\n      ReposCreateOrUpdateFileContentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contents/${queryArg.path}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n      extraOptions: {maxRetries: 0},\n      invalidatesTags: ['Files', 'Refs']\n    }),\n    reposDeleteFile: build.mutation<\n      ReposDeleteFileApiResponse,\n      ReposDeleteFileApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contents/${queryArg.path}`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListContributors: build.query<\n      ReposListContributorsApiResponse,\n      ReposListContributorsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contributors`,\n        params: {\n          anon: queryArg.anon,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposListDeployments: build.query<\n      ReposListDeploymentsApiResponse,\n      ReposListDeploymentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments`,\n        params: {\n          sha: queryArg.sha,\n          ref: queryArg.ref,\n          task: queryArg.task,\n          environment: queryArg.environment,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCreateDeployment: build.mutation<\n      ReposCreateDeploymentApiResponse,\n      ReposCreateDeploymentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetDeployment: build.query<\n      ReposGetDeploymentApiResponse,\n      ReposGetDeploymentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}`,\n      }),\n    }),\n    reposDeleteDeployment: build.mutation<\n      ReposDeleteDeploymentApiResponse,\n      ReposDeleteDeploymentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListDeploymentStatuses: build.query<\n      ReposListDeploymentStatusesApiResponse,\n      ReposListDeploymentStatusesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}/statuses`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateDeploymentStatus: build.mutation<\n      ReposCreateDeploymentStatusApiResponse,\n      ReposCreateDeploymentStatusApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}/statuses`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetDeploymentStatus: build.query<\n      ReposGetDeploymentStatusApiResponse,\n      ReposGetDeploymentStatusApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}/statuses/${queryArg.statusId}`,\n      }),\n    }),\n    reposCreateDispatchEvent: build.mutation<\n      ReposCreateDispatchEventApiResponse,\n      ReposCreateDispatchEventApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/dispatches`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetAllEnvironments: build.query<\n      ReposGetAllEnvironmentsApiResponse,\n      ReposGetAllEnvironmentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments`,\n      }),\n    }),\n    reposGetEnvironment: build.query<\n      ReposGetEnvironmentApiResponse,\n      ReposGetEnvironmentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments/${queryArg.environmentName}`,\n      }),\n    }),\n    reposCreateOrUpdateEnvironment: build.mutation<\n      ReposCreateOrUpdateEnvironmentApiResponse,\n      ReposCreateOrUpdateEnvironmentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments/${queryArg.environmentName}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteAnEnvironment: build.mutation<\n      ReposDeleteAnEnvironmentApiResponse,\n      ReposDeleteAnEnvironmentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments/${queryArg.environmentName}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListForks: build.query<\n      ReposListForksApiResponse,\n      ReposListForksApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/forks`,\n        params: {\n          sort: queryArg.sort,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCreateFork: build.mutation<\n      ReposCreateForkApiResponse,\n      ReposCreateForkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/forks`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListWebhooks: build.query<\n      ReposListWebhooksApiResponse,\n      ReposListWebhooksApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateWebhook: build.mutation<\n      ReposCreateWebhookApiResponse,\n      ReposCreateWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetWebhook: build.query<\n      ReposGetWebhookApiResponse,\n      ReposGetWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}`,\n      }),\n    }),\n    reposUpdateWebhook: build.mutation<\n      ReposUpdateWebhookApiResponse,\n      ReposUpdateWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteWebhook: build.mutation<\n      ReposDeleteWebhookApiResponse,\n      ReposDeleteWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetWebhookConfigForRepo: build.query<\n      ReposGetWebhookConfigForRepoApiResponse,\n      ReposGetWebhookConfigForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/config`,\n      }),\n    }),\n    reposUpdateWebhookConfigForRepo: build.mutation<\n      ReposUpdateWebhookConfigForRepoApiResponse,\n      ReposUpdateWebhookConfigForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/config`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListWebhookDeliveries: build.query<\n      ReposListWebhookDeliveriesApiResponse,\n      ReposListWebhookDeliveriesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/deliveries`,\n        params: { per_page: queryArg.perPage, cursor: queryArg.cursor },\n      }),\n    }),\n    reposGetWebhookDelivery: build.query<\n      ReposGetWebhookDeliveryApiResponse,\n      ReposGetWebhookDeliveryApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/deliveries/${queryArg.deliveryId}`,\n      }),\n    }),\n    reposRedeliverWebhookDelivery: build.mutation<\n      ReposRedeliverWebhookDeliveryApiResponse,\n      ReposRedeliverWebhookDeliveryApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/deliveries/${queryArg.deliveryId}/attempts`,\n        method: \"POST\",\n      }),\n    }),\n    reposPingWebhook: build.mutation<\n      ReposPingWebhookApiResponse,\n      ReposPingWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/pings`,\n        method: \"POST\",\n      }),\n    }),\n    reposTestPushWebhook: build.mutation<\n      ReposTestPushWebhookApiResponse,\n      ReposTestPushWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/tests`,\n        method: \"POST\",\n      }),\n    }),\n    reposListInvitations: build.query<\n      ReposListInvitationsApiResponse,\n      ReposListInvitationsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/invitations`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposUpdateInvitation: build.mutation<\n      ReposUpdateInvitationApiResponse,\n      ReposUpdateInvitationApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/invitations/${queryArg.invitationId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteInvitation: build.mutation<\n      ReposDeleteInvitationApiResponse,\n      ReposDeleteInvitationApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/invitations/${queryArg.invitationId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListDeployKeys: build.query<\n      ReposListDeployKeysApiResponse,\n      ReposListDeployKeysApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateDeployKey: build.mutation<\n      ReposCreateDeployKeyApiResponse,\n      ReposCreateDeployKeyApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetDeployKey: build.query<\n      ReposGetDeployKeyApiResponse,\n      ReposGetDeployKeyApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys/${queryArg.keyId}`,\n      }),\n    }),\n    reposDeleteDeployKey: build.mutation<\n      ReposDeleteDeployKeyApiResponse,\n      ReposDeleteDeployKeyApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys/${queryArg.keyId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListLanguages: build.query<\n      ReposListLanguagesApiResponse,\n      ReposListLanguagesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/languages`,\n      }),\n    }),\n    reposEnableLfsForRepo: build.mutation<\n      ReposEnableLfsForRepoApiResponse,\n      ReposEnableLfsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/lfs`,\n        method: \"PUT\",\n      }),\n    }),\n    reposDisableLfsForRepo: build.mutation<\n      ReposDisableLfsForRepoApiResponse,\n      ReposDisableLfsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/lfs`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposMergeUpstream: build.mutation<\n      ReposMergeUpstreamApiResponse,\n      ReposMergeUpstreamApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merge-upstream`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposMerge: build.mutation<ReposMergeApiResponse, ReposMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merges`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetPages: build.query<ReposGetPagesApiResponse, ReposGetPagesApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n      }),\n    }),\n    reposCreatePagesSite: build.mutation<\n      ReposCreatePagesSiteApiResponse,\n      ReposCreatePagesSiteApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposUpdateInformationAboutPagesSite: build.mutation<\n      ReposUpdateInformationAboutPagesSiteApiResponse,\n      ReposUpdateInformationAboutPagesSiteApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeletePagesSite: build.mutation<\n      ReposDeletePagesSiteApiResponse,\n      ReposDeletePagesSiteApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListPagesBuilds: build.query<\n      ReposListPagesBuildsApiResponse,\n      ReposListPagesBuildsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposRequestPagesBuild: build.mutation<\n      ReposRequestPagesBuildApiResponse,\n      ReposRequestPagesBuildApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds`,\n        method: \"POST\",\n      }),\n    }),\n    reposGetLatestPagesBuild: build.query<\n      ReposGetLatestPagesBuildApiResponse,\n      ReposGetLatestPagesBuildApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds/latest`,\n      }),\n    }),\n    reposGetPagesBuild: build.query<\n      ReposGetPagesBuildApiResponse,\n      ReposGetPagesBuildApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds/${queryArg.buildId}`,\n      }),\n    }),\n    reposGetPagesHealthCheck: build.query<\n      ReposGetPagesHealthCheckApiResponse,\n      ReposGetPagesHealthCheckApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/health`,\n      }),\n    }),\n    reposGetReadme: build.query<\n      ReposGetReadmeApiResponse,\n      ReposGetReadmeApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/readme`,\n        params: { ref: queryArg.ref },\n      }),\n    }),\n    reposGetReadmeInDirectory: build.query<\n      ReposGetReadmeInDirectoryApiResponse,\n      ReposGetReadmeInDirectoryApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/readme/${queryArg.dir}`,\n        params: { ref: queryArg.ref },\n      }),\n    }),\n    reposListReleases: build.query<\n      ReposListReleasesApiResponse,\n      ReposListReleasesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateRelease: build.mutation<\n      ReposCreateReleaseApiResponse,\n      ReposCreateReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetReleaseAsset: build.query<\n      ReposGetReleaseAssetApiResponse,\n      ReposGetReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/assets/${queryArg.assetId}`,\n      }),\n    }),\n    reposUpdateReleaseAsset: build.mutation<\n      ReposUpdateReleaseAssetApiResponse,\n      ReposUpdateReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/assets/${queryArg.assetId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteReleaseAsset: build.mutation<\n      ReposDeleteReleaseAssetApiResponse,\n      ReposDeleteReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/assets/${queryArg.assetId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGenerateReleaseNotes: build.mutation<\n      ReposGenerateReleaseNotesApiResponse,\n      ReposGenerateReleaseNotesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/generate-notes`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetLatestRelease: build.query<\n      ReposGetLatestReleaseApiResponse,\n      ReposGetLatestReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/latest`,\n      }),\n    }),\n    reposGetReleaseByTag: build.query<\n      ReposGetReleaseByTagApiResponse,\n      ReposGetReleaseByTagApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/tags/${queryArg.tag}`,\n      }),\n    }),\n    reposGetRelease: build.query<\n      ReposGetReleaseApiResponse,\n      ReposGetReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}`,\n      }),\n    }),\n    reposUpdateRelease: build.mutation<\n      ReposUpdateReleaseApiResponse,\n      ReposUpdateReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteRelease: build.mutation<\n      ReposDeleteReleaseApiResponse,\n      ReposDeleteReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListReleaseAssets: build.query<\n      ReposListReleaseAssetsApiResponse,\n      ReposListReleaseAssetsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}/assets`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposUploadReleaseAsset: build.mutation<\n      ReposUploadReleaseAssetApiResponse,\n      ReposUploadReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}/assets`,\n        method: \"POST\",\n        body: queryArg.body,\n        params: { name: queryArg.name, label: queryArg.label },\n      }),\n    }),\n    reposGetCodeFrequencyStats: build.query<\n      ReposGetCodeFrequencyStatsApiResponse,\n      ReposGetCodeFrequencyStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/code_frequency`,\n      }),\n    }),\n    reposGetCommitActivityStats: build.query<\n      ReposGetCommitActivityStatsApiResponse,\n      ReposGetCommitActivityStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/commit_activity`,\n      }),\n    }),\n    reposGetContributorsStats: build.query<\n      ReposGetContributorsStatsApiResponse,\n      ReposGetContributorsStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/contributors`,\n      }),\n    }),\n    reposGetParticipationStats: build.query<\n      ReposGetParticipationStatsApiResponse,\n      ReposGetParticipationStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/participation`,\n      }),\n    }),\n    reposGetPunchCardStats: build.query<\n      ReposGetPunchCardStatsApiResponse,\n      ReposGetPunchCardStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/punch_card`,\n      }),\n    }),\n    reposCreateCommitStatus: build.mutation<\n      ReposCreateCommitStatusApiResponse,\n      ReposCreateCommitStatusApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/statuses/${queryArg.sha}`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListTags: build.query<ReposListTagsApiResponse, ReposListTagsApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/tags`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposDownloadTarballArchive: build.query<\n      ReposDownloadTarballArchiveApiResponse,\n      ReposDownloadTarballArchiveApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/tarball/${queryArg.ref}`,\n      }),\n    }),\n    reposListTeams: build.query<\n      ReposListTeamsApiResponse,\n      ReposListTeamsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/teams`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetAllTopics: build.query<\n      ReposGetAllTopicsApiResponse,\n      ReposGetAllTopicsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/topics`,\n        params: { page: queryArg.page, per_page: queryArg.perPage },\n      }),\n    }),\n    reposReplaceAllTopics: build.mutation<\n      ReposReplaceAllTopicsApiResponse,\n      ReposReplaceAllTopicsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/topics`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetClones: build.query<\n      ReposGetClonesApiResponse,\n      ReposGetClonesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/clones`,\n        params: { per: queryArg.per },\n      }),\n    }),\n    reposGetTopPaths: build.query<\n      ReposGetTopPathsApiResponse,\n      ReposGetTopPathsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/popular/paths`,\n      }),\n    }),\n    reposGetTopReferrers: build.query<\n      ReposGetTopReferrersApiResponse,\n      ReposGetTopReferrersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/popular/referrers`,\n      }),\n    }),\n    reposGetViews: build.query<ReposGetViewsApiResponse, ReposGetViewsApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/views`,\n        params: { per: queryArg.per },\n      }),\n    }),\n    reposTransfer: build.mutation<\n      ReposTransferApiResponse,\n      ReposTransferApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/transfer`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposCheckVulnerabilityAlerts: build.query<\n      ReposCheckVulnerabilityAlertsApiResponse,\n      ReposCheckVulnerabilityAlertsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/vulnerability-alerts`,\n      }),\n    }),\n    reposEnableVulnerabilityAlerts: build.mutation<\n      ReposEnableVulnerabilityAlertsApiResponse,\n      ReposEnableVulnerabilityAlertsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/vulnerability-alerts`,\n        method: \"PUT\",\n      }),\n    }),\n    reposDisableVulnerabilityAlerts: build.mutation<\n      ReposDisableVulnerabilityAlertsApiResponse,\n      ReposDisableVulnerabilityAlertsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/vulnerability-alerts`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposDownloadZipballArchive: build.query<\n      ReposDownloadZipballArchiveApiResponse,\n      ReposDownloadZipballArchiveApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/zipball/${queryArg.ref}`,\n      }),\n    }),\n    reposCreateUsingTemplate: build.mutation<\n      ReposCreateUsingTemplateApiResponse,\n      ReposCreateUsingTemplateApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.templateOwner}/${queryArg.templateRepo}/generate`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListPublic: build.query<\n      ReposListPublicApiResponse,\n      ReposListPublicApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repositories`,\n        params: { since: queryArg.since },\n      }),\n    }),\n    reposListForAuthenticatedUser: build.query<\n      ReposListForAuthenticatedUserApiResponse,\n      ReposListForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repos`,\n        params: {\n          visibility: queryArg.visibility,\n          affiliation: queryArg.affiliation,\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n          since: queryArg.since,\n          before: queryArg.before,\n        },\n      }),\n    }),\n    reposCreateForAuthenticatedUser: build.mutation<\n      ReposCreateForAuthenticatedUserApiResponse,\n      ReposCreateForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repos`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListInvitationsForAuthenticatedUser: build.query<\n      ReposListInvitationsForAuthenticatedUserApiResponse,\n      ReposListInvitationsForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repository_invitations`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposAcceptInvitationForAuthenticatedUser: build.mutation<\n      ReposAcceptInvitationForAuthenticatedUserApiResponse,\n      ReposAcceptInvitationForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repository_invitations/${queryArg.invitationId}`,\n        method: \"PATCH\",\n      }),\n    }),\n    reposDeclineInvitationForAuthenticatedUser: build.mutation<\n      ReposDeclineInvitationForAuthenticatedUserApiResponse,\n      ReposDeclineInvitationForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repository_invitations/${queryArg.invitationId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListForUser: build.query<\n      ReposListForUserApiResponse,\n      ReposListForUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/users/${queryArg.username}/repos`,\n        params: {\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\nexport { injectedRtkApi as githubApi };\nexport type ReposListForOrgApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListForOrgApiArg = {\n  org: string;\n  /** Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token. */\n  type?:\n    | \"all\"\n    | \"public\"\n    | \"private\"\n    | \"forks\"\n    | \"sources\"\n    | \"member\"\n    | \"internal\";\n  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n  sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n  /** Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc` */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateInOrgApiResponse =\n  /** status 201 Response */ Repository2;\nexport type ReposCreateInOrgApiArg = {\n  org: string;\n  body: {\n    name: string;\n    description?: string;\n    homepage?: string;\n    private?: boolean;\n    visibility?: \"public\" | \"private\" | \"internal\";\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    is_template?: boolean;\n    team_id?: number;\n    auto_init?: boolean;\n    gitignore_template?: string;\n    license_template?: string;\n    allow_squash_merge?: boolean;\n    allow_merge_commit?: boolean;\n    allow_rebase_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n  };\n};\nexport type ReposGetApiResponse = /** status 200 Response */ FullRepository;\nexport type ReposGetApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposUpdateApiResponse = /** status 200 Response */ FullRepository;\nexport type ReposUpdateApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    name?: string;\n    description?: string;\n    homepage?: string;\n    private?: boolean;\n    visibility?: \"public\" | \"private\" | \"internal\";\n    security_and_analysis?: {\n      advanced_security?: {\n        status?: string;\n      };\n      secret_scanning?: {\n        status?: string;\n      };\n    } | null;\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    is_template?: boolean;\n    default_branch?: string;\n    allow_squash_merge?: boolean;\n    allow_merge_commit?: boolean;\n    allow_rebase_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    archived?: boolean;\n    allow_forking?: boolean;\n  };\n};\nexport type ReposDeleteApiResponse = /** status 204 Response */ undefined;\nexport type ReposDeleteApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposListAutolinksApiResponse =\n  /** status 200 Response */ AutolinkReference[];\nexport type ReposListAutolinksApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateAutolinkApiResponse =\n  /** status 201 response */ AutolinkReference;\nexport type ReposCreateAutolinkApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    key_prefix: string;\n    url_template: string;\n  };\n};\nexport type ReposGetAutolinkApiResponse =\n  /** status 200 Response */ AutolinkReference;\nexport type ReposGetAutolinkApiArg = {\n  owner: string;\n  repo: string;\n  /** autolink_id parameter */\n  autolinkId: number;\n};\nexport type ReposDeleteAutolinkApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteAutolinkApiArg = {\n  owner: string;\n  repo: string;\n  /** autolink_id parameter */\n  autolinkId: number;\n};\nexport type ReposEnableAutomatedSecurityFixesApiResponse = unknown;\nexport type ReposEnableAutomatedSecurityFixesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDisableAutomatedSecurityFixesApiResponse = unknown;\nexport type ReposDisableAutomatedSecurityFixesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposListBranchesApiResponse =\n  /** status 200 Response */ ShortBranch[];\nexport type ReposListBranchesApiArg = {\n  owner: string;\n  repo: string;\n  /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n  protected?: boolean;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetBranchApiResponse =\n  /** status 200 Response */ BranchWithProtection;\nexport type ReposGetBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetBranchProtectionApiResponse =\n  /** status 200 Response */ BranchProtection;\nexport type ReposGetBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposUpdateBranchProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranch;\nexport type ReposUpdateBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    required_status_checks: {\n      strict: boolean;\n      contexts: string[];\n      checks?: {\n        context: string;\n        app_id?: number;\n      }[];\n    } | null;\n    enforce_admins: boolean | null;\n    required_pull_request_reviews: {\n      dismissal_restrictions?: {\n        users?: string[];\n        teams?: string[];\n      };\n      dismiss_stale_reviews?: boolean;\n      require_code_owner_reviews?: boolean;\n      required_approving_review_count?: number;\n      bypass_pull_request_allowances?: {\n        users?: string[];\n        teams?: string[];\n      } | null;\n    } | null;\n    restrictions: {\n      users: string[];\n      teams: string[];\n      apps?: string[];\n    } | null;\n    required_linear_history?: boolean;\n    allow_force_pushes?: boolean | null;\n    allow_deletions?: boolean;\n    required_conversation_resolution?: boolean;\n  };\n};\nexport type ReposDeleteBranchProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetAdminBranchProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposGetAdminBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposSetAdminBranchProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposSetAdminBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposDeleteAdminBranchProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteAdminBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetPullRequestReviewProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchPullRequestReview;\nexport type ReposGetPullRequestReviewProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposUpdatePullRequestReviewProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchPullRequestReview;\nexport type ReposUpdatePullRequestReviewProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    dismissal_restrictions?: {\n      users?: string[];\n      teams?: string[];\n    };\n    dismiss_stale_reviews?: boolean;\n    require_code_owner_reviews?: boolean;\n    required_approving_review_count?: number;\n    bypass_pull_request_allowances?: {\n      users?: string[];\n      teams?: string[];\n    } | null;\n  };\n};\nexport type ReposDeletePullRequestReviewProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeletePullRequestReviewProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetCommitSignatureProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposGetCommitSignatureProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposCreateCommitSignatureProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposCreateCommitSignatureProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposDeleteCommitSignatureProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteCommitSignatureProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetStatusChecksProtectionApiResponse =\n  /** status 200 Response */ StatusCheckPolicy;\nexport type ReposGetStatusChecksProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposUpdateStatusCheckProtectionApiResponse =\n  /** status 200 Response */ StatusCheckPolicy;\nexport type ReposUpdateStatusCheckProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    strict?: boolean;\n    contexts?: string[];\n    checks?: {\n      context: string;\n      app_id?: number;\n    }[];\n  };\n};\nexport type ReposRemoveStatusCheckProtectionApiResponse = unknown;\nexport type ReposRemoveStatusCheckProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetAllStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposGetAllStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposAddStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        contexts: string[];\n      }\n    | string[];\n};\nexport type ReposSetStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposSetStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        contexts: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposRemoveStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        contexts: string[];\n      }\n    | string[];\n};\nexport type ReposGetAccessRestrictionsApiResponse =\n  /** status 200 Response */ BranchRestrictionPolicy;\nexport type ReposGetAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposDeleteAccessRestrictionsApiResponse = unknown;\nexport type ReposDeleteAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetAppsWithAccessToProtectedBranchApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposGetAppsWithAccessToProtectedBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddAppAccessRestrictionsApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposAddAppAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        apps: string[];\n      }\n    | string[];\n};\nexport type ReposSetAppAccessRestrictionsApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposSetAppAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        apps: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveAppAccessRestrictionsApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposRemoveAppAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        apps: string[];\n      }\n    | string[];\n};\nexport type ReposGetTeamsWithAccessToProtectedBranchApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposGetTeamsWithAccessToProtectedBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddTeamAccessRestrictionsApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposAddTeamAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        teams: string[];\n      }\n    | string[];\n};\nexport type ReposSetTeamAccessRestrictionsApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposSetTeamAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        teams: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveTeamAccessRestrictionsApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposRemoveTeamAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        teams: string[];\n      }\n    | string[];\n};\nexport type ReposGetUsersWithAccessToProtectedBranchApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposGetUsersWithAccessToProtectedBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddUserAccessRestrictionsApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposAddUserAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        users: string[];\n      }\n    | string[];\n};\nexport type ReposSetUserAccessRestrictionsApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposSetUserAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        users: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveUserAccessRestrictionsApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposRemoveUserAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        users: string[];\n      }\n    | string[];\n};\nexport type ReposRenameBranchApiResponse =\n  /** status 201 Response */ BranchWithProtection;\nexport type ReposRenameBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    new_name: string;\n  };\n};\nexport type ReposCodeownersErrorsApiResponse =\n  /** status 200 Response */ CodeownersErrors;\nexport type ReposCodeownersErrorsApiArg = {\n  owner: string;\n  repo: string;\n  /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */\n  ref?: string;\n};\nexport type ReposListCollaboratorsApiResponse =\n  /** status 200 Response */ Collaborator[];\nexport type ReposListCollaboratorsApiArg = {\n  owner: string;\n  repo: string;\n  /** Filter collaborators returned by their affiliation. Can be one of:\n    \\* `outside`: All outside collaborators of an organization-owned repository.\n    \\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.\n    \\* `all`: All collaborators the authenticated user can see. */\n  affiliation?: \"outside\" | \"direct\" | \"all\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCheckCollaboratorApiResponse = unknown;\nexport type ReposCheckCollaboratorApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n};\nexport type ReposAddCollaboratorApiResponse =\n  /** status 201 Response when a new invitation is created */\n    | RepositoryInvitation\n    | /** status 204 Response when person is already a collaborator */ undefined;\nexport type ReposAddCollaboratorApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n  body: {\n    permission?: \"pull\" | \"push\" | \"admin\" | \"maintain\" | \"triage\";\n    permissions?: string;\n  };\n};\nexport type ReposRemoveCollaboratorApiResponse = unknown;\nexport type ReposRemoveCollaboratorApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n};\nexport type ReposGetCollaboratorPermissionLevelApiResponse =\n  /** status 200 if user has admin permissions */ RepositoryCollaboratorPermission;\nexport type ReposGetCollaboratorPermissionLevelApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n};\nexport type ReposListCommitCommentsForRepoApiResponse =\n  /** status 200 Response */ CommitComment[];\nexport type ReposListCommitCommentsForRepoApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetCommitCommentApiResponse =\n  /** status 200 Response */ CommitComment;\nexport type ReposGetCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type ReposUpdateCommitCommentApiResponse =\n  /** status 200 Response */ CommitComment;\nexport type ReposUpdateCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n  body: {\n    body: string;\n  };\n};\nexport type ReposDeleteCommitCommentApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type ReposListCommitsApiResponse = /** status 200 Response */ Commit[];\nexport type ReposListCommitsApiArg = {\n  owner: string;\n  repo: string;\n  /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */\n  sha?: string;\n  /** Only commits containing this file path will be returned. */\n  path?: string;\n  /** GitHub login or email address by which to filter by commit author. */\n  author?: string;\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  until?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposListBranchesForHeadCommitApiResponse =\n  /** status 200 Response */ BranchShort[];\nexport type ReposListBranchesForHeadCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n};\nexport type ReposListCommentsForCommitApiResponse =\n  /** status 200 Response */ CommitComment[];\nexport type ReposListCommentsForCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateCommitCommentApiResponse =\n  /** status 201 Response */ CommitComment;\nexport type ReposCreateCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n  body: {\n    body: string;\n    path?: string;\n    position?: number;\n    line?: number;\n  };\n};\nexport type ReposListPullRequestsAssociatedWithCommitApiResponse =\n  /** status 200 Response */ PullRequestSimple[];\nexport type ReposListPullRequestsAssociatedWithCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetCommitApiResponse = /** status 200 Response */ Commit;\nexport type ReposGetCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** ref parameter */\n  ref: string;\n};\nexport type ReposGetCombinedStatusForRefApiResponse =\n  /** status 200 Response */ CombinedCommitStatus;\nexport type ReposGetCombinedStatusForRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposListCommitStatusesForRefApiResponse =\n  /** status 200 Response */ Status[];\nexport type ReposListCommitStatusesForRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetCommunityProfileMetricsApiResponse =\n  /** status 200 Response */ CommunityProfile;\nexport type ReposGetCommunityProfileMetricsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposCompareCommitsApiResponse =\n  /** status 200 Response */ CommitComparison;\nexport type ReposCompareCommitsApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** The base branch and head branch to compare. This parameter expects the format `{base}...{head}`. */\n  basehead: string;\n};\nexport type ReposGetContentApiResponse = /** status 200 Response */\n  | ContentDirectory\n  | ContentFile\n  | SymlinkContent\n  | SymlinkContent2;\nexport type ReposGetContentApiArg = {\n  owner: string;\n  repo: string;\n  /** path parameter */\n  path: string;\n  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n  ref?: string;\n};\nexport type ReposCreateOrUpdateFileContentsApiResponse =\n  /** status 200 Response */ FileCommit | /** status 201 Response */ FileCommit;\nexport type ReposCreateOrUpdateFileContentsApiArg = {\n  owner: string;\n  repo: string;\n  /** path parameter */\n  path: string;\n  body: {\n    message: string;\n    content: string;\n    sha?: string;\n    branch?: string;\n    committer?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n    author?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n  };\n};\nexport type ReposDeleteFileApiResponse = /** status 200 Response */ FileCommit;\nexport type ReposDeleteFileApiArg = {\n  owner: string;\n  repo: string;\n  /** path parameter */\n  path: string;\n  body: {\n    message: string;\n    sha: string;\n    branch?: string;\n    committer?: {\n      name?: string;\n      email?: string;\n    };\n    author?: {\n      name?: string;\n      email?: string;\n    };\n  };\n};\nexport type ReposListContributorsApiResponse =\n  /** status 200 if repository contains content */\n    | Contributor[]\n    | /** status 204 Response if repository is empty */ undefined;\nexport type ReposListContributorsApiArg = {\n  owner: string;\n  repo: string;\n  /** Set to `1` or `true` to include anonymous contributors in results. */\n  anon?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposListDeploymentsApiResponse =\n  /** status 200 Response */ Deployment[];\nexport type ReposListDeploymentsApiArg = {\n  owner: string;\n  repo: string;\n  /** The SHA recorded at creation time. */\n  sha?: string;\n  /** The name of the ref. This can be a branch, tag, or SHA. */\n  ref?: string;\n  /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n  task?: string;\n  /** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n  environment?: string | null;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateDeploymentApiResponse = /** status 201 Response */\n  | Deployment\n  | /** status 202 Merged branch response */ {\n      message?: string;\n    };\nexport type ReposCreateDeploymentApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    ref: string;\n    task?: string;\n    auto_merge?: boolean;\n    required_contexts?: string[];\n    payload?:\n      | {\n          [key: string]: any;\n        }\n      | string;\n    environment?: string;\n    description?: string | null;\n    transient_environment?: boolean;\n    production_environment?: boolean;\n  };\n};\nexport type ReposGetDeploymentApiResponse =\n  /** status 200 Response */ Deployment;\nexport type ReposGetDeploymentApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n};\nexport type ReposDeleteDeploymentApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteDeploymentApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n};\nexport type ReposListDeploymentStatusesApiResponse =\n  /** status 200 Response */ DeploymentStatus[];\nexport type ReposListDeploymentStatusesApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateDeploymentStatusApiResponse =\n  /** status 201 Response */ DeploymentStatus;\nexport type ReposCreateDeploymentStatusApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n  body: {\n    state:\n      | \"error\"\n      | \"failure\"\n      | \"inactive\"\n      | \"in_progress\"\n      | \"queued\"\n      | \"pending\"\n      | \"success\";\n    target_url?: string;\n    log_url?: string;\n    description?: string;\n    environment?: \"production\" | \"staging\" | \"qa\";\n    environment_url?: string;\n    auto_inactive?: boolean;\n  };\n};\nexport type ReposGetDeploymentStatusApiResponse =\n  /** status 200 Response */ DeploymentStatus;\nexport type ReposGetDeploymentStatusApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n  statusId: number;\n};\nexport type ReposCreateDispatchEventApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposCreateDispatchEventApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    event_type: string;\n    client_payload?: {\n      [key: string]: any;\n    };\n  };\n};\nexport type ReposGetAllEnvironmentsApiResponse = /** status 200 Response */ {\n  total_count?: number;\n  environments?: Environment[];\n};\nexport type ReposGetAllEnvironmentsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetEnvironmentApiResponse =\n  /** status 200 Response */ Environment;\nexport type ReposGetEnvironmentApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the environment */\n  environmentName: string;\n};\nexport type ReposCreateOrUpdateEnvironmentApiResponse =\n  /** status 200 Response */ Environment;\nexport type ReposCreateOrUpdateEnvironmentApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the environment */\n  environmentName: string;\n  body: {\n    wait_timer?: WaitTimer;\n    reviewers?:\n      | {\n          type?: DeploymentReviewerType;\n          id?: number;\n        }[]\n      | null;\n    deployment_branch_policy?: DeploymentBranchPolicy;\n  } | null;\n};\nexport type ReposDeleteAnEnvironmentApiResponse = unknown;\nexport type ReposDeleteAnEnvironmentApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the environment */\n  environmentName: string;\n};\nexport type ReposListForksApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListForksApiArg = {\n  owner: string;\n  repo: string;\n  /** The sort order. Can be either `newest`, `oldest`, or `stargazers`. */\n  sort?: \"newest\" | \"oldest\" | \"stargazers\" | \"watchers\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateForkApiResponse =\n  /** status 202 Response */ FullRepository;\nexport type ReposCreateForkApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    organization?: string;\n  } | null;\n};\nexport type ReposListWebhooksApiResponse = /** status 200 Response */ Webhook[];\nexport type ReposListWebhooksApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateWebhookApiResponse = /** status 201 Response */ Webhook;\nexport type ReposCreateWebhookApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    name?: string;\n    config?: {\n      url?: WebhookConfigUrl;\n      content_type?: WebhookConfigContentType;\n      secret?: WebhookConfigSecret;\n      insecure_ssl?: WebhookConfigInsecureSsl;\n      token?: string;\n      digest?: string;\n    };\n    events?: string[];\n    active?: boolean;\n  } | null;\n};\nexport type ReposGetWebhookApiResponse = /** status 200 Response */ Webhook;\nexport type ReposGetWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposUpdateWebhookApiResponse = /** status 200 Response */ Webhook;\nexport type ReposUpdateWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  body: {\n    config?: {\n      url: WebhookConfigUrl;\n      content_type?: WebhookConfigContentType;\n      secret?: WebhookConfigSecret;\n      insecure_ssl?: WebhookConfigInsecureSsl;\n      address?: string;\n      room?: string;\n    };\n    events?: string[];\n    add_events?: string[];\n    remove_events?: string[];\n    active?: boolean;\n  };\n};\nexport type ReposDeleteWebhookApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposGetWebhookConfigForRepoApiResponse =\n  /** status 200 Response */ WebhookConfiguration;\nexport type ReposGetWebhookConfigForRepoApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposUpdateWebhookConfigForRepoApiResponse =\n  /** status 200 Response */ WebhookConfiguration;\nexport type ReposUpdateWebhookConfigForRepoApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  body: {\n    url?: WebhookConfigUrl;\n    content_type?: WebhookConfigContentType;\n    secret?: WebhookConfigSecret;\n    insecure_ssl?: WebhookConfigInsecureSsl;\n  };\n};\nexport type ReposListWebhookDeliveriesApiResponse =\n  /** status 200 Response */ SimpleWebhookDelivery[];\nexport type ReposListWebhookDeliveriesApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n  cursor?: string;\n};\nexport type ReposGetWebhookDeliveryApiResponse =\n  /** status 200 Response */ WebhookDelivery;\nexport type ReposGetWebhookDeliveryApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  deliveryId: number;\n};\nexport type ReposRedeliverWebhookDeliveryApiResponse =\n  /** status 202 Accepted */ object;\nexport type ReposRedeliverWebhookDeliveryApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  deliveryId: number;\n};\nexport type ReposPingWebhookApiResponse = /** status 204 Response */ undefined;\nexport type ReposPingWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposTestPushWebhookApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposTestPushWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposListInvitationsApiResponse =\n  /** status 200 Response */ RepositoryInvitation[];\nexport type ReposListInvitationsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposUpdateInvitationApiResponse =\n  /** status 200 Response */ RepositoryInvitation;\nexport type ReposUpdateInvitationApiArg = {\n  owner: string;\n  repo: string;\n  /** invitation_id parameter */\n  invitationId: number;\n  body: {\n    permissions?: \"read\" | \"write\" | \"maintain\" | \"triage\" | \"admin\";\n  };\n};\nexport type ReposDeleteInvitationApiResponse = unknown;\nexport type ReposDeleteInvitationApiArg = {\n  owner: string;\n  repo: string;\n  /** invitation_id parameter */\n  invitationId: number;\n};\nexport type ReposListDeployKeysApiResponse =\n  /** status 200 Response */ DeployKey[];\nexport type ReposListDeployKeysApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateDeployKeyApiResponse =\n  /** status 201 Response */ DeployKey;\nexport type ReposCreateDeployKeyApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    title?: string;\n    key: string;\n    read_only?: boolean;\n  };\n};\nexport type ReposGetDeployKeyApiResponse = /** status 200 Response */ DeployKey;\nexport type ReposGetDeployKeyApiArg = {\n  owner: string;\n  repo: string;\n  /** key_id parameter */\n  keyId: number;\n};\nexport type ReposDeleteDeployKeyApiResponse = unknown;\nexport type ReposDeleteDeployKeyApiArg = {\n  owner: string;\n  repo: string;\n  /** key_id parameter */\n  keyId: number;\n};\nexport type ReposListLanguagesApiResponse = /** status 200 Response */ Language;\nexport type ReposListLanguagesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposEnableLfsForRepoApiResponse =\n  /** status 202 Accepted */ object;\nexport type ReposEnableLfsForRepoApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDisableLfsForRepoApiResponse = unknown;\nexport type ReposDisableLfsForRepoApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposMergeUpstreamApiResponse =\n  /** status 200 The branch has been successfully synced with the upstream repository */ MergedUpstream;\nexport type ReposMergeUpstreamApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    branch: string;\n  };\n};\nexport type ReposMergeApiResponse =\n  /** status 201 Successful Response (The resulting merge commit) */\n    | Commit\n    | /** status 204 Response when already merged */ undefined;\nexport type ReposMergeApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    base: string;\n    head: string;\n    commit_message?: string;\n  };\n};\nexport type ReposGetPagesApiResponse = /** status 200 Response */ GitHubPages;\nexport type ReposGetPagesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposCreatePagesSiteApiResponse =\n  /** status 201 Response */ GitHubPages;\nexport type ReposCreatePagesSiteApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    source: {\n      branch: string;\n      path?: \"/\" | \"/docs\";\n    };\n  } | null;\n};\nexport type ReposUpdateInformationAboutPagesSiteApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposUpdateInformationAboutPagesSiteApiArg = {\n  owner: string;\n  repo: string;\n  body: any | any | any | any;\n};\nexport type ReposDeletePagesSiteApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeletePagesSiteApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposListPagesBuildsApiResponse =\n  /** status 200 Response */ PageBuild[];\nexport type ReposListPagesBuildsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposRequestPagesBuildApiResponse =\n  /** status 201 Response */ PageBuildStatus;\nexport type ReposRequestPagesBuildApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetLatestPagesBuildApiResponse =\n  /** status 200 Response */ PageBuild;\nexport type ReposGetLatestPagesBuildApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetPagesBuildApiResponse =\n  /** status 200 Response */ PageBuild;\nexport type ReposGetPagesBuildApiArg = {\n  owner: string;\n  repo: string;\n  buildId: number;\n};\nexport type ReposGetPagesHealthCheckApiResponse = /** status 200 Response */\n  | PagesHealthCheckStatus\n  | /** status 202 Empty response */ EmptyObject;\nexport type ReposGetPagesHealthCheckApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetReadmeApiResponse = /** status 200 Response */ ContentFile;\nexport type ReposGetReadmeApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n  ref?: string;\n};\nexport type ReposGetReadmeInDirectoryApiResponse =\n  /** status 200 Response */ ContentFile;\nexport type ReposGetReadmeInDirectoryApiArg = {\n  owner: string;\n  repo: string;\n  /** The alternate path to look for a README file */\n  dir: string;\n  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n  ref?: string;\n};\nexport type ReposListReleasesApiResponse = /** status 200 Response */ Release[];\nexport type ReposListReleasesApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateReleaseApiResponse = /** status 201 Response */ Release;\nexport type ReposCreateReleaseApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tag_name: string;\n    target_commitish?: string;\n    name?: string;\n    body?: string;\n    draft?: boolean;\n    prerelease?: boolean;\n    discussion_category_name?: string;\n    generate_release_notes?: boolean;\n  };\n};\nexport type ReposGetReleaseAssetApiResponse =\n  /** status 200 To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */ ReleaseAsset;\nexport type ReposGetReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** asset_id parameter */\n  assetId: number;\n};\nexport type ReposUpdateReleaseAssetApiResponse =\n  /** status 200 Response */ ReleaseAsset;\nexport type ReposUpdateReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** asset_id parameter */\n  assetId: number;\n  body: {\n    name?: string;\n    label?: string;\n    state?: string;\n  };\n};\nexport type ReposDeleteReleaseAssetApiResponse = unknown;\nexport type ReposDeleteReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** asset_id parameter */\n  assetId: number;\n};\nexport type ReposGenerateReleaseNotesApiResponse =\n  /** status 200 Name and body of generated release notes */ GeneratedReleaseNotesContent;\nexport type ReposGenerateReleaseNotesApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tag_name: string;\n    target_commitish?: string;\n    previous_tag_name?: string;\n    configuration_file_path?: string;\n  };\n};\nexport type ReposGetLatestReleaseApiResponse =\n  /** status 200 Response */ Release;\nexport type ReposGetLatestReleaseApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetReleaseByTagApiResponse =\n  /** status 200 Response */ Release;\nexport type ReposGetReleaseByTagApiArg = {\n  owner: string;\n  repo: string;\n  /** tag parameter */\n  tag: string;\n};\nexport type ReposGetReleaseApiResponse =\n  /** status 200 **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */ Release;\nexport type ReposGetReleaseApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n};\nexport type ReposUpdateReleaseApiResponse = /** status 200 Response */ Release;\nexport type ReposUpdateReleaseApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n  body: {\n    tag_name?: string;\n    target_commitish?: string;\n    name?: string;\n    body?: string;\n    draft?: boolean;\n    prerelease?: boolean;\n    discussion_category_name?: string;\n  };\n};\nexport type ReposDeleteReleaseApiResponse = unknown;\nexport type ReposDeleteReleaseApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n};\nexport type ReposListReleaseAssetsApiResponse =\n  /** status 200 Response */ ReleaseAsset[];\nexport type ReposListReleaseAssetsApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposUploadReleaseAssetApiResponse =\n  /** status 201 Response for successful upload */ ReleaseAsset;\nexport type ReposUploadReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n  name: string;\n  label?: string;\n  body: string;\n};\nexport type ReposGetCodeFrequencyStatsApiResponse =\n  /** status 200 Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */\n    | CodeFrequencyStat[]\n    | /** status 202 Accepted */ object\n    | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetCodeFrequencyStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetCommitActivityStatsApiResponse = /** status 200 Response */\n  | CommitActivity[]\n  | /** status 202 Accepted */ object\n  | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetCommitActivityStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetContributorsStatsApiResponse =\n  /** status 200 *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n   *   `a` - Number of additions\n   *   `d` - Number of deletions\n   *   `c` - Number of commits */\n    | ContributorActivity[]\n    | /** status 202 Accepted */ object\n    | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetContributorsStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetParticipationStatsApiResponse =\n  /** status 200 The array order is oldest week (index 0) to most recent week. */ ParticipationStats;\nexport type ReposGetParticipationStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetPunchCardStatsApiResponse =\n  /** status 200 For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. */\n    | CodeFrequencyStat[]\n    | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetPunchCardStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposCreateCommitStatusApiResponse =\n  /** status 201 Response */ Status;\nexport type ReposCreateCommitStatusApiArg = {\n  owner: string;\n  repo: string;\n  sha: string;\n  body: {\n    state: \"error\" | \"failure\" | \"pending\" | \"success\";\n    target_url?: string;\n    description?: string;\n    context?: string;\n  };\n};\nexport type ReposListTagsApiResponse = /** status 200 Response */ Tag[];\nexport type ReposListTagsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposDownloadTarballArchiveApiResponse = unknown;\nexport type ReposDownloadTarballArchiveApiArg = {\n  owner: string;\n  repo: string;\n  ref: string;\n};\nexport type ReposListTeamsApiResponse = /** status 200 Response */ Team[];\nexport type ReposListTeamsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetAllTopicsApiResponse = /** status 200 Response */ Topic;\nexport type ReposGetAllTopicsApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n};\nexport type ReposReplaceAllTopicsApiResponse = /** status 200 Response */ Topic;\nexport type ReposReplaceAllTopicsApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    names: string[];\n  };\n};\nexport type ReposGetClonesApiResponse = /** status 200 Response */ CloneTraffic;\nexport type ReposGetClonesApiArg = {\n  owner: string;\n  repo: string;\n  /** Must be one of: `day`, `week`. */\n  per?: \"\" | \"day\" | \"week\";\n};\nexport type ReposGetTopPathsApiResponse =\n  /** status 200 Response */ ContentTraffic[];\nexport type ReposGetTopPathsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetTopReferrersApiResponse =\n  /** status 200 Response */ ReferrerTraffic[];\nexport type ReposGetTopReferrersApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetViewsApiResponse = /** status 200 Response */ ViewTraffic;\nexport type ReposGetViewsApiArg = {\n  owner: string;\n  repo: string;\n  /** Must be one of: `day`, `week`. */\n  per?: \"\" | \"day\" | \"week\";\n};\nexport type ReposTransferApiResponse =\n  /** status 202 Response */ MinimalRepository;\nexport type ReposTransferApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    new_owner: string;\n    team_ids?: number[];\n  };\n};\nexport type ReposCheckVulnerabilityAlertsApiResponse = unknown;\nexport type ReposCheckVulnerabilityAlertsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposEnableVulnerabilityAlertsApiResponse = unknown;\nexport type ReposEnableVulnerabilityAlertsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDisableVulnerabilityAlertsApiResponse = unknown;\nexport type ReposDisableVulnerabilityAlertsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDownloadZipballArchiveApiResponse = unknown;\nexport type ReposDownloadZipballArchiveApiArg = {\n  owner: string;\n  repo: string;\n  ref: string;\n};\nexport type ReposCreateUsingTemplateApiResponse =\n  /** status 201 Response */ Repository2;\nexport type ReposCreateUsingTemplateApiArg = {\n  templateOwner: string;\n  templateRepo: string;\n  body: {\n    owner?: string;\n    name: string;\n    description?: string;\n    include_all_branches?: boolean;\n    private?: boolean;\n  };\n};\nexport type ReposListPublicApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListPublicApiArg = {\n  /** A repository ID. Only return repositories with an ID greater than this ID. */\n  since?: number;\n};\nexport type ReposListForAuthenticatedUserApiResponse =\n  /** status 200 Response */ Repository2[];\nexport type ReposListForAuthenticatedUserApiArg = {\n  /** Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`. */\n  visibility?: \"all\" | \"public\" | \"private\";\n  /** Comma-separated list of values. Can include:\n    \\* `owner`: Repositories that are owned by the authenticated user.\n    \\* `collaborator`: Repositories that the user has been added to as a collaborator.\n    \\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n  affiliation?: string;\n  /** Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`\n      \n    Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */\n  type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\";\n  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n  sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n  /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  before?: string;\n};\nexport type ReposCreateForAuthenticatedUserApiResponse =\n  /** status 201 Response */ Repository2;\nexport type ReposCreateForAuthenticatedUserApiArg = {\n  body: {\n    name: string;\n    description?: string;\n    homepage?: string;\n    private?: boolean;\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    team_id?: number;\n    auto_init?: boolean;\n    gitignore_template?: string;\n    license_template?: string;\n    allow_squash_merge?: boolean;\n    allow_merge_commit?: boolean;\n    allow_rebase_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    has_downloads?: boolean;\n    is_template?: boolean;\n  };\n};\nexport type ReposListInvitationsForAuthenticatedUserApiResponse =\n  /** status 200 Response */ RepositoryInvitation[];\nexport type ReposListInvitationsForAuthenticatedUserApiArg = {\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposAcceptInvitationForAuthenticatedUserApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposAcceptInvitationForAuthenticatedUserApiArg = {\n  /** invitation_id parameter */\n  invitationId: number;\n};\nexport type ReposDeclineInvitationForAuthenticatedUserApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeclineInvitationForAuthenticatedUserApiArg = {\n  /** invitation_id parameter */\n  invitationId: number;\n};\nexport type ReposListForUserApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListForUserApiArg = {\n  username: string;\n  /** Can be one of `all`, `owner`, `member`. */\n  type?: \"all\" | \"owner\" | \"member\";\n  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n  sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n  /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type SimpleUser = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n};\nexport type LicenseSimple = {\n  key: string;\n  name: string;\n  url: string | null;\n  spdx_id: string | null;\n  node_id: string;\n  html_url?: string;\n} | null;\nexport type SimpleUser2 = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n} | null;\nexport type Repository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: LicenseSimple;\n  organization?: SimpleUser2;\n  forks: number;\n  permissions?: {\n    admin: boolean;\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n  };\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  allow_rebase_merge?: boolean;\n  template_repository?: {\n    id?: number;\n    node_id?: string;\n    name?: string;\n    full_name?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      avatar_url?: string;\n      gravatar_id?: string;\n      url?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      repos_url?: string;\n      events_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    private?: boolean;\n    html_url?: string;\n    description?: string;\n    fork?: boolean;\n    url?: string;\n    archive_url?: string;\n    assignees_url?: string;\n    blobs_url?: string;\n    branches_url?: string;\n    collaborators_url?: string;\n    comments_url?: string;\n    commits_url?: string;\n    compare_url?: string;\n    contents_url?: string;\n    contributors_url?: string;\n    deployments_url?: string;\n    downloads_url?: string;\n    events_url?: string;\n    forks_url?: string;\n    git_commits_url?: string;\n    git_refs_url?: string;\n    git_tags_url?: string;\n    git_url?: string;\n    issue_comment_url?: string;\n    issue_events_url?: string;\n    issues_url?: string;\n    keys_url?: string;\n    labels_url?: string;\n    languages_url?: string;\n    merges_url?: string;\n    milestones_url?: string;\n    notifications_url?: string;\n    pulls_url?: string;\n    releases_url?: string;\n    ssh_url?: string;\n    stargazers_url?: string;\n    statuses_url?: string;\n    subscribers_url?: string;\n    subscription_url?: string;\n    tags_url?: string;\n    teams_url?: string;\n    trees_url?: string;\n    clone_url?: string;\n    mirror_url?: string;\n    hooks_url?: string;\n    svn_url?: string;\n    homepage?: string;\n    language?: string;\n    forks_count?: number;\n    stargazers_count?: number;\n    watchers_count?: number;\n    size?: number;\n    default_branch?: string;\n    open_issues_count?: number;\n    is_template?: boolean;\n    topics?: string[];\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    has_pages?: boolean;\n    has_downloads?: boolean;\n    archived?: boolean;\n    disabled?: boolean;\n    visibility?: string;\n    pushed_at?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      admin?: boolean;\n      maintain?: boolean;\n      push?: boolean;\n      triage?: boolean;\n      pull?: boolean;\n    };\n    allow_rebase_merge?: boolean;\n    temp_clone_token?: string;\n    allow_squash_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    allow_update_branch?: boolean;\n    allow_merge_commit?: boolean;\n    subscribers_count?: number;\n    network_count?: number;\n  } | null;\n  temp_clone_token?: string;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  open_issues: number;\n  watchers: number;\n  master_branch?: string;\n  starred_at?: string;\n} | null;\nexport type CodeOfConduct = {\n  key: string;\n  name: string;\n  url: string;\n  body?: string;\n  html_url: string | null;\n};\nexport type MinimalRepository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url?: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url?: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url?: string;\n  mirror_url?: string | null;\n  hooks_url: string;\n  svn_url?: string;\n  homepage?: string | null;\n  language?: string | null;\n  forks_count?: number;\n  stargazers_count?: number;\n  watchers_count?: number;\n  size?: number;\n  default_branch?: string;\n  open_issues_count?: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues?: boolean;\n  has_projects?: boolean;\n  has_wiki?: boolean;\n  has_pages?: boolean;\n  has_downloads?: boolean;\n  archived?: boolean;\n  disabled?: boolean;\n  visibility?: string;\n  pushed_at?: string | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  permissions?: {\n    admin?: boolean;\n    maintain?: boolean;\n    push?: boolean;\n    triage?: boolean;\n    pull?: boolean;\n  };\n  role_name?: string;\n  template_repository?: Repository;\n  temp_clone_token?: string;\n  delete_branch_on_merge?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  code_of_conduct?: CodeOfConduct;\n  license?: {\n    key?: string;\n    name?: string;\n    spdx_id?: string;\n    url?: string;\n    node_id?: string;\n  } | null;\n  forks?: number;\n  open_issues?: number;\n  watchers?: number;\n  allow_forking?: boolean;\n};\nexport type Repository2 = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: LicenseSimple;\n  organization?: SimpleUser2;\n  forks: number;\n  permissions?: {\n    admin: boolean;\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n  };\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  allow_rebase_merge?: boolean;\n  template_repository?: {\n    id?: number;\n    node_id?: string;\n    name?: string;\n    full_name?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      avatar_url?: string;\n      gravatar_id?: string;\n      url?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      repos_url?: string;\n      events_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    private?: boolean;\n    html_url?: string;\n    description?: string;\n    fork?: boolean;\n    url?: string;\n    archive_url?: string;\n    assignees_url?: string;\n    blobs_url?: string;\n    branches_url?: string;\n    collaborators_url?: string;\n    comments_url?: string;\n    commits_url?: string;\n    compare_url?: string;\n    contents_url?: string;\n    contributors_url?: string;\n    deployments_url?: string;\n    downloads_url?: string;\n    events_url?: string;\n    forks_url?: string;\n    git_commits_url?: string;\n    git_refs_url?: string;\n    git_tags_url?: string;\n    git_url?: string;\n    issue_comment_url?: string;\n    issue_events_url?: string;\n    issues_url?: string;\n    keys_url?: string;\n    labels_url?: string;\n    languages_url?: string;\n    merges_url?: string;\n    milestones_url?: string;\n    notifications_url?: string;\n    pulls_url?: string;\n    releases_url?: string;\n    ssh_url?: string;\n    stargazers_url?: string;\n    statuses_url?: string;\n    subscribers_url?: string;\n    subscription_url?: string;\n    tags_url?: string;\n    teams_url?: string;\n    trees_url?: string;\n    clone_url?: string;\n    mirror_url?: string;\n    hooks_url?: string;\n    svn_url?: string;\n    homepage?: string;\n    language?: string;\n    forks_count?: number;\n    stargazers_count?: number;\n    watchers_count?: number;\n    size?: number;\n    default_branch?: string;\n    open_issues_count?: number;\n    is_template?: boolean;\n    topics?: string[];\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    has_pages?: boolean;\n    has_downloads?: boolean;\n    archived?: boolean;\n    disabled?: boolean;\n    visibility?: string;\n    pushed_at?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      admin?: boolean;\n      maintain?: boolean;\n      push?: boolean;\n      triage?: boolean;\n      pull?: boolean;\n    };\n    allow_rebase_merge?: boolean;\n    temp_clone_token?: string;\n    allow_squash_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    allow_update_branch?: boolean;\n    allow_merge_commit?: boolean;\n    subscribers_count?: number;\n    network_count?: number;\n  } | null;\n  temp_clone_token?: string;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  open_issues: number;\n  watchers: number;\n  master_branch?: string;\n  starred_at?: string;\n};\nexport type BasicError = {\n  message?: string;\n  documentation_url?: string;\n  url?: string;\n  status?: string;\n};\nexport type ValidationError = {\n  message: string;\n  documentation_url: string;\n  errors?: {\n    resource?: string;\n    field?: string;\n    message?: string;\n    code: string;\n    index?: number;\n    value?: (string | null) | (number | null) | (string[] | null);\n  }[];\n};\nexport type CodeOfConductSimple = {\n  url: string;\n  key: string;\n  name: string;\n  html_url: string | null;\n};\nexport type FullRepository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string;\n  created_at: string;\n  updated_at: string;\n  permissions?: {\n    admin: boolean;\n    maintain?: boolean;\n    push: boolean;\n    triage?: boolean;\n    pull: boolean;\n  };\n  allow_rebase_merge?: boolean;\n  template_repository?: Repository;\n  temp_clone_token?: string | null;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count: number;\n  network_count: number;\n  license: LicenseSimple;\n  organization?: SimpleUser2;\n  parent?: Repository2;\n  source?: Repository2;\n  forks: number;\n  master_branch?: string;\n  open_issues: number;\n  watchers: number;\n  anonymous_access_enabled?: boolean;\n  code_of_conduct?: CodeOfConductSimple;\n  security_and_analysis?: {\n    advanced_security?: {\n      status?: \"enabled\" | \"disabled\";\n    };\n    secret_scanning?: {\n      status?: \"enabled\" | \"disabled\";\n    };\n  } | null;\n};\nexport type AutolinkReference = {\n  id: number;\n  key_prefix: string;\n  url_template: string;\n};\nexport type ProtectedBranchRequiredStatusCheck = {\n  url?: string;\n  enforcement_level?: string;\n  contexts: string[];\n  checks: {\n    context: string;\n    app_id: number | null;\n  }[];\n  contexts_url?: string;\n  strict?: boolean;\n};\nexport type ProtectedBranchAdminEnforced = {\n  url: string;\n  enabled: boolean;\n};\nexport type TeamSimple = {\n  id: number;\n  node_id: string;\n  url: string;\n  members_url: string;\n  name: string;\n  description: string | null;\n  permission: string;\n  privacy?: string;\n  html_url: string;\n  repositories_url: string;\n  slug: string;\n  ldap_dn?: string;\n} | null;\nexport type Team = {\n  id: number;\n  node_id: string;\n  name: string;\n  slug: string;\n  description: string | null;\n  privacy?: string;\n  permission: string;\n  permissions?: {\n    pull: boolean;\n    triage: boolean;\n    push: boolean;\n    maintain: boolean;\n    admin: boolean;\n  };\n  url: string;\n  html_url: string;\n  members_url: string;\n  repositories_url: string;\n  parent: TeamSimple;\n};\nexport type ProtectedBranchPullRequestReview = {\n  url?: string;\n  dismissal_restrictions?: {\n    users?: SimpleUser[];\n    teams?: Team[];\n    url?: string;\n    users_url?: string;\n    teams_url?: string;\n  };\n  bypass_pull_request_allowances?: {\n    users?: SimpleUser[];\n    teams?: Team[];\n  } | null;\n  dismiss_stale_reviews: boolean;\n  require_code_owner_reviews: boolean;\n  required_approving_review_count?: number;\n};\nexport type BranchRestrictionPolicy = {\n  url: string;\n  users_url: string;\n  teams_url: string;\n  apps_url: string;\n  users: {\n    login?: string;\n    id?: number;\n    node_id?: string;\n    avatar_url?: string;\n    gravatar_id?: string;\n    url?: string;\n    html_url?: string;\n    followers_url?: string;\n    following_url?: string;\n    gists_url?: string;\n    starred_url?: string;\n    subscriptions_url?: string;\n    organizations_url?: string;\n    repos_url?: string;\n    events_url?: string;\n    received_events_url?: string;\n    type?: string;\n    site_admin?: boolean;\n  }[];\n  teams: {\n    id?: number;\n    node_id?: string;\n    url?: string;\n    html_url?: string;\n    name?: string;\n    slug?: string;\n    description?: string | null;\n    privacy?: string;\n    permission?: string;\n    members_url?: string;\n    repositories_url?: string;\n    parent?: string | null;\n  }[];\n  apps: {\n    id?: number;\n    slug?: string;\n    node_id?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      url?: string;\n      repos_url?: string;\n      events_url?: string;\n      hooks_url?: string;\n      issues_url?: string;\n      members_url?: string;\n      public_members_url?: string;\n      avatar_url?: string;\n      description?: string;\n      gravatar_id?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    name?: string;\n    description?: string;\n    external_url?: string;\n    html_url?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      metadata?: string;\n      contents?: string;\n      issues?: string;\n      single_file?: string;\n    };\n    events?: string[];\n  }[];\n};\nexport type BranchProtection = {\n  url?: string;\n  enabled?: boolean;\n  required_status_checks?: ProtectedBranchRequiredStatusCheck;\n  enforce_admins?: ProtectedBranchAdminEnforced;\n  required_pull_request_reviews?: ProtectedBranchPullRequestReview;\n  restrictions?: BranchRestrictionPolicy;\n  required_linear_history?: {\n    enabled?: boolean;\n  };\n  allow_force_pushes?: {\n    enabled?: boolean;\n  };\n  allow_deletions?: {\n    enabled?: boolean;\n  };\n  required_conversation_resolution?: {\n    enabled?: boolean;\n  };\n  name?: string;\n  protection_url?: string;\n  required_signatures?: {\n    url: string;\n    enabled: boolean;\n  };\n};\nexport type ShortBranch = {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  protected: boolean;\n  protection?: BranchProtection;\n  protection_url?: string;\n};\nexport type GitUser = {\n  name?: string;\n  email?: string;\n  date?: string;\n} | null;\nexport type Verification = {\n  verified: boolean;\n  reason: string;\n  payload: string | null;\n  signature: string | null;\n};\nexport type DiffEntry = {\n  sha: string;\n  filename: string;\n  status:\n    | \"added\"\n    | \"removed\"\n    | \"modified\"\n    | \"renamed\"\n    | \"copied\"\n    | \"changed\"\n    | \"unchanged\";\n  additions: number;\n  deletions: number;\n  changes: number;\n  blob_url: string;\n  raw_url: string;\n  contents_url: string;\n  patch?: string;\n  previous_filename?: string;\n};\nexport type Commit = {\n  url: string;\n  sha: string;\n  node_id: string;\n  html_url: string;\n  comments_url: string;\n  commit: {\n    url: string;\n    author: GitUser;\n    committer: GitUser;\n    message: string;\n    comment_count: number;\n    tree: {\n      sha: string;\n      url: string;\n    };\n    verification?: Verification;\n  };\n  author: SimpleUser2;\n  committer: SimpleUser2;\n  parents: {\n    sha: string;\n    url: string;\n    html_url?: string;\n  }[];\n  stats?: {\n    additions?: number;\n    deletions?: number;\n    total?: number;\n  };\n  files?: DiffEntry[];\n};\nexport type BranchWithProtection = {\n  name: string;\n  commit: Commit;\n  _links: {\n    html: string;\n    self: string;\n  };\n  protected: boolean;\n  protection: BranchProtection;\n  protection_url: string;\n  pattern?: string;\n  required_approving_review_count?: number;\n};\nexport type StatusCheckPolicy = {\n  url: string;\n  strict: boolean;\n  contexts: string[];\n  checks: {\n    context: string;\n    app_id: number | null;\n  }[];\n  contexts_url: string;\n};\nexport type ProtectedBranch = {\n  url: string;\n  required_status_checks?: StatusCheckPolicy;\n  required_pull_request_reviews?: {\n    url: string;\n    dismiss_stale_reviews?: boolean;\n    require_code_owner_reviews?: boolean;\n    required_approving_review_count?: number;\n    dismissal_restrictions?: {\n      url: string;\n      users_url: string;\n      teams_url: string;\n      users: SimpleUser[];\n      teams: Team[];\n    };\n    bypass_pull_request_allowances?: {\n      users: SimpleUser[];\n      teams: Team[];\n    };\n  };\n  required_signatures?: {\n    url: string;\n    enabled: boolean;\n  };\n  enforce_admins?: {\n    url: string;\n    enabled: boolean;\n  };\n  required_linear_history?: {\n    enabled: boolean;\n  };\n  allow_force_pushes?: {\n    enabled: boolean;\n  };\n  allow_deletions?: {\n    enabled: boolean;\n  };\n  restrictions?: BranchRestrictionPolicy;\n  required_conversation_resolution?: {\n    enabled?: boolean;\n  };\n};\nexport type ValidationErrorSimple = {\n  message: string;\n  documentation_url: string;\n  errors?: string[];\n};\nexport type GitHubApp = {\n  id: number;\n  slug?: string;\n  node_id: string;\n  owner: SimpleUser2;\n  name: string;\n  description: string | null;\n  external_url: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  permissions: {\n    issues?: string;\n    checks?: string;\n    metadata?: string;\n    contents?: string;\n    deployments?: string;\n  } & {\n    [key: string]: string;\n  };\n  events: string[];\n  installations_count?: number;\n  client_id?: string;\n  client_secret?: string;\n  webhook_secret?: string | null;\n  pem?: string;\n};\nexport type CodeownersErrors = {\n  errors: {\n    line: number;\n    column: number;\n    source?: string;\n    kind: string;\n    suggestion?: string | null;\n    message: string;\n    path: string;\n  }[];\n};\nexport type Collaborator = {\n  login: string;\n  id: number;\n  email?: string | null;\n  name?: string | null;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  permissions?: {\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n    admin: boolean;\n  };\n  role_name: string;\n};\nexport type RepositoryInvitation = {\n  id: number;\n  repository: MinimalRepository;\n  invitee: SimpleUser2;\n  inviter: SimpleUser2;\n  permissions: \"read\" | \"write\" | \"admin\" | \"triage\" | \"maintain\";\n  created_at: string;\n  expired?: boolean;\n  url: string;\n  html_url: string;\n  node_id: string;\n};\nexport type Collaborator2 = {\n  login: string;\n  id: number;\n  email?: string | null;\n  name?: string | null;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  permissions?: {\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n    admin: boolean;\n  };\n  role_name: string;\n} | null;\nexport type RepositoryCollaboratorPermission = {\n  permission: string;\n  role_name: string;\n  user: Collaborator2;\n};\nexport type AuthorAssociation =\n  | \"COLLABORATOR\"\n  | \"CONTRIBUTOR\"\n  | \"FIRST_TIMER\"\n  | \"FIRST_TIME_CONTRIBUTOR\"\n  | \"MANNEQUIN\"\n  | \"MEMBER\"\n  | \"NONE\"\n  | \"OWNER\";\nexport type ReactionRollup = {\n  url: string;\n  total_count: number;\n  \"+1\": number;\n  \"-1\": number;\n  laugh: number;\n  confused: number;\n  heart: number;\n  hooray: number;\n  eyes: number;\n  rocket: number;\n};\nexport type CommitComment = {\n  html_url: string;\n  url: string;\n  id: number;\n  node_id: string;\n  body: string;\n  path: string | null;\n  position: number | null;\n  line: number | null;\n  commit_id: string;\n  user: SimpleUser2;\n  created_at: string;\n  updated_at: string;\n  author_association: AuthorAssociation;\n  reactions?: ReactionRollup;\n};\nexport type BranchShort = {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  protected: boolean;\n};\nexport type Milestone = {\n  url: string;\n  html_url: string;\n  labels_url: string;\n  id: number;\n  node_id: string;\n  number: number;\n  state: \"open\" | \"closed\";\n  title: string;\n  description: string | null;\n  creator: SimpleUser2;\n  open_issues: number;\n  closed_issues: number;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  due_on: string | null;\n} | null;\nexport type Link = {\n  href: string;\n};\nexport type AutoMerge = {\n  enabled_by: SimpleUser;\n  merge_method: \"merge\" | \"squash\" | \"rebase\";\n  commit_title: string;\n  commit_message: string;\n} | null;\nexport type PullRequestSimple = {\n  url: string;\n  id: number;\n  node_id: string;\n  html_url: string;\n  diff_url: string;\n  patch_url: string;\n  issue_url: string;\n  commits_url: string;\n  review_comments_url: string;\n  review_comment_url: string;\n  comments_url: string;\n  statuses_url: string;\n  number: number;\n  state: string;\n  locked: boolean;\n  title: string;\n  user: SimpleUser2;\n  body: string | null;\n  labels: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string;\n    color: string;\n    default: boolean;\n  }[];\n  milestone: Milestone;\n  active_lock_reason?: string | null;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  merged_at: string | null;\n  merge_commit_sha: string | null;\n  assignee: SimpleUser2;\n  assignees?: SimpleUser[] | null;\n  requested_reviewers?: SimpleUser[] | null;\n  requested_teams?: Team[] | null;\n  head: {\n    label: string;\n    ref: string;\n    repo: Repository2;\n    sha: string;\n    user: SimpleUser2;\n  };\n  base: {\n    label: string;\n    ref: string;\n    repo: Repository2;\n    sha: string;\n    user: SimpleUser2;\n  };\n  _links: {\n    comments: Link;\n    commits: Link;\n    statuses: Link;\n    html: Link;\n    issue: Link;\n    review_comments: Link;\n    review_comment: Link;\n    self: Link;\n  };\n  author_association: AuthorAssociation;\n  auto_merge: AutoMerge;\n  draft?: boolean;\n};\nexport type SimpleCommitStatus = {\n  description: string | null;\n  id: number;\n  node_id: string;\n  state: string;\n  context: string;\n  target_url: string;\n  required?: boolean | null;\n  avatar_url: string | null;\n  url: string;\n  created_at: string;\n  updated_at: string;\n};\nexport type CombinedCommitStatus = {\n  state: string;\n  statuses: SimpleCommitStatus[];\n  sha: string;\n  total_count: number;\n  repository: MinimalRepository;\n  commit_url: string;\n  url: string;\n};\nexport type Status = {\n  url: string;\n  avatar_url: string | null;\n  id: number;\n  node_id: string;\n  state: string;\n  description: string;\n  target_url: string;\n  context: string;\n  created_at: string;\n  updated_at: string;\n  creator: SimpleUser2;\n};\nexport type CodeOfConductSimple2 = {\n  url: string;\n  key: string;\n  name: string;\n  html_url: string | null;\n} | null;\nexport type CommunityHealthFile = {\n  url: string;\n  html_url: string;\n} | null;\nexport type CommunityProfile = {\n  health_percentage: number;\n  description: string | null;\n  documentation: string | null;\n  files: {\n    code_of_conduct: CodeOfConductSimple2;\n    code_of_conduct_file: CommunityHealthFile;\n    license: LicenseSimple;\n    contributing: CommunityHealthFile;\n    readme: CommunityHealthFile;\n    issue_template: CommunityHealthFile;\n    pull_request_template: CommunityHealthFile;\n  };\n  updated_at: string | null;\n  content_reports_enabled?: boolean;\n};\nexport type CommitComparison = {\n  url: string;\n  html_url: string;\n  permalink_url: string;\n  diff_url: string;\n  patch_url: string;\n  base_commit: Commit;\n  merge_base_commit: Commit;\n  status: \"diverged\" | \"ahead\" | \"behind\" | \"identical\";\n  ahead_by: number;\n  behind_by: number;\n  total_commits: number;\n  commits: Commit[];\n  files?: DiffEntry[];\n};\nexport type ContentDirectory = {\n  type: string;\n  size: number;\n  name: string;\n  path: string;\n  content?: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n}[];\nexport type ContentFile = {\n  type: string;\n  encoding: string;\n  size: number;\n  name: string;\n  path: string;\n  content: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n  target?: string;\n  submodule_git_url?: string;\n};\nexport type SymlinkContent = {\n  type: string;\n  target: string;\n  size: number;\n  name: string;\n  path: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n};\nexport type SymlinkContent2 = {\n  type: string;\n  submodule_git_url: string;\n  size: number;\n  name: string;\n  path: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n};\nexport type FileCommit = {\n  content: {\n    name?: string;\n    path?: string;\n    sha?: string;\n    size?: number;\n    url?: string;\n    html_url?: string;\n    git_url?: string;\n    download_url?: string;\n    type?: string;\n    _links?: {\n      self?: string;\n      git?: string;\n      html?: string;\n    };\n  } | null;\n  commit: {\n    sha?: string;\n    node_id?: string;\n    url?: string;\n    html_url?: string;\n    author?: {\n      date?: string;\n      name?: string;\n      email?: string;\n    };\n    committer?: {\n      date?: string;\n      name?: string;\n      email?: string;\n    };\n    message?: string;\n    tree?: {\n      url?: string;\n      sha?: string;\n    };\n    parents?: {\n      url?: string;\n      html_url?: string;\n      sha?: string;\n    }[];\n    verification?: {\n      verified?: boolean;\n      reason?: string;\n      signature?: string | null;\n      payload?: string | null;\n    };\n  };\n};\nexport type Contributor = {\n  login?: string;\n  id?: number;\n  node_id?: string;\n  avatar_url?: string;\n  gravatar_id?: string | null;\n  url?: string;\n  html_url?: string;\n  followers_url?: string;\n  following_url?: string;\n  gists_url?: string;\n  starred_url?: string;\n  subscriptions_url?: string;\n  organizations_url?: string;\n  repos_url?: string;\n  events_url?: string;\n  received_events_url?: string;\n  type: string;\n  site_admin?: boolean;\n  contributions: number;\n  email?: string;\n  name?: string;\n};\nexport type GitHubApp2 = {\n  id: number;\n  slug?: string;\n  node_id: string;\n  owner: SimpleUser2;\n  name: string;\n  description: string | null;\n  external_url: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  permissions: {\n    issues?: string;\n    checks?: string;\n    metadata?: string;\n    contents?: string;\n    deployments?: string;\n  } & {\n    [key: string]: string;\n  };\n  events: string[];\n  installations_count?: number;\n  client_id?: string;\n  client_secret?: string;\n  webhook_secret?: string | null;\n  pem?: string;\n} | null;\nexport type Deployment = {\n  url: string;\n  id: number;\n  node_id: string;\n  sha: string;\n  ref: string;\n  task: string;\n  payload:\n    | {\n        [key: string]: any;\n      }\n    | string;\n  original_environment?: string;\n  environment: string;\n  description: string | null;\n  creator: SimpleUser2;\n  created_at: string;\n  updated_at: string;\n  statuses_url: string;\n  repository_url: string;\n  transient_environment?: boolean;\n  production_environment?: boolean;\n  performed_via_github_app?: GitHubApp2;\n};\nexport type DeploymentStatus = {\n  url: string;\n  id: number;\n  node_id: string;\n  state:\n    | \"error\"\n    | \"failure\"\n    | \"inactive\"\n    | \"pending\"\n    | \"success\"\n    | \"queued\"\n    | \"in_progress\";\n  creator: SimpleUser2;\n  description: string;\n  environment?: string;\n  target_url: string;\n  created_at: string;\n  updated_at: string;\n  deployment_url: string;\n  repository_url: string;\n  environment_url?: string;\n  log_url?: string;\n  performed_via_github_app?: GitHubApp2;\n};\nexport type WaitTimer = number;\nexport type DeploymentReviewerType = \"User\" | \"Team\";\nexport type DeploymentBranchPolicy = {\n  protected_branches: boolean;\n  custom_branch_policies: boolean;\n} | null;\nexport type Environment = {\n  id: number;\n  node_id: string;\n  name: string;\n  url: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  protection_rules?: (\n    | {\n        id: number;\n        node_id: string;\n        type: string;\n        wait_timer?: WaitTimer;\n      }\n    | {\n        id: number;\n        node_id: string;\n        type: string;\n        reviewers?: {\n          type?: DeploymentReviewerType;\n          reviewer?: SimpleUser | Team;\n        }[];\n      }\n    | {\n        id: number;\n        node_id: string;\n        type: string;\n      }\n  )[];\n  deployment_branch_policy?: DeploymentBranchPolicy;\n};\nexport type WebhookConfigUrl = string;\nexport type WebhookConfigInsecureSsl = string | number;\nexport type WebhookConfigContentType = string;\nexport type WebhookConfigSecret = string;\nexport type HookResponse = {\n  code: number | null;\n  status: string | null;\n  message: string | null;\n};\nexport type Webhook = {\n  type: string;\n  id: number;\n  name: string;\n  active: boolean;\n  events: string[];\n  config: {\n    email?: string;\n    password?: string;\n    room?: string;\n    subdomain?: string;\n    url?: WebhookConfigUrl;\n    insecure_ssl?: WebhookConfigInsecureSsl;\n    content_type?: WebhookConfigContentType;\n    digest?: string;\n    secret?: WebhookConfigSecret;\n    token?: string;\n  };\n  updated_at: string;\n  created_at: string;\n  url: string;\n  test_url: string;\n  ping_url: string;\n  deliveries_url?: string;\n  last_response: HookResponse;\n};\nexport type WebhookConfiguration = {\n  url?: WebhookConfigUrl;\n  content_type?: WebhookConfigContentType;\n  secret?: WebhookConfigSecret;\n  insecure_ssl?: WebhookConfigInsecureSsl;\n};\nexport type SimpleWebhookDelivery = {\n  id: number;\n  guid: string;\n  delivered_at: string;\n  redelivery: boolean;\n  duration: number;\n  status: string;\n  status_code: number;\n  event: string;\n  action: string | null;\n  installation_id: number | null;\n  repository_id: number | null;\n};\nexport type WebhookDelivery = {\n  id: number;\n  guid: string;\n  delivered_at: string;\n  redelivery: boolean;\n  duration: number;\n  status: string;\n  status_code: number;\n  event: string;\n  action: string | null;\n  installation_id: number | null;\n  repository_id: number | null;\n  url?: string;\n  request: {\n    headers: {\n      [key: string]: any;\n    } | null;\n    payload: {\n      [key: string]: any;\n    } | null;\n  };\n  response: {\n    headers: {\n      [key: string]: any;\n    } | null;\n    payload: {\n      [key: string]: any;\n    } | null;\n  };\n};\nexport type DeployKey = {\n  id: number;\n  key: string;\n  url: string;\n  title: string;\n  verified: boolean;\n  created_at: string;\n  read_only: boolean;\n};\nexport type Language = {\n  [key: string]: number;\n};\nexport type MergedUpstream = {\n  message?: string;\n  merge_type?: \"merge\" | \"fast-forward\" | \"none\";\n  base_branch?: string;\n};\nexport type PagesSourceHash = {\n  branch: string;\n  path: string;\n};\nexport type PagesHttpsCertificate = {\n  state:\n    | \"new\"\n    | \"authorization_created\"\n    | \"authorization_pending\"\n    | \"authorized\"\n    | \"authorization_revoked\"\n    | \"issued\"\n    | \"uploaded\"\n    | \"approved\"\n    | \"errored\"\n    | \"bad_authz\"\n    | \"destroy_pending\"\n    | \"dns_changed\";\n  description: string;\n  domains: string[];\n  expires_at?: string;\n};\nexport type GitHubPages = {\n  url: string;\n  status: (\"built\" | \"building\" | \"errored\") | null;\n  cname: string | null;\n  protected_domain_state?: (\"pending\" | \"verified\" | \"unverified\") | null;\n  pending_domain_unverified_at?: string | null;\n  custom_404: boolean;\n  html_url?: string;\n  source?: PagesSourceHash;\n  public: boolean;\n  https_certificate?: PagesHttpsCertificate;\n  https_enforced?: boolean;\n};\nexport type PageBuild = {\n  url: string;\n  status: string;\n  error: {\n    message: string | null;\n  };\n  pusher: SimpleUser2;\n  commit: string;\n  duration: number;\n  created_at: string;\n  updated_at: string;\n};\nexport type PageBuildStatus = {\n  url: string;\n  status: string;\n};\nexport type PagesHealthCheckStatus = {\n  domain?: {\n    host?: string;\n    uri?: string;\n    nameservers?: string;\n    dns_resolves?: boolean;\n    is_proxied?: boolean | null;\n    is_cloudflare_ip?: boolean | null;\n    is_fastly_ip?: boolean | null;\n    is_old_ip_address?: boolean | null;\n    is_a_record?: boolean | null;\n    has_cname_record?: boolean | null;\n    has_mx_records_present?: boolean | null;\n    is_valid_domain?: boolean;\n    is_apex_domain?: boolean;\n    should_be_a_record?: boolean | null;\n    is_cname_to_github_user_domain?: boolean | null;\n    is_cname_to_pages_dot_github_dot_com?: boolean | null;\n    is_cname_to_fastly?: boolean | null;\n    is_pointed_to_github_pages_ip?: boolean | null;\n    is_non_github_pages_ip_present?: boolean | null;\n    is_pages_domain?: boolean;\n    is_served_by_pages?: boolean | null;\n    is_valid?: boolean;\n    reason?: string | null;\n    responds_to_https?: boolean;\n    enforces_https?: boolean;\n    https_error?: string | null;\n    is_https_eligible?: boolean | null;\n    caa_error?: string | null;\n  };\n  alt_domain?: {\n    host?: string;\n    uri?: string;\n    nameservers?: string;\n    dns_resolves?: boolean;\n    is_proxied?: boolean | null;\n    is_cloudflare_ip?: boolean | null;\n    is_fastly_ip?: boolean | null;\n    is_old_ip_address?: boolean | null;\n    is_a_record?: boolean | null;\n    has_cname_record?: boolean | null;\n    has_mx_records_present?: boolean | null;\n    is_valid_domain?: boolean;\n    is_apex_domain?: boolean;\n    should_be_a_record?: boolean | null;\n    is_cname_to_github_user_domain?: boolean | null;\n    is_cname_to_pages_dot_github_dot_com?: boolean | null;\n    is_cname_to_fastly?: boolean | null;\n    is_pointed_to_github_pages_ip?: boolean | null;\n    is_non_github_pages_ip_present?: boolean | null;\n    is_pages_domain?: boolean;\n    is_served_by_pages?: boolean | null;\n    is_valid?: boolean;\n    reason?: string | null;\n    responds_to_https?: boolean;\n    enforces_https?: boolean;\n    https_error?: string | null;\n    is_https_eligible?: boolean | null;\n    caa_error?: string | null;\n  } | null;\n};\nexport type EmptyObject = {};\nexport type ReleaseAsset = {\n  url: string;\n  browser_download_url: string;\n  id: number;\n  node_id: string;\n  name: string;\n  label: string | null;\n  state: \"uploaded\" | \"open\";\n  content_type: string;\n  size: number;\n  download_count: number;\n  created_at: string;\n  updated_at: string;\n  uploader: SimpleUser2;\n};\nexport type Release = {\n  url: string;\n  html_url: string;\n  assets_url: string;\n  upload_url: string;\n  tarball_url: string | null;\n  zipball_url: string | null;\n  id: number;\n  node_id: string;\n  tag_name: string;\n  target_commitish: string;\n  name: string | null;\n  body?: string | null;\n  draft: boolean;\n  prerelease: boolean;\n  created_at: string;\n  published_at: string | null;\n  author: SimpleUser;\n  assets: ReleaseAsset[];\n  body_html?: string;\n  body_text?: string;\n  mentions_count?: number;\n  discussion_url?: string;\n  reactions?: ReactionRollup;\n};\nexport type GeneratedReleaseNotesContent = {\n  name: string;\n  body: string;\n};\nexport type CodeFrequencyStat = number[];\nexport type CommitActivity = {\n  days: number[];\n  total: number;\n  week: number;\n};\nexport type ContributorActivity = {\n  author: SimpleUser2;\n  total: number;\n  weeks: {\n    w?: number;\n    a?: number;\n    d?: number;\n    c?: number;\n  }[];\n};\nexport type ParticipationStats = {\n  all: number[];\n  owner: number[];\n};\nexport type Tag = {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  zipball_url: string;\n  tarball_url: string;\n  node_id: string;\n};\nexport type Topic = {\n  names: string[];\n};\nexport type Traffic = {\n  timestamp: string;\n  uniques: number;\n  count: number;\n};\nexport type CloneTraffic = {\n  count: number;\n  uniques: number;\n  clones: Traffic[];\n};\nexport type ContentTraffic = {\n  path: string;\n  title: string;\n  count: number;\n  uniques: number;\n};\nexport type ReferrerTraffic = {\n  referrer: string;\n  count: number;\n  uniques: number;\n};\nexport type ViewTraffic = {\n  count: number;\n  uniques: number;\n  views: Traffic[];\n};\nexport const {\n  useReposListForOrgQuery,\n  useReposCreateInOrgMutation,\n  useReposGetQuery,\n  useReposUpdateMutation,\n  useReposDeleteMutation,\n  useReposListAutolinksQuery,\n  useReposCreateAutolinkMutation,\n  useReposGetAutolinkQuery,\n  useReposDeleteAutolinkMutation,\n  useReposEnableAutomatedSecurityFixesMutation,\n  useReposDisableAutomatedSecurityFixesMutation,\n  useReposListBranchesQuery,\n  useReposGetBranchQuery,\n  useReposGetBranchProtectionQuery,\n  useReposUpdateBranchProtectionMutation,\n  useReposDeleteBranchProtectionMutation,\n  useReposGetAdminBranchProtectionQuery,\n  useReposSetAdminBranchProtectionMutation,\n  useReposDeleteAdminBranchProtectionMutation,\n  useReposGetPullRequestReviewProtectionQuery,\n  useReposUpdatePullRequestReviewProtectionMutation,\n  useReposDeletePullRequestReviewProtectionMutation,\n  useReposGetCommitSignatureProtectionQuery,\n  useReposCreateCommitSignatureProtectionMutation,\n  useReposDeleteCommitSignatureProtectionMutation,\n  useReposGetStatusChecksProtectionQuery,\n  useReposUpdateStatusCheckProtectionMutation,\n  useReposRemoveStatusCheckProtectionMutation,\n  useReposGetAllStatusCheckContextsQuery,\n  useReposAddStatusCheckContextsMutation,\n  useReposSetStatusCheckContextsMutation,\n  useReposRemoveStatusCheckContextsMutation,\n  useReposGetAccessRestrictionsQuery,\n  useReposDeleteAccessRestrictionsMutation,\n  useReposGetAppsWithAccessToProtectedBranchQuery,\n  useReposAddAppAccessRestrictionsMutation,\n  useReposSetAppAccessRestrictionsMutation,\n  useReposRemoveAppAccessRestrictionsMutation,\n  useReposGetTeamsWithAccessToProtectedBranchQuery,\n  useReposAddTeamAccessRestrictionsMutation,\n  useReposSetTeamAccessRestrictionsMutation,\n  useReposRemoveTeamAccessRestrictionsMutation,\n  useReposGetUsersWithAccessToProtectedBranchQuery,\n  useReposAddUserAccessRestrictionsMutation,\n  useReposSetUserAccessRestrictionsMutation,\n  useReposRemoveUserAccessRestrictionsMutation,\n  useReposRenameBranchMutation,\n  useReposCodeownersErrorsQuery,\n  useReposListCollaboratorsQuery,\n  useReposCheckCollaboratorQuery,\n  useReposAddCollaboratorMutation,\n  useReposRemoveCollaboratorMutation,\n  useReposGetCollaboratorPermissionLevelQuery,\n  useReposListCommitCommentsForRepoQuery,\n  useReposGetCommitCommentQuery,\n  useReposUpdateCommitCommentMutation,\n  useReposDeleteCommitCommentMutation,\n  useReposListCommitsQuery,\n  useReposListBranchesForHeadCommitQuery,\n  useReposListCommentsForCommitQuery,\n  useReposCreateCommitCommentMutation,\n  useReposListPullRequestsAssociatedWithCommitQuery,\n  useReposGetCommitQuery,\n  useReposGetCombinedStatusForRefQuery,\n  useReposListCommitStatusesForRefQuery,\n  useReposGetCommunityProfileMetricsQuery,\n  useReposCompareCommitsQuery,\n  useReposGetContentQuery,\n  useReposCreateOrUpdateFileContentsMutation,\n  useReposDeleteFileMutation,\n  useReposListContributorsQuery,\n  useReposListDeploymentsQuery,\n  useReposCreateDeploymentMutation,\n  useReposGetDeploymentQuery,\n  useReposDeleteDeploymentMutation,\n  useReposListDeploymentStatusesQuery,\n  useReposCreateDeploymentStatusMutation,\n  useReposGetDeploymentStatusQuery,\n  useReposCreateDispatchEventMutation,\n  useReposGetAllEnvironmentsQuery,\n  useReposGetEnvironmentQuery,\n  useReposCreateOrUpdateEnvironmentMutation,\n  useReposDeleteAnEnvironmentMutation,\n  useReposListForksQuery,\n  useReposCreateForkMutation,\n  useReposListWebhooksQuery,\n  useReposCreateWebhookMutation,\n  useReposGetWebhookQuery,\n  useReposUpdateWebhookMutation,\n  useReposDeleteWebhookMutation,\n  useReposGetWebhookConfigForRepoQuery,\n  useReposUpdateWebhookConfigForRepoMutation,\n  useReposListWebhookDeliveriesQuery,\n  useReposGetWebhookDeliveryQuery,\n  useReposRedeliverWebhookDeliveryMutation,\n  useReposPingWebhookMutation,\n  useReposTestPushWebhookMutation,\n  useReposListInvitationsQuery,\n  useReposUpdateInvitationMutation,\n  useReposDeleteInvitationMutation,\n  useReposListDeployKeysQuery,\n  useReposCreateDeployKeyMutation,\n  useReposGetDeployKeyQuery,\n  useReposDeleteDeployKeyMutation,\n  useReposListLanguagesQuery,\n  useReposEnableLfsForRepoMutation,\n  useReposDisableLfsForRepoMutation,\n  useReposMergeUpstreamMutation,\n  useReposMergeMutation,\n  useReposGetPagesQuery,\n  useReposCreatePagesSiteMutation,\n  useReposUpdateInformationAboutPagesSiteMutation,\n  useReposDeletePagesSiteMutation,\n  useReposListPagesBuildsQuery,\n  useReposRequestPagesBuildMutation,\n  useReposGetLatestPagesBuildQuery,\n  useReposGetPagesBuildQuery,\n  useReposGetPagesHealthCheckQuery,\n  useReposGetReadmeQuery,\n  useReposGetReadmeInDirectoryQuery,\n  useReposListReleasesQuery,\n  useReposCreateReleaseMutation,\n  useReposGetReleaseAssetQuery,\n  useReposUpdateReleaseAssetMutation,\n  useReposDeleteReleaseAssetMutation,\n  useReposGenerateReleaseNotesMutation,\n  useReposGetLatestReleaseQuery,\n  useReposGetReleaseByTagQuery,\n  useReposGetReleaseQuery,\n  useReposUpdateReleaseMutation,\n  useReposDeleteReleaseMutation,\n  useReposListReleaseAssetsQuery,\n  useReposUploadReleaseAssetMutation,\n  useReposGetCodeFrequencyStatsQuery,\n  useReposGetCommitActivityStatsQuery,\n  useReposGetContributorsStatsQuery,\n  useReposGetParticipationStatsQuery,\n  useReposGetPunchCardStatsQuery,\n  useReposCreateCommitStatusMutation,\n  useReposListTagsQuery,\n  useReposDownloadTarballArchiveQuery,\n  useReposListTeamsQuery,\n  useReposGetAllTopicsQuery,\n  useReposReplaceAllTopicsMutation,\n  useReposGetClonesQuery,\n  useReposGetTopPathsQuery,\n  useReposGetTopReferrersQuery,\n  useReposGetViewsQuery,\n  useReposTransferMutation,\n  useReposCheckVulnerabilityAlertsQuery,\n  useReposEnableVulnerabilityAlertsMutation,\n  useReposDisableVulnerabilityAlertsMutation,\n  useReposDownloadZipballArchiveQuery,\n  useReposCreateUsingTemplateMutation,\n  useReposListPublicQuery,\n  useReposListForAuthenticatedUserQuery,\n  useReposCreateForAuthenticatedUserMutation,\n  useReposListInvitationsForAuthenticatedUserQuery,\n  useReposAcceptInvitationForAuthenticatedUserMutation,\n  useReposDeclineInvitationForAuthenticatedUserMutation,\n  useReposListForUserQuery,\n} = injectedRtkApi;\n","import { SerializedError } from \"@reduxjs/toolkit\";\nimport { FetchBaseQueryError } from \"@reduxjs/toolkit/dist/query\";\n\nexport interface GithubErrorResponse {\n  message: string,\n  documentation_url: string,\n}\n\nexport function isFetchBaseQueryError(obj: any): obj is FetchBaseQueryError {\n  return (\n    (obj !== null &&\n      typeof obj === \"object\" ||\n      typeof obj === \"function\") && (\n      (\n        typeof obj.status === \"number\" &&\n        'data' in obj\n      ) || (\n        obj.status === \"FETCH_ERROR\" &&\n        typeof obj.error === \"string\"\n      ) || (\n        obj.status === \"PARSING_ERROR\" &&\n        typeof obj.originalStatus === \"number\" &&\n        typeof obj.data === \"string\" &&\n        typeof obj.error === \"string\"\n      ) || (\n        obj.status === \"CUSTOM_ERROR\" &&\n        typeof obj.error === \"string\"\n      )\n    )\n  )\n}\n\nexport function isSerializedError(error: FetchBaseQueryError | SerializedError): error is SerializedError {\n  return !isFetchBaseQueryError(error);\n}\n\nexport function isGithubErrorResponse(obj: any): obj is GithubErrorResponse {\n  return (\n      (obj !== null &&\n          typeof obj === \"object\" ||\n          typeof obj === \"function\") &&\n      typeof obj.message === \"string\" &&\n      typeof obj.documentation_url === \"string\"\n  )\n}\n\nexport function githubApiErrorMessage(error: FetchBaseQueryError | SerializedError) {\n  if (isFetchBaseQueryError(error)) {\n    const err = error as FetchBaseQueryError;\n    const { status } = err;\n    if (status === 'FETCH_ERROR') {\n      return `Fetch error: ${err.error}`\n    } else if (status === 'PARSING_ERROR') {\n      return `Parsing error: ${err.error}`\n    } else if (status === 'CUSTOM_ERROR') {\n      return `Custom error: ${err.error}`\n    } else if (Number.isInteger(status)) {\n      if (isGithubErrorResponse(err.data)) {\n        const githubErr = err.data as GithubErrorResponse;\n        return `${err.status}: ${githubErr.message}`\n      } else {\n        return `${err.status}: Unknown error`\n      }\n    } else {\n      return `${err.status}: Unknown error`\n    }\n  } else if (isSerializedError(error)) {\n    return 'Serialized error'\n  } else {\n    return 'Unknown error'\n  }\n}","import { PayloadAction, configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport { githubApi } from \"./githubApi/baseApi\";\n\ninterface GhStorage {\n  ghToken?: string\n  status: string,\n  errorMessage?: string,\n  storageEngine?: { type: string, state: any }\n}\n\nconst initialState: GhStorage = {\n  status: 'not_initialized',\n}\n\nconst ghStorageSlice = createSlice({\n  name: 'githubStorage',\n  initialState,\n  reducers: {\n    setToken: (state, action: PayloadAction<string>) => {\n      state.ghToken = action.payload\n    },\n    processResult: (state, action: PayloadAction<{ errorMessage?: string, newEngineState?: any }>) => {\n      const { errorMessage, newEngineState } = action.payload;\n      if (errorMessage === undefined) {\n        state.status = 'task_finished';\n      } else {\n        state.errorMessage = errorMessage;\n        state.status = 'error';\n      }\n      if (newEngineState !== undefined) {\n        state.storageEngine!.state = newEngineState;\n      }\n    },\n    updateState: (state, action: PayloadAction<any>) => {\n      if (state.storageEngine !== undefined) {\n        state.storageEngine.state = action.payload;\n      } else {\n        console.error('SheetStorage: storage engine is not initialized');\n      }\n    },\n    init: (state, action: PayloadAction<{ type: string, initialState: any }>) => {\n      const { type, initialState } = action.payload;\n      state.storageEngine = {\n        type,\n        state: initialState\n      }\n    },\n  }\n});\n\nexport const storageActions = { ...ghStorageSlice.actions }\n\nexport const store = configureStore({\n  reducer: {\n    [githubApi.reducerPath]: githubApi.reducer,\n    sheetStorage: ghStorageSlice.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(githubApi.middleware),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;","import sha1 from \"sha1\";\n\nexport function pathURIEncode(path: string) {\n  return path.split('/').map(p => encodeURIComponent(p)).reduce((p, c) => `${p}/${c}`);\n}\n\nexport function getSessionBranchName(fileInfo: { owner: string, repo: string, path: string, ref: string, openAs?: string }) {\n  const { path, ref, openAs } = fileInfo;\n  const getName = (p: string) => {\n    const f = p.split('/').pop()?.split('.');\n    let name = f ? (f.length === 1 ? f[0] : f.slice(0, -1).join('.')) : '';\n    // make the name comply with branch name specs (https://git-scm.com/docs/git-check-ref-format)\n    name = name.replace('..', '');\n    name = name.replace('@{', '');\n    name = name.replace('~', '');\n    name = name.replace('^', '');\n    name = name.replace(':', '');\n    name = name.replace('?', '');\n    name = name.replace('*', '');\n    name = name.replace('[', '');\n    name = name.replace(' ', '-');\n    return name;\n  }\n  return `${ref}_session_${getName(path)}_${sha1(path)}${openAs ? `_${openAs}` : ''}`;\n}\n\nexport function isSessionBranchName(name: string) {\n  return name.match(/_session_/) !== null && name.match(/_[a-z0-9]+$/) !== null;\n}","//import { AppDispatch, RootState, store } from \"../../../app/store\"\n//import { sheetActions } from \"../../sheet/slice/sheetSlice\"\n\nimport { githubApi as gitDbApi } from './githubApi/endpoints/git'\nimport { githubApi as pullsApi } from \"./githubApi/endpoints/pulls\"\nimport { githubApi as reposApi, PullRequestSimple, ReposCreateOrUpdateFileContentsApiArg } from \"./githubApi/endpoints/repos\"\n\nimport { ReposListBranchesApiResponse } from \"./githubApi/endpoints/repos\"\nimport githubApiParseLastPage from \"./githubApi/lastPage\";\nimport { githubApiErrorMessage, isFetchBaseQueryError, isGithubErrorResponse } from \"./githubApi/errorMessage\";\n\n//import { pathURIEncode } from \"../../repository/RepoExplorer\";\nimport sha1 from 'sha1';\nimport { Base64 } from 'js-base64';\n//mport { ActionCreators as UndoActionCreators } from 'redux-undo'\n//import { waitForStorageIdle } from \"../storageUtils\"\n\n//import { store, storageActions, StorageDispatch as AppDispatch, StorageState as RootState } from \"./store\"\n//import { UpdateRecord } from \"../../sheetStorage\"\nimport { AppDispatch, RootState, storageActions, store } from './store';\nimport { getSessionBranchName, pathURIEncode } from './utils';\nimport { GhMergeError, GhSaveError, GithubFileLocation } from './types';\n//import { AutosavePayload } from '../workerApi';\ninterface AutosavePayload {\n  message: string,\n  contentObj: object\n}\n\ntype MergeState = 'idle' | 'merge_waiting' | 'merging' | 'success' | 'error'\n\nexport interface GhStorageState {\n  mergeState: MergeState,\n  mergeError?: GhMergeError,\n  location: GithubFileLocation,\n  sha: string,\n  sessionBranch?: { name: string, commitSha: string },\n  baseBranch: string,\n  baseCommitSha: string,\n  saveError?: GhSaveError,\n}\n\nexport const ghStorageSelectors = {\n  ghState: (state: RootState) => state.sheetStorage.storageEngine !== undefined ? (state.sheetStorage.storageEngine.type === 'github' ? state.sheetStorage.storageEngine.state as GhStorageState : undefined) : undefined\n}\n\nfunction ghUpdateState(state: GhStorageState) {\n  return storageActions.updateState(state);\n}\n\nexport function ghClearSessionBranch() {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const ghState = ghStorageSelectors.ghState(getState());\n    if (ghState !== undefined) {\n      const newState: GhStorageState = {\n        ...ghState,\n        sessionBranch: undefined\n      }\n      dispatch(ghUpdateState(newState));\n    }\n  }\n}\n\nfunction listAllRepoBranches(owner: string, repo: string) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const perPage = 100;\n    const headers = await reposApi.endpoints.reposListBranchesHeaders.initiate({ owner, repo, perPage }, { forceRefetch: true })(dispatch, getState, null)\n    if (headers.isError) {\n      throw Error('unexpected response');\n    }\n    const lastPage = githubApiParseLastPage(headers.data?.link);\n    let branches: ReposListBranchesApiResponse = [];\n    for (let page = 1; page <= lastPage; page++) {\n      const response = await reposApi.endpoints.reposListBranches.initiate({ owner, repo, perPage, page }, { forceRefetch: true })(dispatch, getState, null)\n      if (response.data !== undefined) {\n        branches = branches.concat(response.data)\n      } else {\n        throw Error('unexpected response');\n      }\n    }\n    return branches;\n  }\n}\n\nfunction listAllPulls(owner: string, repo: string, state: \"all\" | \"open\" | \"closed\" | undefined, forceRefetch: boolean) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const perPage = 100;\n    let lastPage = 1;\n    let result: PullRequestSimple[] = []\n    for (let page = 1; page <= lastPage; page++) {\n      const r = await pullsApi.endpoints.pullsListWH.initiate({ owner, repo, state, perPage }, { forceRefetch })(dispatch, getState, null);\n      if (r.data === undefined) {\n        return { error: r.error! }\n      }\n\n      if (page === 1) {\n        lastPage = githubApiParseLastPage(r.data.headers['link']);\n      }\n\n      result = result.concat(r.data.response);\n    }\n    return { result };\n  }\n}\n\nfunction loadFile(fileInfo: { owner: string, repo: string, path: string, ref: string }) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    fileInfo.path = pathURIEncode(fileInfo.path);\n    const r = await reposApi.endpoints.reposGetContent.initiate(fileInfo, { forceRefetch: true })(dispatch, getState, null)\n    if (!r.isSuccess) {\n      return { error: r.error ? githubApiErrorMessage(r.error) : 'GitHub API call error while loading the worksheet' };\n    }\n    const { data } = r;\n    if (!('content' in data)) {\n      return { error: 'Worksheet path does not refer to a file.' };\n    }\n    try {\n      return { content: Base64.decode(data.content), sha: data.sha };\n    } catch (e) {\n      return { error: 'Base64 content decoding failed' };\n    }\n  }\n}\n\nexport function openSheet(location: GithubFileLocation) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const { owner, repo, ref } = location;\n\n    // TODO MOVE TO sheetStorage\n    //dispatch(sheetActions.startLoading());\n\n    // list all branches\n    let branches: ReposListBranchesApiResponse = [];\n    try {\n      branches = await listAllRepoBranches(owner, repo)(dispatch, getState);\n    } catch (e) {\n      console.log('branch listing error ', branches)\n      //dispatch(sheetActions.setErrorMessage({ message: `API call (listAllRepoBranches) failed, try again.`, newState: \"load_error\" }))\n      return { error: `API call (listAllRepoBranches) failed, try again.` };\n    }\n\n    // find base branch and session branch in branches list\n    const expectedSessionBranchName = getSessionBranchName(location);\n    const sheetBranch = branches.filter(b => b.name === ref)[0];\n    const sessionBranch = branches.filter(b => b.name === expectedSessionBranchName)[0];\n\n    if (sheetBranch === undefined) {\n      // given fileInfo that comes from URL is not valid\n      // Error 404 may be returned\n      // dispatch(sheetActions.setErrorMessage({ message: `The requested work sheet was not found in the repository. Check the file name, path, and branch.`, newState: \"load_error\" }))\n      return { error: `The requested work sheet was not found in the repository. Check the file name, path, and branch.` };\n    }\n\n    console.log('branches: ', branches)\n    console.log('expected session branch', expectedSessionBranchName)\n    console.log('session filter: ', branches.filter(b => b.name === expectedSessionBranchName))\n    console.log('sheetBranch is ', sheetBranch);\n    console.log('session branch is ', sessionBranch);\n\n    const sheetFileLocation = {\n      ...location,\n      ref: sessionBranch !== undefined ? sessionBranch.name : sheetBranch.name\n    }\n    const r1 = await loadFile(sheetFileLocation)(dispatch, getState);\n    if ('error' in r1) {\n      const { error } = r1;\n      //dispatch(sheetActions.setErrorMessage({ message: error, newState: \"load_error\" }))\n      return { error: error || 'Failed to load file' };\n    }\n    const { content, sha } = r1;\n\n    const engineState: GhStorageState = {\n      mergeState: 'idle',\n      location,\n      baseBranch: sheetBranch.name,\n      baseCommitSha: sheetBranch.commit.sha,\n      sha,\n    }\n\n    if (sessionBranch === undefined) {\n      // sessionless\n    } else {\n      // reusing existing session\n      console.log('reusing existing session');\n      engineState.sessionBranch = {\n        name: sessionBranch.name,\n        commitSha: sessionBranch.commit.sha\n      }\n    }\n\n    // init storage engine\n    dispatch(storageActions.init({ type: 'github', initialState: engineState }));\n    if (engineState.sessionBranch !== undefined) {\n      const merged = await isSessionBranchMerged()(dispatch, getState);\n      console.log('isSessionBranchMerged: ', merged);\n    }\n    const sheetId = sha1(JSON.stringify({ storageType: 'github', location }))\n    return { json: content, sheetId, custom: {canMerge: sessionBranch !== undefined} }\n  }\n}\n\nexport function mergeChanges() {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const getEngineState = () => getState().sheetStorage.storageEngine!.state as GhStorageState;\n    const { owner, repo, path } = getEngineState().location;\n    const filename = path.replace(/^([^/]*\\/)*([^/]+)\\.workbook$/, '$2');\n\n    if (getEngineState().sessionBranch === undefined) {\n      const mergeError: GhMergeError = {\n        type: 'no_session_branch',\n        message: 'There is no session branch therefore no changes to merge',\n      }\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }))\n      return false;\n    }\n\n    const sourceBranch = getEngineState().sessionBranch!;\n    const targetBranch = getEngineState().baseBranch;\n\n    dispatch(ghUpdateState({\n      ...getEngineState(),\n      mergeState: 'merge_waiting'\n    }));\n\n    dispatch(ghUpdateState({\n      ...getEngineState(),\n      mergeState: 'merging'\n    }));\n\n    const r1 = await pullsApi.endpoints.pullsList.initiate({ owner, repo, state: 'open', perPage: 100 }, { forceRefetch: true })(dispatch, getState, null);\n    if (!('data' in r1) || r1.data === undefined) {\n      // Listing pulls failed\n      const mergeError: GhMergeError = {\n        type: 'api_call_failed',\n        message: r1.error !== undefined ? githubApiErrorMessage(r1.error) : '',\n        call: 'pullsList'\n      }\n\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }))\n      return false;\n    }\n\n    const pullsList = r1.data;\n    console.log('Pulls list: ', pullsList);\n\n    const pr = pullsList.filter(pull => pull.base.ref === targetBranch && pull.head.ref === sourceBranch.name);\n    console.log('filtered pr: ', pr);\n\n    if (pr.length > 1) {\n      // this should not happen, github wont allow creation of same PR twice\n      const mergeError: GhMergeError = {\n        type: 'multiple_pulls',\n        message: 'The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch.',\n      }\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }))\n      return false;\n    }\n\n    let pullNumber;\n    let pullUrl;\n    if (pr.length === 1) {\n      console.log('PR already created');\n      pullNumber = pr[0].number;\n      pullUrl = pr[0].html_url;\n    } else {\n      const r2 = await pullsApi.endpoints.pullsCreate.initiate({\n        owner,\n        repo,\n        body: {\n          title: `${filename}: Worksheet session`,\n          head: `refs/heads/${sourceBranch.name}`,\n          base: `refs/heads/${targetBranch}`\n        }\n      })(dispatch, getState, null);\n      if (!('data' in r2)) {\n        // pull request creation failed\n        const mergeError: GhMergeError = {\n          type: 'api_call_failed',\n          message: githubApiErrorMessage(r2.error),\n          call: 'pullsCreate'\n        }\n        dispatch(ghUpdateState({\n          ...getEngineState(),\n          mergeState: 'error',\n          mergeError\n        }))\n        return false;\n      }\n\n      console.log('created PR: ', r2.data);\n      pullNumber = r2.data.number\n      pullUrl = r2.data.html_url;\n    }\n\n    const r3 = await pullsApi.endpoints.pullsMerge.initiate({\n      owner,\n      repo,\n      pullNumber,\n      body: {\n        commit_title: `${filename}: Worksheet session ${owner}/${repo}#${pullNumber}`,\n        commit_message: `See https://github.com/${owner}/${repo}/pull/${pullNumber}`,\n        merge_method: \"squash\"\n      }\n    })(dispatch, getState, null);\n    if (!('data' in r3)) {\n      // merging request failed\n      const { error } = r3;\n      let mergeError: GhMergeError;\n      if (isFetchBaseQueryError(error)\n        && typeof error.status === 'number'\n        && isGithubErrorResponse(error.data)\n        && error.status === 405\n        && error.data.message === 'Pull Request is not mergeable'\n      ) {\n        mergeError = {\n          type: 'not_mergable',\n          message: githubApiErrorMessage(r3.error),\n          url: pullUrl,\n        }\n      } else {\n        mergeError = {\n          type: 'api_call_failed',\n          message: githubApiErrorMessage(r3.error),\n          call: 'pullsMerge'\n        }\n      }\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }));\n      return false;\n    }\n\n    console.log('merge success', r3.data);\n\n    const r4 = await gitDbApi.endpoints.gitDeleteRef.initiate({ owner, repo, ref: `heads/${pathURIEncode(sourceBranch.name)}` })(dispatch, getState, null);\n    if (!('data' in r4)) {\n      // this error is ignored for now, it will be reported on next commit to this branch\n      console.log('Failed to delete old branch');\n    }\n    console.log('old branch delete success', r4);\n\n    dispatch(storageActions.updateState({\n      ...getEngineState(),\n      sessionBranch: undefined,\n      mergeState: 'success',\n      mergeError: undefined,\n      baseCommitSha: r3.data.sha,\n    }));\n    return r3.data;\n  }\n}\n\nfunction createSessionBranch() {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const engineState: GhStorageState = getState().sheetStorage.storageEngine!.state\n    const { location, baseCommitSha } = engineState;\n    const { owner, repo } = location;\n    const sessionBranchName = `refs/heads/${getSessionBranchName(location)}`;\n\n    const response = await gitDbApi.endpoints.gitCreateRef.initiate({ owner, repo, body: { ref: sessionBranchName, sha: baseCommitSha } })(dispatch, getState, null);\n    if ('data' in response) {\n      // success\n      return { response: response.data };\n    } else {\n      // process error\n      const { error } = response;\n      if (isFetchBaseQueryError(error)\n        && typeof error.status === 'number'\n        && isGithubErrorResponse(error.data)\n        && error.status === 422\n        && error.data.message === 'Reference already exists'\n      ) {\n        // session branch was already created probably by another workbook instance\n        // so file was modified\n        const saveError: GhSaveError = {\n          type: 'background_update',\n          message: error.data.message\n        }\n        return { saveError };\n      } else {\n        // unknown error \n        const saveError: GhSaveError = {\n          type: 'unknown_error',\n          message: githubApiErrorMessage(error)\n        }\n        return { saveError };\n      }\n    }\n  }\n}\n\nfunction isSessionBranchMerged() {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const ghState = ghStorageSelectors.ghState(getState());\n    console.log('testSessionBranch');\n    if (ghState === undefined || ghState.sessionBranch === undefined) {\n      throw Error('isSessionBranchMerged called on uninitialized ghStorage');\n    }\n    const { owner, repo } = ghState.location;\n    const { baseBranch, sessionBranch } = ghState;\n    const r = await listAllPulls(owner, repo, 'closed', true)(dispatch, getState)\n\n    if (r.error !== undefined) {\n      return { error: r.error }\n    }\n    const pulls = r.result;\n    console.log(`searching for pull from ${baseBranch} to ${sessionBranch.name} with sha ${sessionBranch.commitSha}`)\n    console.log('pulls: ', pulls)\n    for (let pull of pulls) {\n      if (pull.state === 'closed'\n        && pull.base.ref === baseBranch\n        && pull.head.ref === sessionBranch.name\n        && pull.head.sha === sessionBranch.commitSha\n      ) {\n        return { result: true };\n      }\n    }\n    return { result: false };\n  }\n}\n\nfunction commitRecord(record: AutosavePayload) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const engineState: GhStorageState = getState().sheetStorage.storageEngine!.state\n    const { owner, repo, path } = engineState.location;\n    const { sessionBranch, sha } = engineState;\n    const updateArgs: ReposCreateOrUpdateFileContentsApiArg = {\n      owner, repo,\n      path: pathURIEncode(path),\n      body: {\n        message: record.message,\n        content: Base64.encode(JSON.stringify(record.contentObj, null, 2)),\n        sha,\n        branch: sessionBranch!.name,\n      }\n    }\n    const r = await reposApi.endpoints.reposCreateOrUpdateFileContents.initiate(updateArgs)(dispatch, getState, null);\n    if ('error' in r) {\n      // report save error\n      const { error } = r;\n\n      if (isFetchBaseQueryError(error)\n        && typeof error.status === 'number'\n        && isGithubErrorResponse(error.data)\n        && error.status === 409\n      ) {\n        // file was probably updated by another workbook instance or in github\n        const saveError: GhSaveError = {\n          type: 'background_update',\n          message: error.data.message\n        }\n        return { saveError };\n      } else {\n        // unknown error \n        const saveError: GhSaveError = {\n          type: 'unknown_error',\n          message: githubApiErrorMessage(error)\n        }\n        return { saveError };\n      }\n    }\n    return { response: r };\n  }\n}\n\nexport function onResume(state: GhStorageState) {\n  state.saveError = undefined;\n}\n\nfunction waitForMerge() {\n  return new Promise<void>((resolve, reject) => {\n    const processState = () => {\n      const state = (store.getState().sheetStorage.storageEngine!.state as GhStorageState).mergeState\n      if (state === 'idle' || state === 'success' || state === 'merge_waiting') {\n        resolve()\n        return true;\n      } else if (state === 'error') {\n        reject()\n        return true;\n      }\n      return false;\n    }\n    if (processState() === false) {\n      const unsubscribe = store.subscribe(() => {\n        if (processState()) {\n          unsubscribe()\n        }\n      })\n    }\n  })\n}\n\nexport function processRecord(record: AutosavePayload) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      await waitForMerge();\n    } catch (e) { }\n\n    const getEngineState = () => getState().sheetStorage.storageEngine!.state;\n    if (getEngineState().sessionBranch === undefined) {\n      const r = await createSessionBranch()(dispatch, getState);\n      if (r.saveError !== undefined) {\n        const newEngineState: GhStorageState = {\n          ...getEngineState(),\n          saveError: r.saveError\n        }\n        dispatch(storageActions.processResult({\n          //id: record.id,\n          errorMessage: `Creation of session branch failed: ${r.saveError.message}`,\n          newEngineState,\n        }));\n        return;\n      }\n\n      console.log('created session branch ', r.response);\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        sessionBranch: {\n          name: getSessionBranchName(getEngineState().location),\n          commitSha: r.response.object.sha\n        }\n      }\n      dispatch(storageActions.updateState(newEngineState));\n    }\n\n    const merged = await isSessionBranchMerged()(dispatch, getState);\n    if (merged.error !== undefined) {\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        saveError: {\n          type: 'unknown_error',\n          message: `API call failed: ${githubApiErrorMessage(merged.error)}`\n        }\n      }\n      dispatch(storageActions.processResult({\n        //id: record.id,\n        errorMessage: `API call failed: ${githubApiErrorMessage(merged.error)}`,\n        newEngineState,\n      }));\n      return;\n    }\n    if (merged.result === true) {\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        saveError: {\n          type: 'merged_session',\n          message: 'Merged session branch must be deleted'\n        }\n      }\n      dispatch(storageActions.processResult({\n        //id: record.id,\n        errorMessage: 'Merged session branch must be deleted',\n        newEngineState,\n      }));\n\n      return;\n    }\n    console.log('isSessionBranchMerged: ', merged);\n\n    const r = await commitRecord(record)(dispatch, getState);\n    if (r.saveError !== undefined) {\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        saveError: r.saveError\n      }\n      dispatch(storageActions.processResult({\n        //id: record.id,\n        errorMessage: `Commit failed: ${r.saveError.message}`,\n        newEngineState\n      }));\n    } else {\n      const engineState: GhStorageState = getState().sheetStorage.storageEngine!.state\n      const sha = r.response.data.content!.sha!;\n      const sessionBranch = {\n        ...engineState.sessionBranch!,\n        commitSha: r.response.data.commit.sha!\n      }\n      const newEngineState: GhStorageState = {\n        ...engineState,\n        sha,\n        sessionBranch,\n      }\n      dispatch(storageActions.processResult({ /*id: record.id,*/ newEngineState }));\n      //console.log('Commited record ' + record.id);\n    }\n  }\n}","import { StorageEngine } from \"../storageEngine\";\nimport { AutosavePayload, TaskResult, Task, Command, CommandResult } from \"../workerApi\";\nimport { GhStorageState, ghClearSessionBranch, mergeChanges, openSheet, processRecord } from \"./githubStorage\";\nimport { storageActions, store } from \"./store\";\nimport { GhCustomManualSaveErrInfo, GithubFileLocation } from \"./types\";\n\nexport type GhCustomAutosaveErrInfo = Pick<GhStorageState,\n  'location'\n  | 'sessionBranch'\n  | 'baseBranch'\n  | 'saveError'\n>\n\ninterface CustomState {\n  canMerge: boolean,\n  autosaveErr?: GhCustomAutosaveErrInfo,\n  mergeErr?: GhCustomManualSaveErrInfo\n}\n\nexport function initGithubEngine(initPayload: any): StorageEngine {\n  const dispatch = store.dispatch;\n  const getState = store.getState;\n\n  const custom: CustomState = {\n    canMerge: false\n  }\n\n  function init(payload: any): CommandResult {\n    if (!('ghToken' in payload.custom)) {\n      throw new Error('Missing github access token in github engine initialization');\n    }\n    dispatch(storageActions.setToken(payload.custom.ghToken));\n    return {\n      result: 'success',\n      customState: custom,\n    }\n  }\n\n  async function load(addr: GithubFileLocation): Promise<CommandResult> {\n    const res = await openSheet(addr)(dispatch, getState)\n    if (res.error !== undefined) {\n      return { result: 'error', errorMessage: res.error }\n    }\n    custom.canMerge = res.custom.canMerge;\n    return { result: 'success', data: {json: res.json, sheetId: res.sheetId}, customState: custom }\n  }\n\n  async function autosave(record: AutosavePayload): Promise<TaskResult> {\n    await processRecord(record)(dispatch, getState);\n    const state = getState()\n    if (state.sheetStorage.status === 'task_finished') {\n      custom.canMerge = true;\n      return { result: 'success', customState: custom }\n    }\n\n    custom.autosaveErr = {\n      location: state.sheetStorage.storageEngine?.state.location,\n      sessionBranch: state.sheetStorage.storageEngine?.state.sessionBranch,\n      baseBranch: state.sheetStorage.storageEngine?.state.baseBranch,\n      saveError: state.sheetStorage.storageEngine?.state.saveError,\n    }\n\n    return {\n      result: 'error',\n      errorMessage: state.sheetStorage.errorMessage || 'err',\n      customState: custom\n    };\n  }\n\n  async function merge(): Promise<TaskResult> {\n    const result = await mergeChanges()(dispatch, getState)\n    if (result === false) {\n      const state = getState().sheetStorage.storageEngine?.state\n      const { baseBranch, mergeState, mergeError, sessionBranch } = state;\n      custom.mergeErr = {\n        baseBranch, mergeState, mergeError, sessionBranch,\n      }\n      return { result: 'error', errorMessage: state.mergeError?.message || 'save error', customState: custom }\n    } else {\n      custom.canMerge = false;\n      return { result: 'success', customState: custom }\n    }\n  }\n\n  function clearSessionBranch(): CommandResult {\n    ghClearSessionBranch()(dispatch, getState)\n    return { result: 'success' }\n  }\n\n  const engine: StorageEngine = {\n    runCommand: async (cmd: Command) => {\n      switch (cmd.type) {\n        case 'init': return init(cmd.payload);\n        case 'load': return load(cmd.payload as GithubFileLocation)\n        case 'clearSessionBranch': return clearSessionBranch();\n        default:\n          throw new Error(\"Unknown command in github engine: \" + cmd.type)\n      }\n    },\n    runTask: async (task: Task) => {\n      switch (task.type) {\n        case 'autosave': return autosave(task.payload as AutosavePayload)\n        case 'merge': return merge()\n        default:\n          throw new Error(\"Unknown task in github engine: \" + task.type)\n      }\n    },\n  }\n  return engine;\n}\n/*\nloadSheet: async (addr: GithubFileLocation) => {\n  const res = await openSheet(addr)(dispatch, getState)\n  if (res.error !== undefined) {\n    return { errMsg: res.error }\n  }\n  /*\n  try {\n    return {contentObj: JSON.parse(res.json)}\n  } catch (e) {\n    const syntaxErr = e as SyntaxError\n    return {errMsg: `JSON parse failed: ${syntaxErr.message}`};\n  }\n  *//*\nreturn { json: res.json, sheetId: res.sheetId, custom: res.custom }\n},\nautoSave: async (record: AutoSavePayload) => {\nawait processRecord(record)(dispatch, getState);\nconst state = getState()\nif (state.sheetStorage.status === 'task_finished') {\n  return {success: true, custom: {canMerge: true}};\n}\n\nconst cutstomErr: GhCustomAutosaveErrInfo = {\n  location: state.sheetStorage.storageEngine?.state.location,\n  sessionBranch: state.sheetStorage.storageEngine?.state.sessionBranch,\n  baseBranch: state.sheetStorage.storageEngine?.state.baseBranch,\n  saveError: state.sheetStorage.storageEngine?.state.saveError,\n}\n\nreturn {\n  errMsg: state.sheetStorage.errorMessage || 'err',\n  customErrObj: cutstomErr,\n};\n},\nresume: async () => {\nreturn true\n},\nmanualSave: async () => {\nconst result = await mergeChanges()(dispatch, getState)\nif (result === false) {\n  const state = getState().sheetStorage.storageEngine?.state\n  const {baseBranch, mergeState, mergeError, sessionBranch} = state;\n  const cutstomErr: GhCustomManualSaveErrInfo = {\n    baseBranch, mergeState, mergeError, sessionBranch,\n  }\n\n  return {errMsg: state.mergeError?.message || 'save error', customErrObj: cutstomErr}\n} else {\n  return {success: true, custom: {canMerge: false}};\n}\n},\ncustomCmd: async (cmd: CustomCmdPayload) => {\nif (cmd.type === 'clearSessionBranch') {\n  return ghClearSessionBranch()(dispatch, getState)\n} else {\n  throw new Error('Unknown custom command')\n}\n}\n}*/","export type TMayFail<S, E> = Success<S, E> | Fail<S, E>\n\ntype MayfailFunction<S1, S2, E> =\n  (s: S1) => Success<S2, any> | Fail<any, E>\n\ntype MayfailAsyncFunction<S1, S2, E> =\n  (s: S1) => Promise<Success<S2, any> | Fail<any, E>>\n\ntype ExtendScope<Scope, NewValue, NewKey extends string> =\n  Scope & { [key in NewKey]: NewValue }\n\ntype ExtendScopeV<Scope, MayFail extends TMayFail<any, any>, NewKey extends string> =\n  ExtendScope<Scope, ExtractSuccessTypeV<MayFail>, NewKey>\n\ntype ExtendScopeF<Scope, MayFail extends (...args: any[]) => TMayFail<any, any>, NewKey extends string> =\n  ExtendScope<Scope, ExtractSuccessTypeF<MayFail>, NewKey>\n\ntype ExtendScopeA<Scope, MayFail extends (...args: any[]) => Promise<TMayFail<any, any>>, NewKey extends string> =\n  ExtendScope<Scope, ExtractSuccessTypeA<MayFail>, NewKey>\n\ntype ExtractSuccessTypeF<MayFail extends (...args: any[]) => TMayFail<any, any>> =\n  MayFail extends (...args: any[]) => (Success<infer S, any> | Fail<any, any>)\n  ? S\n  : never\n\ntype ExtractErrorTypeF<MayFail extends (...args: any[]) => TMayFail<any, any>> =\n  MayFail extends (...args: any[]) => Success<any, any> | Fail<any, infer E>\n  ? E\n  : never\n\ntype ExtractSuccessTypeA<MayFail extends (...args: any[]) => Promise<Success<any, any> | Fail<any, any>>> =\n  MayFail extends (...args: any[]) => Promise<Success<infer S, any> | Fail<any, any>>\n  ? S\n  : never\n\ntype ExtractErrorTypeA<MayFail extends (...args: any[]) => Promise<TMayFail<any, any>>> =\n  MayFail extends (...args: any[]) => Promise<Success<any, any> | Fail<any, infer E>>\n  ? E\n  : never\n\ntype ToFunction<T> = () => T\n// weird hack, typescript cannot infer type with: Success<infer S, any> | Fail<any, any>\n// but can with () => Success<infer S, any> | Fail<any, any>\n// therefore Success<infer S, any> | Fail<any, any> is converted to function\ntype ExtractSuccessTypeV<MayFail extends TMayFail<any, any>> = ExtractSuccessTypeF<ToFunction<MayFail>>\nexport type ExtractErrorTypeV<MayFail extends TMayFail<any, any>> = ExtractErrorTypeF<ToFunction<MayFail>>\n\ntype PassError<PrevErr, NewErr> = unknown extends PrevErr ? NewErr : PrevErr\n/*\ntype _P1 = PassError<unknown, number> // number\ntype _P2 = PassError<any, number> // number\ntype _P3 = PassError<never, number> // never\ntype _P4 = PassError<string, number> // string\ntype _P5 = PassError<string[], number> // string\n*/\n\ninterface Chaining<S, E> {\n  assignV: <Other extends Success<any, unknown> | Fail<unknown, E>, KeyName extends string>\n    (k: KeyName, other: Other)\n    => TMayFail<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>>\n\n  assignF: <Fce extends MayfailFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    => TMayFail<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>>\n\n  retV: <Other extends Success<any, unknown> | Fail<unknown, E>>\n    (other: Other)\n    => TMayFail<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>>\n\n  retF: <Fce extends MayfailFunction<S, any, E>>\n    (fce: Fce)\n    => TMayFail<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>>\n\n  // asyncAssignF: <Fce extends MayfailAsyncFunction<S, any, E>, KeyName extends string>\n  //   (k: KeyName, fce: Fce)\n  //   => MayFailPromise<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>>\n\n  transformError: <E2>(fce: (error: E) => E2) => TMayFail<S, E2>\n}\n\ninterface AsyncChaining<S, E> {\n  assignV: <Other extends Success<any, unknown> | Fail<unknown, E>, KeyName extends string>\n    (k: KeyName, other: Other)\n    => MayFailPromise<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>>\n\n  assignF: <Fce extends MayfailFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    => MayFailPromise<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>>\n\n  retV: <Other extends Success<any, unknown> | Fail<unknown, E>>\n    (other: Other)\n    => MayFailPromise<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>>\n\n  retF: <Fce extends MayfailFunction<S, any, E>>\n    (fce: Fce)\n    => MayFailPromise<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>>\n\n  asyncAssignF: <Fce extends MayfailAsyncFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    => MayFailPromise<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>>\n\n  transformError: <E2>\n    (fce: (error: E) => E2)\n    => MayFailPromise<S, E2>\n}\n\nfunction assignV\n  <S, E, Other extends Success<any, unknown> | Fail<unknown, E>, KeyName extends string>\n  (current: TMayFail<S, E>, k: KeyName, other: Other)\n  : TMayFail<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>> {\n  if (current.isFail()) {\n    return current as TMayFail<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>>\n  }\n  if (other.isFail()) {\n    return other as TMayFail<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>>\n  }\n  return MayFail.Success(Object.assign(\n    {}, current.value, { [k.toString()]: other.value }\n  ) as any)\n}\n\nfunction assignF\n  <S, E, Fce extends MayfailFunction<S, any, E>, KeyName extends string>\n  (current: TMayFail<S, E>, k: KeyName, fce: Fce)\n  : TMayFail<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>> {\n  type S2 = ExtractSuccessTypeF<Fce>\n  if (current.isFail()) { return current as TMayFail<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>> }\n  const result = fce(current.value) as TMayFail<S2, E>\n  return assignV<S, E, TMayFail<any, any>, KeyName>(current, k, result) as TMayFail<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>>;\n}\n\nfunction retV\n  <S, E, Other extends Success<any, unknown> | Fail<unknown, E>>\n  (current: TMayFail<S, E>, other: Other)\n  : TMayFail<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>> {\n  type R = TMayFail<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>>\n  if (current.isFail()) { return current as R }\n  return other as R;\n}\n\nfunction retF\n  <S, E, Fce extends MayfailFunction<S, any, E>>\n  (current: TMayFail<S, E>, fce: Fce)\n  : TMayFail<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>> {\n  type R = TMayFail<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>>\n  if (current.isFail()) {\n    return current as R;\n  }\n  return fce(current.value) as R\n}\n\nfunction transformError<S, E, E2>(current: TMayFail<S, E>, fce: (error: E) => E2): TMayFail<S, E2> {\n  if (current.isSuccess()) {\n    return current as unknown as TMayFail<S, E2>;\n  }\n  const newErr = fce(current.value)\n  return MayFail.Error<S, E2>(newErr);\n}\n\nfunction asyncAssignF\n  <S, E, Fce extends MayfailAsyncFunction<S, any, E>, KeyName extends string>\n  (current: TMayFail<S, E> | Promise<TMayFail<S, E>>, k: KeyName, fce: Fce)\n  : MayFailPromise<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>> {\n  type R = TMayFail<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>>\n  return new MayFailPromise<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>>(async resolve => {\n    const _current = current instanceof Promise ? await current : current\n    if (_current.isFail()) {\n      resolve(_current as R);\n      return\n    }\n    const result = await fce(_current.value)\n    resolve(assignV<S, E, TMayFail<any, any>, KeyName>(_current, k, result))\n  })\n}\n\nclass MayFailPromise<S, E> extends Promise<TMayFail<S, E>> implements AsyncChaining<S, E> {\n  public assignV\n    <Other extends Success<any, any> | Fail<unknown, E>, KeyName extends string>\n    (k: KeyName, other: Other)\n    : MayFailPromise<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>> {\n    return new MayFailPromise<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>>(async resolve => {\n      const current = await this as TMayFail<S, E>;\n      resolve(assignV<S, E, Other, KeyName>(current, k, other))\n    })\n  }\n\n  public assignF\n    <Fce extends MayfailFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    : MayFailPromise<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>> {\n    return new MayFailPromise<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>>(async resolve => {\n      //const current = await this\n      resolve(assignF<S, E, Fce, KeyName>(await this, k, fce))\n    })\n  }\n\n  public retV<Other extends Success<any, unknown> | Fail<unknown, E>>\n    (other: Other)\n    : MayFailPromise<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>> {\n    return new MayFailPromise<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>>(async resolve => {\n      resolve(retV<S, E, Other>(await this, other))\n    })\n  }\n\n  public retF<Fce extends MayfailFunction<S, any, E>>\n    (fce: Fce)\n    : MayFailPromise<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>> {\n    return new MayFailPromise<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>>(async resolve => {\n      resolve(retF<S, E, Fce>(await this, fce))\n    })\n  }\n\n  public asyncAssignF<Fce extends MayfailAsyncFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    : MayFailPromise<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>> {\n    return asyncAssignF<S, E, Fce, KeyName>(this, k, fce)\n  }\n\n  public transformError<E2>\n    (fce: (error: E) => E2)\n    : MayFailPromise<S, E2> {\n    return new MayFailPromise<S, E2>(async resolve => {\n      resolve(transformError<S, E, E2>(await this, fce))\n    });\n  }\n}\n\nclass Success<S, E> implements Chaining<S, E> {\n  private _value: S\n  get value(): S { return this._value }\n  public isSuccess(): this is Success<S, E> { return true }\n  public isFail(): this is Fail<S, E> { return false }\n  constructor(value: S) {\n    this._value = value;\n  }\n\n  public assignV\n    <Other extends Success<any, any> | Fail<unknown, E>, KeyName extends string>\n    (k: KeyName, other: Other)\n    : TMayFail<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>> {\n    return assignV<S, E, Other, KeyName>(this, k, other)\n  }\n\n  public assignF\n    <Fce extends MayfailFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    : TMayFail<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>> {\n    return assignF<S, E, Fce, KeyName>(this, k, fce)\n  }\n\n  public retV<Other extends Success<any, unknown> | Fail<unknown, E>>\n    (other: Other)\n    : TMayFail<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>> {\n    return retV<S, E, Other>(this, other);\n  }\n\n  public retF<Fce extends MayfailFunction<S, any, E>>\n    (fce: Fce)\n    : TMayFail<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>> {\n    return retF<S, E, Fce>(this, fce);\n  }\n\n  public asyncAssignF<Fce extends MayfailAsyncFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    : MayFailPromise<ExtendScopeA<S, Fce, KeyName>, PassError<E, ExtractErrorTypeA<Fce>>> {\n    return asyncAssignF<S, E, Fce, KeyName>(this, k, fce)\n  }\n\n  public transformError<E2>\n    (fce: (error: E) => E2)\n    : TMayFail<S, E2> {\n    return transformError<S, E, E2>(this, fce)\n  }\n}\n\nclass Fail<S, E> implements Chaining<S, E> {\n  private _error: E\n  get value(): E { return this._error }\n  public isSuccess(): this is Success<S, E> { return false }\n  public isFail(): this is Fail<S, E> { return true }\n  constructor(error: E) {\n    this._error = error;\n  }\n\n  public assignV\n    <Other extends Success<any, any> | Fail<unknown, E>, KeyName extends string>\n    (k: KeyName, other: Other)\n    : TMayFail<ExtendScopeV<S, Other, KeyName>, PassError<E, ExtractErrorTypeV<Other>>> {\n    return assignV(this, k, other)\n  }\n\n  public assignF\n    <Fce extends MayfailFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    : TMayFail<ExtendScopeF<S, Fce, KeyName>, PassError<E, ExtractErrorTypeF<Fce>>> {\n    return assignF<S, E, Fce, KeyName>(this, k, fce)\n  }\n\n  public retV<Other extends Success<any, unknown> | Fail<unknown, E>>\n    (other: Other)\n    : TMayFail<ExtractSuccessTypeV<Other>, PassError<E, ExtractErrorTypeV<Other>>> {\n    return retV<S, E, Other>(this, other);\n  }\n\n  public retF<Fce extends MayfailFunction<S, any, E>>\n    (fce: Fce)\n    : TMayFail<ExtractSuccessTypeF<Fce>, PassError<E, ExtractErrorTypeF<Fce>>> {\n    return retF<S, E, Fce>(this, fce);\n  }\n  // for some reaseon using PassError here creates lot of seemingly unrelated type errors\n  public asyncAssignF<Fce extends MayfailAsyncFunction<S, any, E>, KeyName extends string>\n    (k: KeyName, fce: Fce)\n    : MayFailPromise<ExtendScopeA<S, Fce, KeyName>, E> {\n    return asyncAssignF<S, E, Fce, KeyName>(this, k, fce)\n  }\n\n  public transformError<E2>\n    (fce: (error: E) => E2)\n    : TMayFail<S, E2> {\n    return transformError<S, E, E2>(this, fce)\n  }\n}\n\nexport class MayFail {\n  public static Success<S, E>(value: S) {\n    return new Success<S, E>(value)\n  }\n  public static Error<S, E>(value: E) {\n    return new Fail<S, E>(value)\n  }\n  public static do<E>() {\n    return MayFail.Success<{}, E>({})\n  }\n}\n\nexport function success<S, E>(value: S) { return MayFail.Success<S, E>(value) }\nexport function err<S, E>(error: E) { return MayFail.Error<S, E>(error) }\n\nlet a = MayFail.do().retV(Math.random() > 0.5 ? MayFail.Success(1) : MayFail.Error('out of luck'));\nlet b = MayFail.do().assignV('x', a);\n\nlet aa = ''\nlet bb: unknown = aa\n\n//let __x: TMayFail1<string, string> = new Success<string, string>('5')\n\nMayFail.do().assignV('x', success(4)).assignF('y', s => {\n  return a\n})\n\nMayFail.do().assignV('x', success(4)).asyncAssignF('y', async s => {\n  //let r = err<number, string>('no') as TMayFail<number, string>\n  let r = a\n  return r\n})\n\nfunction test() {\n  const assert = (b: boolean) => {\n    if (!b) throw new Error('assertion failed')\n  }\n  let r = MayFail.do().assignV('x', MayFail.Success(5))\n  assert(r.isSuccess() && r.value.x === 5)\n  r = MayFail.do().assignF('x', () => MayFail.Success(10))\n  assert(r.isSuccess() && r.value.x === 10)\n  let r1 = MayFail.do().assignF('x', () => MayFail.Success(10)).retV(MayFail.Success(5))\n  assert(r1.isSuccess() && r1.value === 5)\n  r1 = MayFail.do().assignF('x', () => MayFail.Success(10)).retF(() => MayFail.Success(10))\n  assert(r1.isSuccess() && r1.value === 10)\n  let r2 = MayFail.do().assignF('x', () => MayFail.Success(10)).retF(() => MayFail.Error(10))\n  assert(r2.isFail() && r2.value === 10)\n  r2 = MayFail.do().assignF('x', () => MayFail.Error(10)).retF(() => MayFail.Error(10))\n  assert(r2.isFail() && r2.value === 10)\n  r2 = MayFail.do().assignV('x', MayFail.Error(10)).retF(() => MayFail.Error(10))\n  assert(r2.isFail() && r2.value === 10)\n  r2 = MayFail.do().assignF('x', () => MayFail.Success(10)).retV(MayFail.Error(11))\n  assert(r2.isFail() && r2.value === 11)\n  r2 = MayFail.do().assignF('x', () => MayFail.Success(10)).retV(MayFail.Error(11)).transformError(e => 2 * e)\n  assert(r2.isFail() && r2.value === 22);\n\n  (async () => {\n    let r1 = await MayFail.do().asyncAssignF('x', async s => MayFail.Success(1))\n    assert(r1.isSuccess() && r1.value.x === 1);\n    let r2 = await MayFail.do().assignV('x', MayFail.Success(2)).asyncAssignF('y', async s => MayFail.Success(3))\n    assert(r2.isSuccess() && r2.value.x === 2 && r2.value.y === 3);\n    let r3 = await MayFail.do().assignV('x', MayFail.Success(4)).asyncAssignF('y', async s => MayFail.Success(5)).assignV('z', MayFail.Success(6))\n    assert(r3.isSuccess() && r3.value.x === 4 && r3.value.y === 5 && r3.value.z === 6);\n  })()\n}\ntest()\n\nlet t1 = MayFail.do<number>()\n  .assignV('x', MayFail.Success(5))\n  .assignF('y', scope => scope.x > 5 ? MayFail.Success(scope.x * scope.x) : MayFail.Error(-1))\n  .transformError(err => `${err}`);\nif (t1.isSuccess()) {\n  const v = t1.value\n} else {\n  const e: string = t1.value\n}\n\n\nMayFail.do().assignV('x', MayFail.Success(5)).retV(MayFail.Error(false))\nMayFail.do().assignF('x', s => MayFail.Success(5))\n\nMayFail.do()\n  .assignV('x', 7 > 10 ? MayFail.Success(10) : MayFail.Error('10'))\n  .assignV('ww', MayFail.Error(''))\n  .assignF('y', scope => scope.x > 10 ? MayFail.Success(5) : MayFail.Success('a'))\n  .assignF('z', scope => typeof scope.y === 'string' ? MayFail.Success(scope.y) : MayFail.Error('wrong'))\n  .assignF('w', scope => scope.y === 5 ? MayFail.Success(scope.y) : MayFail.Error('10'))\n  .retF(scope => {\n    const x: number = scope.x\n    const ww: unknown = scope.ww\n    const y: number | string = scope.y\n    const z: string = scope.z\n    const w: number = scope.w\n    if (scope.z === '') {\n      return MayFail.Error('5')\n    }\n\n    return MayFail.Success(true)\n  })\n\nMayFail.do()\n  .assignF('x', scope => 7 > 10 ? MayFail.Success(10) : MayFail.Error('10'))\n  .assignF('y', scope => 7 > 10 ? MayFail.Success(10) : MayFail.Error('10'))\n  .assignF('z', scope => {\n    const x: number = scope.x\n    const y: number = scope.y\n    return MayFail.Success(true)\n  })\n\nlet _t1 = MayFail.do<string>()\n  .assignF('x', scope => 7 > 10 ? MayFail.Success(10) : MayFail.Error('10'))\n  .assignF('y', scope => 7 > 10 ? MayFail.Success(10) : MayFail.Error('10'))\n  .assignF('z', scope => {\n    const x: number = scope.x\n    const y: number = scope.y\n    return MayFail.Success(true)\n  })\n  .retV(MayFail.Error('true'))\n\nMayFail.do<{ code: number, message: string }>()\n  .assignF('x', scope => {\n    return MayFail.Error({\n      code: 5,\n      message: 'fail',\n    })\n  })\n\nMayFail.do()\n  .assignV('x', 7 > 10 ? MayFail.Success(10) : MayFail.Error('10'))\n\nMayFail.do()\n  .assignV('x', 7 > 10 ? MayFail.Success<number, string>(10) : MayFail.Error('10'))\n\nMayFail.do()\n  .assignV('x', 7 > 10 ? MayFail.Success(10) : MayFail.Error<number, string>('10'))\n\nMayFail.do()\n  .assignV('x', 7 > 10 ? MayFail.Success<number, string>(10) : MayFail.Error<number, string>('10'))\n\nMayFail.do()\n  .assignF('x', s => 7 > 10 ? MayFail.Success<number, string>(10) : MayFail.Error<number, string>('10'))\n\n// @ts-expect-error\nMayFail.do<string>().assignV('x', MayFail.Error(5))\n\nMayFail.do()\n  .assignV('x', Math.random() > 0.5 ? MayFail.Success(1) : MayFail.Error('out of luck'))\n  // @ts-expect-error\n  .assignV('y', MayFail.Error(10))\n\nMayFail.do()\n  .assignF('x', () => Math.random() > 0.5 ? MayFail.Success(1) : MayFail.Error('out of luck'))\n  // @ts-expect-error\n  .assignV('y', MayFail.Error(10))\n\n// @ts-expect-error\nMayFail.do<string>().assignV('x', MayFail.Error('true')).assignV('y', MayFail.Error(4))\n// @ts-expect-error\nMayFail.do().assignV('x', MayFail.Error(true)).assignV('y', MayFail.Error(4))\n// @ts-expect-error\nMayFail.do().assignV('x', MayFail.Error(true)).assignV('y', MayFail.Error(4)).assignV('z', MayFail.Error(false))\n// @ts-expect-error\nMayFail.do<string>().assignV('x', MayFail.Error(true)).assignV('y', MayFail.Error('4')).assignV('z', MayFail.Error('false'))\n// @ts-expect-error\nMayFail.do<string>().assignV('x', MayFail.Error(true)).assignV('y', MayFail.Success('4')).assignV('z', MayFail.Error(false))\n// @ts-expect-error\nMayFail.do<string>().assignF('x', () => MayFail.Success(4)).assignV('y', MayFail.Error(4))\n// @ts-expect-error\nMayFail.do().retV(MayFail.Error('no')).assignV('x', MayFail.Error(5))\n// @ts-expect-error\nMayFail.do().retV(MayFail.Error('no')).assignV('x', 5 > 7 ? MayFail.Success(5) : MayFail.Error(7))\n// @ts-expect-error\nMayFail.do().retF(() => MayFail.Error('no')).assignV('x', MayFail.Error(5))\n// @ts-expect-error\nMayFail.do().retF(() => MayFail.Error('no')).assignV('x', 5 > 7 ? MayFail.Success(5) : MayFail.Error(7))","import { Octokit, RequestError } from \"octokit\"\nimport { MayFail, TMayFail, err, success } from \"./mayfail\"\nimport { Gh1ApiError, Gh1ApiErrorEx, Gh1AutosaveErr, Gh1CustomState, Gh1MergeErr, Gh1OpenErr, Gh1HandInErr } from \"./types\"\nimport { GhEngineState, GhOpenPayload, HandInPayload } from \"./ghEngine\"\nimport { getSessionBranchName, pathURIEncode } from \"../githubStorage/utils\"\nimport { Base64 } from \"js-base64\"\n\nasync function octoProm<T>(p: Promise<T>): Promise<TMayFail<T, Gh1ApiErrorEx>> {\n  try {\n    const a = await p\n    return MayFail.Success<T, Gh1ApiErrorEx>(a)\n  } catch (e: any) {\n    if ('name' in e && 'message' in e) {\n      if (e.name === 'HttpError') {\n        const apiError = e as RequestError\n        return MayFail.Error<T, Gh1ApiErrorEx>({\n          reason: \"api_call_failed\",\n          message: `HTTP error: ${apiError.request.method} ${apiError.request.url} failed (${apiError.message})`,\n          apiError\n        })\n      }\n      return MayFail.Error<T, Gh1ApiErrorEx>({\n        reason: \"api_call_failed\",\n        message: `Exception during API call: ${e.name}: ${e.message}`\n      })\n    }\n    return MayFail.Error<T, Gh1ApiErrorEx>({\n      reason: \"api_call_failed\",\n      message: `API call ended with unknown error: ${e}`\n    })\n  }\n}\n\nexport class GhContext {\n  changeState: (newState: GhEngineState) => void\n  customState: Gh1CustomState\n  octokit: Octokit\n\n  constructor(authToken: string, changeState: (newState: GhEngineState) => void) {\n    this.octokit = new Octokit({\n      auth: authToken,\n      retry: {\n        doNotRetry: [\n          404, 405, 409, 422\n        ],\n      },\n      request: { retries: 0, retryAfter: 1 },\n      throttle: { enabled: false }\n    });\n    this.changeState = changeState\n    this.customState = {\n      canMerge: false,\n      undeletedMergedSession: false,\n      baseBranch: 'will be set'\n    }\n  }\n\n  async handIn(args: HandInPayload & {  addr: GhOpenPayload }) {\n    const { owner, repo, ref } = args.addr;\n    const { handInBranch, title, body } = args;\n    const operation = MayFail.do<Gh1HandInErr | Gh1ApiErrorEx>()\n      .assignV('repoInfo', await octoProm(\n        this.octokit.rest.repos.get({ owner, repo })\n      ))\n      .asyncAssignF('pullRequest', async scope => {\n        const { parent } = scope.repoInfo.data\n        if (parent === undefined) {\n          return MayFail.Error({\n            reason: 'no_parent',\n            message: 'Workbook opened from repository that has no parent'\n          })\n        }\n        return octoProm(\n          this.octokit.rest.pulls.create({\n            owner: parent.owner.login, repo,\n            base: handInBranch,\n            head: `${owner}:${ref}`,\n            title, body\n          })\n        )\n      })\n      return operation\n  }\n\n  async open(addr: GhOpenPayload) {\n    const { owner, repo, path } = addr;\n    return MayFail.do<Gh1OpenErr | Gh1ApiErrorEx>()\n      .assignV('branches', await octoProm(\n        this.octokit.paginate(this.octokit.rest.repos.listBranches, {\n          owner, repo, per_page: 100,\n          headers: { 'If-None-Match': '' } // disable caching\n        })\n      ))\n      .assignV('sheetBranch', await this.getSheetBranches2(addr))\n      .asyncAssignF('undeletedMergedSession', async scope => {\n        // check disabled, to decrease loading time\n        // this condition is checked before every commit\n        return MayFail.Success(false)\n        /*\n        const { sessionBranch } = scope.sheetBranch;\n        if (sessionBranch === undefined) {\n          return MayFail.Success(false)\n        } else {\n          //return this.isBranchMerged(addr, baseBranch.name, sessionBranch)\n          return this.isBranchMerged2(addr, sessionBranch.headId)\n        }\n        */\n      })\n      .asyncAssignF('file', async scope => {\n        const { baseBranch, sessionBranch } = scope.sheetBranch;\n        const ref = sessionBranch === undefined ? baseBranch.name : sessionBranch.name\n        return octoProm(this.octokit.rest.repos.getContent({\n          owner, repo, path, ref,\n          headers: { 'If-None-Match': '' } // disable caching\n        }))\n      })\n      .retF(scope => {\n        const { file } = scope;\n        const undeletedMergedSession = false;\n        const { baseBranch, sessionBranch } = scope.sheetBranch;\n        if (!('content' in file.data)) {\n          return err({\n            reason: 'not_found',\n            message: 'Workbook path refers to a directory.'\n          })\n        }\n        try {\n          const content = Base64.decode(file.data.content);\n          return success({\n            baseBranch, sessionBranch, content,\n            sha: file.data.sha,\n            undeletedMergedSession\n          })\n        } catch (e) {\n          return err({\n            reason: 'load_error',\n            message: 'Base64 content decoding failed.'\n          })\n        }\n      })\n      .transformError<Gh1OpenErr>(err => ({ ...err, apiError: undefined }))\n  }\n\n  async getSheetBranches2(addr: GhOpenPayload) {\n    // faster graphql version of getting sheet branches info,\n    // eliminates transfer of possibly big list with pull requests\n    const { owner, repo } = addr;\n    const baseBranch = addr.ref\n    const sessionBranch = getSessionBranchName(addr);\n\n    type ResponseType = {\n      repository: {\n        baseBranch: { name: string, target: { oid: string } } | null,\n        sessionBranch: { name: string, target: { oid: string } } | null,\n      }\n    }\n\n    return MayFail.do<Gh1OpenErr | Gh1ApiErrorEx>()\n      .assignV('branches', await octoProm(this.octokit.graphql(`\n        query getSheetBranches($owner: String!, $repo: String!, $baseBranch: String!, $sessionBranch: String!) {\n          repository(owner: $owner, name: $repo) {\n            baseBranch: ref(qualifiedName: $baseBranch) {\n              name\n              target {\n                ... on Commit {\n                  oid\n                }\n              }\n            }\n            sessionBranch: ref(qualifiedName: $sessionBranch) {\n              name\n              target {\n                ... on Commit {\n                  oid\n                }\n              }\n            }\n          }\n        }      \n        `,\n        {\n          owner, repo, baseBranch, sessionBranch,\n          headers: { 'If-None-Match': '' } // disable caching\n        }\n      )\n      ))\n      .retF(scope => {\n        const { baseBranch, sessionBranch } = (scope.branches as ResponseType).repository\n        if (baseBranch === null) {\n          return MayFail.Error({\n            reason: 'not_found',\n            message: 'The requested work sheet was not found in the repository. Check the file name, path, and branch.'\n          })\n        }\n        return MayFail.Success({\n          baseBranch: {\n            headId: baseBranch.target.oid,\n            name: baseBranch.name\n          },\n          sessionBranch: sessionBranch !== null ? {\n            name: sessionBranch.name,\n            headId: sessionBranch.target.oid\n          } : undefined\n        })\n      })\n  }\n\n  async createSessionBranch(args: { addr: GhOpenPayload, baseCommitId: string }) {\n    const { addr, baseCommitId } = args;\n    const { owner, repo } = addr;\n    const sessionBranchName = `refs/heads/${getSessionBranchName(args.addr)}`;\n    return MayFail.do<Gh1ApiErrorEx>()\n      .assignV('create', await octoProm(\n        this.octokit.rest.git.createRef({\n          owner, repo,\n          ref: sessionBranchName,\n          sha: baseCommitId\n        })\n      ))\n      .retF(scope => MayFail.Success({\n        name: getSessionBranchName(addr),\n        headId: scope.create.data.object.sha\n      }))\n      .transformError(err => {\n        if (err.reason === 'api_call_failed') {\n          const { apiError } = err\n          if (apiError?.status === 422\n            && (apiError?.response?.data as any).message === 'Reference already exists') {\n            const newErr: Gh1ApiError | { reason: 'background_update', message: string } = {\n              reason: 'background_update',\n              message: ''\n            }\n            return newErr;\n          }\n        }\n        return err;\n      })\n  }\n\n  async isBranchMerged2(args: { addr: GhOpenPayload, sessionBranchName: string, commitId: string }) {\n    // faster graphql version of getting sheet branches info,\n    // eliminates transfer of possibly big list with pull requests\n    const { addr, sessionBranchName, commitId } = args;\n    const { owner, repo } = addr;\n\n    type ReponseType = {\n      repository: { \n        object: { \n          associatedPullRequests: { \n            nodes: Array<{ \n              state: string, \n              headRefOid: string,\n              headRefName: string,\n            }> \n          } \n        } \n      }\n    }\n\n    return MayFail.do()\n      .assignV('pull', await octoProm(\n        this.octokit.graphql(`\n        query getPullRequestForCommit($owner: String!, $repo: String!, $commitId: GitObjectID!) {\n          repository(owner: $owner, name: $repo) {\n            object(oid: $commitId) {\n              ... on Commit {\n                associatedPullRequests(first: 1) {\n                  nodes {\n                    state,\n                    headRefOid,\n                    headRefName\n                  }\n                }\n              }\n            }\n          }\n        }\n        `, {\n          owner, repo, commitId,\n          headers: { 'If-None-Match': '' } // disable caching\n        })\n      ))\n      .retF(scope => {\n        console.log(scope)\n        const nodes = (scope.pull as ReponseType).repository.object.associatedPullRequests.nodes\n        console.log('Nodes', nodes)\n        if (nodes.find(p => p.state === 'MERGED' && p.headRefOid === commitId && p.headRefName === sessionBranchName) !== undefined) {\n          return MayFail.Success(true)\n        }\n        return MayFail.Success(false)\n      })\n  }\n\n  async isBranchMerged(args: { addr: GhOpenPayload, baseBranch: string, branch: { name: string, commitId: string } }) {\n    const { addr, baseBranch, branch } = args;\n    const { owner, repo } = addr;\n    const { name, commitId } = branch;\n    const t1 = performance.now()\n    return MayFail.do<Gh1ApiErrorEx>()\n      .assignV('pulls', await octoProm(\n        this.octokit.paginate(\n          this.octokit.rest.pulls.list, {\n          owner, repo,\n          state: 'closed',\n          per_page: 100,\n          headers: { 'If-None-Match': '' }\n        })\n      )).retF(scope => {\n        const { pulls } = scope;\n        for (let pull of pulls) {\n          if (pull.state === 'closed'\n            && pull.base.ref === baseBranch\n            && pull.head.ref === name\n            && pull.head.sha === commitId\n          ) {\n            console.log('IT TOOK', performance.now() - t1)\n            return MayFail.Success(true)\n          }\n        }\n        console.log('IT TOOK', performance.now() - t1)\n        return MayFail.Success(false)\n      })\n  }\n\n  async commit(args: { addr: GhOpenPayload, message: string, content: string, sessionBranchName: string, commitId: string, fileHash: string }) {\n    const { addr, sessionBranchName, commitId, content, fileHash, message } = args;\n    const { owner, repo, path } = addr;\n    console.log('in commit')\n    return MayFail.do<Gh1AutosaveErr | Gh1ApiErrorEx>()\n      .assignV('mergedSession', await this.isBranchMerged2({ addr, sessionBranchName, commitId }))\n      .retF(scope => {\n        if (scope.mergedSession === true) {\n          return MayFail.Error({\n            reason: \"merged_session\",\n            message: \"Session branch was merged, but not deleted\"\n          })\n        }\n        return MayFail.Success({});\n      })\n      .asyncAssignF('apiResult', _ => octoProm(\n        this.octokit.rest.repos.createOrUpdateFileContents({\n          owner, repo,\n          path: pathURIEncode(path),\n          message, content,\n          sha: fileHash,\n          branch: sessionBranchName,\n        })\n      )).retF(scope => {\n        return MayFail.Success({\n          newFileHash: scope.apiResult.data.content!.sha!,\n          newHeadId: scope.apiResult.data.commit.sha!,\n        })\n      })\n      .transformError<Gh1AutosaveErr | Gh1ApiErrorEx>(err => {\n        if (err.reason === 'api_call_failed') {\n          const { apiError } = err;\n          if (apiError?.status === 409) {\n            return {\n              reason: 'background_update',\n              message: 'Workbook file was updated in the background',\n            }\n          }\n        }\n        return err;\n      })\n      .transformError<Gh1AutosaveErr>(err => ({ ...err, apiError: undefined }))\n  }\n\n  async deleteMergedSession(args: { addr: GhOpenPayload, sessionBranch: string }) {\n    const { addr, sessionBranch } = args;\n    const { owner, repo } = addr;\n    return MayFail.do<Gh1ApiErrorEx>()\n      .assignV('deleteResult', await octoProm(\n        this.octokit.rest.git.deleteRef({\n          owner, repo,\n          ref: `heads/${pathURIEncode(sessionBranch)}`\n        }))\n      )\n      .retV(MayFail.Success(true))\n  }\n\n  async mergeSession(args: { addr: GhOpenPayload, sourceBranch: { name: string }, targetBranch: string }) {\n    const { addr, sourceBranch, targetBranch } = args;\n    const { owner, repo, path } = addr;\n    // parse filename from repo path\n    const filename = path.replace(/^([^/]*\\/)*([^/]+)\\.workbook$/, '$2');\n    let s = await MayFail.do<Gh1MergeErr | Gh1ApiErrorEx>()\n      // list all puls\n      .assignV('pulls', await octoProm(\n        this.octokit.paginate(\n          this.octokit.rest.pulls.list, {\n          owner,\n          repo,\n          state: 'open',\n          per_page: 100,\n          headers: { 'If-None-Match': '' }\n        })\n      )) // find already created pull or create new \n      .asyncAssignF('createdPull', async scope => {\n        const { pulls } = scope;\n        const pr = pulls.filter(pull => pull.base.ref === targetBranch && pull.head.ref === sourceBranch.name);\n        if (pr.length > 1) {\n          // this should not happen, github wont allow creation of same PR twice\n          return err({\n            reason: 'multiple_pulls',\n            message: 'The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch.',\n          })\n        } else if (pr.length === 1) {\n          // opened pull request from source to target branch already created\n          // lets use it\n          return success({ pullNumber: pr[0].number, pullUrl: pr[0].html_url, created: true })\n        } else {\n          // no pull request from source to target branch\n          // lets create one\n          return (await octoProm(\n            this.octokit.rest.pulls.create({\n              owner, repo,\n              title: `${filename}: Worksheet session`,\n              head: `refs/heads/${sourceBranch.name}`,\n              base: `refs/heads/${targetBranch}`,\n            })\n          )).retF(scope => success({\n            pullNumber: scope.data.number,\n            pullUrl: scope.data.html_url\n          }))\n        }\n      }) // perform merge\n      .asyncAssignF('mergeResult', async scope => {\n        console.log('merging')\n        let a = (await octoProm(\n          this.octokit.rest.pulls.merge({\n            owner, repo,\n            pull_number: scope.createdPull.pullNumber,\n            commit_title: `${filename}: Workbook session ${owner}/${repo}#${scope.createdPull.pullNumber}`,\n            commit_message: `See https://github.com/${owner}/${repo}/pull/${scope.createdPull.pullNumber}`,\n            merge_method: 'squash'\n          })\n        )).transformError<Gh1MergeErr>(err => {\n          console.log('merge error', err)\n          if (err.reason === 'api_call_failed') {\n            const { apiError } = err\n            if (apiError?.status === 405\n              /*&& apiError.message === 'Pull Request is not mergeable'*/) {\n              console.log('transforming error')\n              return {\n                reason: 'not_mergable',\n                message: '',\n                pullUrl: scope.createdPull.pullUrl\n              }\n            }\n          }\n          return err;\n        })\n        console.log('merging ended')\n        return a\n      }) // delete session branch\n      .asyncAssignF('deleteResult', async scope => {\n        await octoProm(\n          this.octokit.rest.git.deleteRef({\n            owner, repo,\n            ref: `heads/${pathURIEncode(sourceBranch.name)}`\n          })\n        )\n        // if everything before succeeded, and deleting of merged branch failed\n        // it is not reported as error, because from this state we can recover\n        // on any next commit or open\n        return success(true)\n      })\n      .retF(scope => MayFail.Success(scope.mergeResult.data.sha))\n      // strip apiError, because it cannot be transfered out of worker\n      .transformError<Gh1MergeErr>(err => ({ ...err, apiError: undefined }))\n    console.log('merging function ended')\n    return s\n  }\n}","import { AutosavePayload, LoadResult } from \"../workerApi\";\nimport { MayFail, TMayFail, success, err, ExtractErrorTypeV } from \"./mayfail\";\nimport { Base64 } from \"js-base64\";\nimport sha1 from \"sha1\";\nimport { Gh1ApiError, Gh1AutosaveErr, Gh1CustomState, Gh1MergeErr, Gh1OpenErr, Gh1ApiErrorEx, Gh1HandInErr } from \"./types\";\nimport { GhContext } from \"./ghContext\";\n\nexport interface GhOpenPayload {\n  owner: string,\n  repo: string,\n  path: string,\n  ref: string,\n  openAs?: string,\n}\n\nexport interface HandInPayload {\n  handInBranch: string\n  title?: string,\n  body?: string,\n}\n\ntype OpenResult = TMayFail<{\n  data: LoadResult,\n  customState: Gh1CustomState\n}, {\n  customError: Gh1OpenErr\n  customState: Gh1CustomState\n}>\n\ntype AutosaveResult = TMayFail<{\n  customState: Gh1CustomState\n}, {\n  customError: Gh1AutosaveErr\n  customState: Gh1CustomState\n}>\n\ntype MergeResult = TMayFail<{\n  customState: Gh1CustomState\n}, {\n  customError: Gh1MergeErr\n  customState: Gh1CustomState\n}>\n\ntype DeleteSessionResult = TMayFail<{\n  customState: Gh1CustomState\n}, {\n  customError: Gh1ApiError\n}>\n\ntype HandInResult = TMayFail<{\n  customState: Gh1CustomState\n}, {\n  customError: Gh1HandInErr\n}>\n\nexport abstract class GhEngineState {\n  context: GhContext\n  stateName: string\n  constructor(context: GhContext, name: string) {\n    this.context = context\n    this.stateName = name\n  }\n\n  abstract open(addr: GhOpenPayload): Promise<OpenResult>;\n  abstract autosave(payload: AutosavePayload): Promise<AutosaveResult>;\n  abstract merge(): Promise<MergeResult>;\n  abstract handIn(payload: HandInPayload): Promise<HandInResult>;\n  abstract deleteMergedSession(): Promise<DeleteSessionResult>\n}\n\nclass Initialized extends GhEngineState {\n  constructor(context: GhContext) {\n    super(context, 'Initialized')\n\n    this.context.customState = {\n      canMerge: false,\n      undeletedMergedSession: false,\n      baseBranch: '',\n      sessionBranch: ''\n    }\n  }\n\n  async open(addr: GhOpenPayload): Promise<OpenResult> {\n    return MayFail.do()\n      .assignV('data', await this.context.open(addr))\n      .retF(scope => {\n        const {\n          sessionBranch, baseBranch,\n          sha, content, undeletedMergedSession\n        } = scope.data;\n\n        // initialize custom state\n        this.context.customState = {\n          canMerge: sessionBranch !== undefined && undeletedMergedSession === false,\n          undeletedMergedSession,\n          baseBranch: baseBranch.name,\n          sessionBranch: sessionBranch?.name\n        }\n\n        // change state\n        this.context.changeState(\n          undeletedMergedSession\n            ? new UndeletedSession(this.context, { addr, baseBranch, sessionBranch: sessionBranch!.name, fileHash: sha })\n            : sessionBranch !== undefined\n              ? new SessionFull(this.context, addr, baseBranch, sessionBranch, sha)\n              : new SessionLess(this.context, addr, baseBranch, sha)\n        )\n\n        let filename = addr.path.split('/').splice(-1, 1)[0]\n        return MayFail.Success({\n          customState: this.context.customState,\n          data: {\n            filename,\n            json: content,\n            sheetId: sha1(JSON.stringify({\n              storageType: 'github', location: addr\n            }))\n          }\n        })\n      })\n      .transformError<ExtractErrorTypeV<OpenResult>>(error => {\n        return {\n          customError: error,\n          customState: this.context.customState\n        }\n      })\n  }\n  async autosave(payload: AutosavePayload): Promise<AutosaveResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async merge(): Promise<MergeResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async handIn(): Promise<HandInResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async deleteMergedSession(): Promise<DeleteSessionResult> {\n    throw new Error(\"Invalid action\");\n  }\n}\n\nclass UndeletedSession extends GhEngineState {\n  private stateInfo\n\n  constructor(context: GhContext, stateInfo: { addr: GhOpenPayload, baseBranch: { name: string, headId: string }, sessionBranch: string, fileHash: string }) {\n    super(context, 'UndeletedSession')\n    this.stateInfo = stateInfo\n\n    this.context.customState.undeletedMergedSession = true;\n  }\n\n  open(addr: GhOpenPayload): Promise<OpenResult> {\n    const newState = new Initialized(this.context)\n    this.context.changeState(newState)\n    return newState.open(addr);\n  }\n  async autosave(payload: AutosavePayload): Promise<AutosaveResult> {\n    return MayFail.Error({\n      customError: {\n        reason: \"merged_session\",\n        message: \"Session branch was merged and must be deleted\",\n      },\n      customState: this.context.customState\n    })\n  }\n  merge(): Promise<MergeResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async handIn(): Promise<HandInResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async deleteMergedSession(): Promise<DeleteSessionResult> {\n    return (await this.context.deleteMergedSession({\n      addr: this.stateInfo.addr,\n      sessionBranch: this.stateInfo.sessionBranch\n    }))\n      .retF(_ => {\n        this.context.customState.undeletedMergedSession = false;\n        this.context.customState.canMerge = false;\n        this.context.changeState(new SessionLess(this.context, this.stateInfo.addr, this.stateInfo.baseBranch, this.stateInfo.fileHash))\n        return MayFail.Success({\n          customState: this.context.customState\n        })\n      })\n      .transformError<Gh1ApiError>(error => ({ ...error, apiError: undefined }))\n      .transformError<ExtractErrorTypeV<DeleteSessionResult>>(error => ({\n        customError: error\n      }))\n  }\n\n}\n\nclass SessionLess extends GhEngineState {\n  private addr: GhOpenPayload\n  private baseBranch: { name: string, headId: string }\n  private fileHash: string\n  constructor(context: GhContext, addr: GhOpenPayload, baseBranch: { name: string, headId: string }, fileHash: string) {\n    super(context, 'SessionLess');\n    this.addr = addr;\n    this.baseBranch = baseBranch;\n    this.fileHash = fileHash\n  }\n  async open(addr: GhOpenPayload): Promise<OpenResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async autosave(payload: AutosavePayload): Promise<AutosaveResult> {\n    return await MayFail.do<Gh1AutosaveErr | Gh1ApiErrorEx>()\n      .assignV('sessionBranch', await this.context.createSessionBranch({\n        addr: this.addr,\n        baseCommitId: this.baseBranch.headId\n      }))\n      .transformError<ExtractErrorTypeV<AutosaveResult>>(error => ({\n        customError: { ...error, apiError: undefined },\n        customState: this.context.customState\n      }))\n      .asyncAssignF('autosave', async scope => {\n        this.context.customState.canMerge = true;\n        const newState = new SessionFull(this.context, this.addr, this.baseBranch, scope.sessionBranch, this.fileHash)\n        this.context.changeState(newState)\n        return newState.autosave(payload)\n      })\n      .retF(scope => success(scope.autosave))\n  }\n  async merge(): Promise<MergeResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async handIn(payload: HandInPayload): Promise<HandInResult> {\n    return (await this.context.handIn({addr: this.addr, ...payload}))\n      .retV(MayFail.Success({\n        customState: this.context.customState\n      }))\n      .transformError<{ customError: Gh1HandInErr }>(error => ({\n        customError: { ...error, apiError: undefined }\n      }))\n  }\n  async deleteMergedSession(): Promise<DeleteSessionResult> {\n    throw new Error(\"Invalid action\");\n  }\n}\n\nclass SessionFull extends GhEngineState {\n  private addr: GhOpenPayload\n  private baseBranch: { name: string, headId: string }\n  private sessionBranch: {\n    name: string,\n    headId: string,\n  }\n  private fileHash: string\n\n  constructor(context: GhContext, addr: GhOpenPayload, baseBranch: { name: string, headId: string }, sessionBranch: { name: string, headId: string }, fileHash: string) {\n    super(context, 'SessionFull');\n    this.addr = addr\n    this.baseBranch = baseBranch\n    this.sessionBranch = sessionBranch\n    this.fileHash = fileHash\n  }\n  async open(addr: GhOpenPayload): Promise<OpenResult> {\n    throw new Error(\"Invalid action\");\n  }\n  async autosave(payload: AutosavePayload): Promise<AutosaveResult> {\n    return MayFail.do()\n      .assignV('commit', await this.context.commit({\n        addr: this.addr,\n        message: payload.message,\n        content: Base64.encode(payload.serialized),\n        sessionBranchName: this.sessionBranch.name,\n        commitId: this.sessionBranch.headId,\n        fileHash: this.fileHash\n      })\n      )\n      .retF(scope => {\n        const { newFileHash, newHeadId } = scope.commit\n        this.fileHash = newFileHash\n        this.sessionBranch.headId = newHeadId\n        this.context.customState.canMerge = true\n        return MayFail.Success({\n          customState: this.context.customState\n        })\n      })\n      .transformError<ExtractErrorTypeV<AutosaveResult>>(error => {\n\n        if (error.reason === 'merged_session') {\n          this.context.changeState(new UndeletedSession(this.context, {\n            addr: this.addr,\n            baseBranch: this.baseBranch,\n            sessionBranch: this.sessionBranch.name,\n            fileHash: this.fileHash\n          }))\n        }\n\n        return {\n          customError: error,\n          customState: this.context.customState\n        }\n      })\n  }\n  async merge(): Promise<MergeResult> {\n    return MayFail.do<Gh1MergeErr>()\n      .assignV('mergeResult', await this.context.mergeSession({\n        addr: this.addr,\n        sourceBranch: this.sessionBranch,\n        targetBranch: this.baseBranch.name\n      }))\n      .retF(scope => {\n        console.log('Merge task successful')\n        this.context.customState.canMerge = false\n        this.context.changeState(new SessionLess(this.context, this.addr, { ...this.baseBranch, headId: scope.mergeResult }, this.fileHash))\n        return MayFail.Success({\n          customState: this.context.customState\n        })\n      })\n      .transformError<ExtractErrorTypeV<MergeResult>>(error => {\n        console.log('Merge task ended with error', error)\n        return {\n          customError: error,\n          customState: this.context.customState\n        }\n      })\n  }\n  async handIn(payload: HandInPayload): Promise<HandInResult> {\n    return (await this.context.handIn({addr: this.addr, ...payload}))\n      .retV(MayFail.Success({\n        customState: this.context.customState\n      }))\n      .transformError<{ customError: Gh1HandInErr }>(error => ({\n        customError: { ...error, apiError: undefined }\n      }))\n  }\n  async deleteMergedSession(): Promise<DeleteSessionResult> {\n    throw new Error(\"Invalid action\")\n  }\n}\n\nexport class GithubEngine {\n  state: GhEngineState\n  context: GhContext\n  constructor(authToken: string) {\n    this.context = new GhContext(authToken, newState => {\n      this.state = newState;\n    });\n    this.state = new Initialized(this.context)\n  }\n\n  async openCmd(addr: GhOpenPayload) {\n    return this.state.open(addr)\n  }\n  async deleteMergedSessionCmd() {\n    return this.state.deleteMergedSession()\n  }\n  async handInTask(payload: HandInPayload) {\n    return this.state.handIn(payload);\n  }\n  async autosaveTask(payload: AutosavePayload) {\n    return this.state.autosave(payload)\n  }\n  async mergeTask() {\n    return this.state.merge()\n  }\n}","import { StorageEngine } from \"../storageEngine\";\nimport { AutosavePayload, Command, Task } from \"../workerApi\";\nimport { GithubEngine, HandInPayload } from \"./ghEngine\";\nimport { TMayFail } from \"./mayfail\";\nimport { Gh1CustomState } from \"./types\";\n\nexport interface GhOpenPayload {\n  owner: string,\n  repo: string,\n  path: string,\n  ref: string,\n  openAs?: string,\n}\n\ntype RequestResult = {\n  result: 'success'\n  data?: any,\n  customState?: any\n} | {\n  result: 'error'\n  errorMessage: string,\n  customState: any,\n  customError: any,\n}\n\nfunction adapter<S, E extends { customError: {message: string}, customState?: Gh1CustomState }>(result: TMayFail<S, E>): RequestResult  {\n  console.log('Adapter result', result)\n  if (result.isSuccess()) {\n    return {\n      result: 'success',\n      ...result.value\n    }\n  } else {\n    return {\n      result: 'error',\n      errorMessage: result.value.customError.message,\n      customState: result.value.customState,\n      customError: result.value.customError,\n    }\n  }\n}\n\nexport function initGithubEngine(initPayload: any): StorageEngine {\n  const gh = new GithubEngine(initPayload.custom.ghToken)\n  const engine: StorageEngine = {\n    runCommand: async (cmd: Command) => {\n      console.log('Running command:',cmd)\n      switch (cmd.type) {\n        case 'load': {\n          return adapter(await gh.openCmd(cmd.payload as GhOpenPayload))\n        }\n        case 'init': {\n          return { result: 'success' }\n        }\n        case 'deleteMergedSession': {\n          return adapter(await gh.deleteMergedSessionCmd())\n        }\n        default:\n          throw new Error(\"Unknown command in github engine: \" + cmd.type)\n      }\n    },\n    runTask: async (task: Task) => {\n      console.log('Running task:',task)\n      switch (task.type) {\n        case 'autosave': {\n          return adapter(await gh.autosaveTask(task.payload as AutosavePayload))\n        }\n        case 'merge': {\n          return adapter(await gh.mergeTask())\n        }\n        case 'handIn': {\n          return adapter(await gh.handInTask(task.payload as HandInPayload))\n        }\n        default:\n          throw new Error(\"Unknown task in github engine: \" + task.type)\n      }\n    },\n  }\n  return engine;\n}","import { Language, SymbolWithArity } from \"@fmfi-uk-1-ain-412/js-fol-parser\";\nimport { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../../app/store\";\nimport { CellLocator, sheetSelectors } from \"./sheetSlice\";\n\nexport interface NamedFormula {\n  name: string,\n  formula: string,\n}\n\nexport interface Theorem extends NamedFormula {\n  prooved: boolean,\n}\n\nexport interface LogicContext {\n  constants: Array<string>,\n  predicates: Array<SymbolWithArity>,\n  functions: Array<SymbolWithArity>,\n\n  formulas: Array<NamedFormula>,\n  axioms: Array<NamedFormula>,\n  theorems: Array<Theorem>,\n}\nexport type ContextExtension = Partial<LogicContext>\n\nexport const emptyContext: LogicContext = {\n  constants: [], predicates: [], functions: [], formulas: [], axioms: [], theorems: []\n}\n\nexport function isEmptyFormula(f: NamedFormula) {\n  return f.name.trim() === '' && f.formula.trim() === '';\n}\n\nfunction mergeContexts(l1: ContextExtension, l2: ContextExtension): LogicContext {\n  return {\n    constants: (l1.constants || []).concat(l2.constants || []),\n    predicates: (l1.predicates || []).concat(l2.predicates || []),\n    functions: (l1.functions || []).concat(l2.functions || []),\n    formulas: (l1.formulas || []).concat(l2.formulas || []),\n    axioms: (l1.axioms || []).concat(l2.axioms || []),\n    theorems: (l1.theorems || []).concat(l2.theorems || []),\n  }\n}\n\nfunction prevCell(cell: CellLocator | undefined): (state: RootState) => CellLocator | undefined {\n  return (state: RootState) => {\n    if (cell) {\n      const cellsOrder = sheetSelectors.contextCellsList(cell)(state)\n      return cell.index - 1 < 0 ? undefined : { index: cell.index - 1, id: cellsOrder[cell.index - 1], contextId: cell.contextId }\n    } else {\n      return undefined;\n    }\n  }\n}\n\nconst cellContextExtension = (cellLoc: CellLocator) => (state: RootState) => state.sheet.present.sheetFile.cells[cellLoc.id].contextExtension;\n\nconst contextSelectorMemo: { [key: string]: (state: RootState) => CellContext } = {}\nexport function cellContext(cell: CellLocator): (state: RootState) => CellContext {\n  const key = JSON.stringify({id: cell.id, index: cell.index});\n  if (contextSelectorMemo[key] === undefined) {\n    contextSelectorMemo[key] = createSelector(\n      [\n        (state: RootState) => { const prev = prevCell(cell)(state); return prev === undefined ? undefined : cellContext(prev)(state) },\n        (state: RootState) => { const prev = prevCell(cell)(state); return prev === undefined ? undefined : cellContextExtension(prev)(state) },\n      ], (prevContext, prevExtension) => {\n        return new CellContext(mergeContexts(prevContext || emptyContext, prevExtension || emptyContext))\n      }\n    )\n  }\n  return contextSelectorMemo[key];\n}\n\nexport function clearContextMemo() {\n  for (let key of Object.keys(contextSelectorMemo)) {\n    delete contextSelectorMemo[key];\n  }\n}\n\nexport class CellContext implements LogicContext, Language {\n  private context: LogicContext\n  private symbolsLUT: Map<string, { arity: number, index: number, type: 'constant' | 'function' | 'predicate' | 'axiom' | 'formula' | 'theorem' }>\n\n  public get constants() { return this.context.constants }\n  public get predicates() { return this.context.predicates }\n  public get functions() { return this.context.functions }\n  public get formulas() { return this.context.formulas }\n  public get axioms() { return this.context.axioms }\n  public get theorems() { return this.context.theorems }\n\n  public get constantsExpr() { return this.context.constants.join(', ') }\n  public get predicatesExpr() { return this.context.predicates.map(s => `${s.name}/${s.arity}`).join(', ') }\n  public get functionsExpr() { return this.context.functions.map(s => `${s.name}/${s.arity}`).join(', ') }\n\n  constructor(context: LogicContext) {\n    this.context = context;\n    this.symbolsLUT = new Map();\n    context.constants.forEach((s, index) => this.symbolsLUT.set(s, { arity: 0, type: 'constant', index }))\n    context.predicates.forEach((s, index) => this.symbolsLUT.set(s.name, { arity: s.arity, type: 'predicate', index }))\n    context.functions.forEach((s, index) => this.symbolsLUT.set(s.name, { arity: s.arity, type: 'function', index }))\n    context.axioms.forEach((s, index) => this.symbolsLUT.set(s.name, { arity: 0, type: 'axiom', index }))\n    context.formulas.forEach((s, index) => this.symbolsLUT.set(s.name, { arity: 0, type: 'formula', index }))\n    context.theorems.forEach((s, index) => this.symbolsLUT.set(s.name, { arity: 0, type: 'theorem', index }))\n  }\n  logicContext() {\n    return this.context;\n  }\n  isConstant(symbol: string) {\n    return this.symbolsLUT.get(symbol)?.type === 'constant'\n  }\n  isPredicate(symbol: string) {\n    return this.symbolsLUT.get(symbol)?.type === 'predicate'\n  }\n  isFunction(symbol: string) {\n    return this.symbolsLUT.get(symbol)?.type === 'function'\n  }\n  isVariable(_: string) {\n    return true;\n  }\n  symbolExits(symbol: string) {\n    console.log('symbols exists ? ', symbol, this.symbolsLUT.has(symbol));\n    return this.symbolsLUT.has(symbol);\n  }\n  symbolArity(symbol: string) {\n    return this.symbolsLUT.get(symbol)?.arity\n  }\n  getFormula(name: string) {\n    const s = this.symbolsLUT.get(name);\n    switch (s?.type) {\n      case 'axiom':\n        return {\n          type: 'axiom',\n          name,\n          formula: this.axioms[s.index].formula\n        }\n      case 'theorem':\n        return {\n          type: 'theorem',\n          name,\n          formula: this.theorems[s.index].formula\n        }\n      case 'formula':\n        return {\n          type: 'formula',\n          name,\n          formula: this.formulas[s.index].formula\n        }\n      default:\n        return undefined;\n    }\n  }\n}","import { AnyAction, createEntityAdapter, createSlice, EntityState, PayloadAction } from \"@reduxjs/toolkit\";\nimport undoable, { includeAction } from \"redux-undo\";\nimport { AppDispatch, RootState } from '../../../app/store'\nimport { ContextExtension, cellContext, clearContextMemo } from \"./logicContext\";\nimport { deserializeWorkbook, serializeWorkbook } from \"./workbookFormat\";\nimport { WritableDraft } from \"immer/dist/internal\";\n\nexport interface CellComment {\n  id: number,\n  author: string,\n  timestamp: number,\n  text: string,\n}\n\nexport const commentsAdapter = createEntityAdapter({\n  sortComparer: (a: CellComment, b: CellComment) => a.timestamp - b.timestamp\n});\n\nexport interface Cell {\n  id: number,\n  type: string,\n  idCounter: number,\n  comments: EntityState<CellComment>,\n  data: any,\n  contextExtension?: ContextExtension,\n}\n\nexport interface SheetSettings {\n  katexMacros?: string\n  github?: {\n    editBranch: string,\n    handinBranch: string,\n  }\n}\n\nconst defaultSettings: SheetSettings = {\n  katexMacros: ''\n}\n\nexport interface SheetFile {\n  versionNumber?: number,\n  settings?: SheetSettings,\n  cells: { [key: number]: Cell },\n  cellsOrder: number[],\n}\n\nexport const emptySheet: SheetFile = {\n  versionNumber: 1,\n  cells: {},\n  cellsOrder: [],\n};\n\nexport interface LocalState {\n  sheetId: string,\n  cellIdCounter: number,\n  undoRedoCounter: number,\n  lastCreatedCellId?: number,\n}\n\nexport type SheetState = 'not_loaded' | 'loading' | 'loaded' | 'load_error';\n\nexport interface SheetSlice {\n  state: SheetState,\n  errorMessage?: string,\n  sheetFile: SheetFile,\n  localState: LocalState,\n  filename: string\n  import?: { json: string, error?: string }\n}\n\nconst initialState: SheetSlice = {\n  state: 'not_loaded',\n  sheetFile: emptySheet,\n  localState: {\n    cellIdCounter: 0,\n    undoRedoCounter: 0,\n    sheetId: 'initial',\n  },\n  filename: '',\n}\n\nexport const sheetSlice = createSlice({\n  name: 'sheet',\n  initialState,\n  reducers: {\n    setErrorMessage: (state, action: PayloadAction<{ message: string | undefined, newState: SheetState | undefined }>) => {\n      const { message, newState } = action.payload;\n      state.errorMessage = message;\n      if (newState !== undefined) {\n        state.state = newState;\n      }\n    },\n    startLoading: (state) => {\n      state.state = 'loading';\n    },\n    initFromJson: (state, action: PayloadAction<{ filename: string, json: string, sheetId: string }>) => {\n      const { filename, json, sheetId } = action.payload;\n\n      state.sheetFile = emptySheet;\n      state.filename = filename;\n      state.localState = {\n        ...initialState.localState,\n        sheetId\n      }\n\n      const res = importJson(state, json);\n      if (res === true) {\n        state.state = 'loaded';\n      } else {\n        state.state = \"load_error\";\n        state.errorMessage = res;\n      }\n    },\n    import: (state, action: PayloadAction<{ json: string }>) => {\n      const { json } = action.payload\n      const res = importJson(state, json);\n      if (res !== true) {\n        state.import = { json, error: `Importing failed: ${res}` }\n      } else {\n        state.import = undefined;\n        updateHistory(action, 'Imported workbook from file')\n      }\n    },\n    importWithWarning: (state, action: PayloadAction<{ json: string }>) => {\n      const { json } = action.payload;\n      state.import = { json };\n    },\n    clearImport: (state) => {\n      state.import = undefined\n    },\n    insertCell: (state, action: PayloadAction<{ after: CellLocator, type: string, data: any }>) => {\n      const { after, type, data } = action.payload;\n      const { index: afterIndex } = after;\n      const cellsOrder = getParentCellsOrder(state, after);\n      console.log('Inserting cell ', action);\n      if (afterIndex >= -2 && afterIndex < cellsOrder.length) {\n        const cell: Cell = {\n          id: state.localState.cellIdCounter,\n          type, data,\n          idCounter: 0,\n          comments: commentsAdapter.getInitialState(),\n        };\n\n        state.sheetFile.cells[cell.id] = cell;\n        if (afterIndex === -2) {\n          cellsOrder.push(cell.id);\n        } else {\n          cellsOrder.splice(afterIndex + 1, 0, cell.id);\n        }\n\n        state.localState.cellIdCounter += 1;\n        state.localState.lastCreatedCellId = cell.id;\n        updateHistory(action, `Created new cell of type '${type}'`)\n      } else {\n        console.log('Invalid afterIndex parameters for insertCell action. ' + action.payload);\n      }\n    },\n    duplicateCell: (state, action: PayloadAction<CellLocator>) => {\n      const { id: cellId, index: cellIndex, contextId } = action.payload;\n      const cellsOrder = getParentCellsOrder(state, action.payload);\n\n      const duplicateCell = (id: number) => {\n        const srcCell = state.sheetFile.cells[id];\n        const { type } = srcCell;\n        const data = JSON.parse(JSON.stringify(srcCell.data))\n        let contextExtension = undefined;\n        if (srcCell.contextExtension) {\n          contextExtension = JSON.parse(JSON.stringify(srcCell.contextExtension))\n        }\n\n        const newCell: Cell = {\n          id: state.localState.cellIdCounter,\n          type, data,\n          idCounter: 0,\n          comments: commentsAdapter.getInitialState(),\n          contextExtension,\n        };\n        state.localState.cellIdCounter += 1;\n        state.sheetFile.cells[newCell.id] = newCell;\n        return newCell.id;\n      }\n\n      if (state.sheetFile.cells[cellId] !== undefined) {\n        if (state.sheetFile.cells[cellId].type === 'context') {\n          const cid = duplicateCell(cellId);\n          cellsOrder.splice(cellIndex + 1, 0, cid);\n          let newCellsOrder: number[] = []\n          for (let id of state.sheetFile.cells[cellId].data as number[]) {\n            newCellsOrder.push(duplicateCell(id));\n          }\n          state.sheetFile.cells[cid].data = newCellsOrder;\n          updateHistory(action, `Duplicated context ${cellId}`)\n        } else {\n          cellsOrder.splice(cellIndex + 1, 0, duplicateCell(cellId));\n          updateHistory(action, `Duplicated cell ${cellId}`)\n        }\n      } else {\n        console.log('Invalid cellId parameter for duplicateCell action. ' + action.payload);\n      }\n    },\n    updateCellData: (state, action: PayloadAction<{ cellLoc: CellLocator, data: any }>) => {\n      const { cellLoc, data } = action.payload;\n      const { id: cellId } = cellLoc;\n      if (state.sheetFile.cells[cellId] !== undefined) {\n        state.sheetFile.cells[cellId].data = data;\n        console.log(`updating cell ${cellId} data`)\n        //console.log(data);\n        updateHistory(action, `Updated cell ${cellId}`)\n      } else {\n        console.log('Invalid cellId parameters for updateCellData action. ' + action.payload);\n      }\n    },\n    addCellComment: (state, action: PayloadAction<{ cellLoc: CellLocator, author: string, text: string }>) => {\n      const { cellLoc, author, text } = action.payload;\n      const { id: cellId } = cellLoc;\n      if (state.sheetFile.cells[cellId] !== undefined) {\n        const cell = state.sheetFile.cells[cellId];\n        const comment: CellComment = {\n          author, text, timestamp: new Date().getTime(), id: cell.idCounter++\n        }\n        commentsAdapter.addOne(cell.comments, comment);\n        updateHistory(action, `Added comment to cell ${cellId}`);\n      } else {\n        console.log('Invalid cellId parameters for addCellComment action. ' + action.payload);\n      }\n    },\n    updateCellComment: (state, action: PayloadAction<{ cellLoc: CellLocator, commentId: number, text: string }>) => {\n      const { cellLoc, commentId, text } = action.payload;\n      const { id: cellId } = cellLoc;\n      if (state.sheetFile.cells[cellId] !== undefined) {\n        const cell = state.sheetFile.cells[cellId];\n\n        commentsAdapter.updateOne(cell.comments, { id: commentId, changes: { text, timestamp: new Date().getTime() } })\n        updateHistory(action, `Updated comment ${commentId} in cell ${cellId}`);\n      } else {\n        console.log('Invalid cellId parameters for updateCellComment action. ' + action.payload);\n      }\n    },\n    moveUpCell: (state, action: PayloadAction<CellLocator>) => {\n      const { index: cellIndex } = action.payload;\n      const cellsOrder = getParentCellsOrder(state, action.payload);\n      if (cellIndex >= 1 && cellIndex < cellsOrder.length) {\n        const cellId = cellsOrder[cellIndex];\n        cellsOrder.splice(cellIndex, 1);\n        cellsOrder.splice(cellIndex - 1, 0, cellId);\n        updateHistory(action, `Moved up cell ${cellId}`);\n      } else {\n        console.log('Invalid cellIndex parameters for moveUpCell action. ' + action.payload);\n      }\n    },\n    moveDownCell: (state, action: PayloadAction<CellLocator>) => {\n      const { index: cellIndex } = action.payload;\n      const cellsOrder = getParentCellsOrder(state, action.payload);\n      if (cellIndex >= 0 && cellIndex < cellsOrder.length - 1) {\n        const cellId = cellsOrder[cellIndex];\n        cellsOrder.splice(cellIndex, 1);\n        cellsOrder.splice(cellIndex + 1, 0, cellId)\n        updateHistory(action, `Moved down cell ${cellId}`)\n      } else {\n        console.log('Invalid cellIndex parameters for moveDownCell action. ' + action.payload);\n      }\n    },\n    deleteCell: (state, action: PayloadAction<CellLocator>) => {\n      const { id: cellId, index: cellIndex } = action.payload;\n      const cellsOrder = getParentCellsOrder(state, action.payload);\n\n      if (cellIndex >= 0 && cellIndex < cellsOrder.length && state.sheetFile.cells[cellId] !== undefined) {\n        const deleteContextCells = (cid: number) => {\n          if (state.sheetFile.cells[cid].type === 'context') {\n            for (let nid of state.sheetFile.cells[cellId].data as number[]) {\n              deleteContextCells(nid);\n              delete state.sheetFile.cells[nid];\n            }\n          }\n        }\n        deleteContextCells(cellId);\n        delete state.sheetFile.cells[cellId];\n        cellsOrder.splice(cellIndex, 1);\n        updateHistory(action, `Removed cell ${cellId}`);\n      } else {\n        console.log(`Invalid payload values for cell deletion. (payload: ${action.payload})`);\n      }\n    },\n    deleteComment: (state, action: PayloadAction<{ cellLoc: CellLocator, commentId: number }>) => {\n      const { cellLoc, commentId } = action.payload;\n      const { id: cellId } = cellLoc;\n      if (state.sheetFile.cells[cellId] !== undefined) {\n        const cell = state.sheetFile.cells[cellId];\n        commentsAdapter.removeOne(cell.comments, commentId);\n        updateHistory(action, `Removed comment of cell ${cellId}`);\n      } else {\n        console.log(`Invalid cellId parameter for comment deletion. (payload: ${action.payload})`);\n      }\n    },\n    updateSettings: (state, action: PayloadAction<SheetSettings | undefined>) => {\n      state.sheetFile.settings = action.payload\n      updateHistory(action, 'Updated sheet settings');\n    },\n    syncUndoRedoCounter: (state, action: PayloadAction<number>) => {\n      state.localState.undoRedoCounter = action.payload;\n    },\n    extendLogicContext: (state, action: PayloadAction<{ cellLoc: CellLocator, contextExtension: ContextExtension }>) => {\n      const { cellLoc, contextExtension } = action.payload;\n      if (JSON.stringify(state.sheetFile.cells[cellLoc.id].contextExtension) !== JSON.stringify(contextExtension)) {\n        state.sheetFile.cells[cellLoc.id].contextExtension = contextExtension;\n        console.log('updating context of ', cellLoc);\n      }\n    },\n  }\n});\n\nfunction importJson(state: WritableDraft<SheetSlice>, json: string) {\n  const res = deserializeWorkbook(json);\n  if (res.result === 'success') {\n    const { sheetFile } = res;\n\n    const { localState } = state;\n    const sf = sheetFile as SheetFile;\n    state.sheetFile = sheetFile;\n\n    // initialize cellIdCounter with max cell id + 1\n    localState.cellIdCounter = Object.entries(sf.cells).map(e => e[1].id).reduce((prev, cur) => Math.max(prev, cur), 0) + 1\n    return true;\n  } else {\n    return res.message;\n  }\n}\n\nexport function getParentCellsOrder(state: WritableDraft<SheetSlice>, { contextId }: CellLocator): number[] {\n  if (contextId === -1) {\n    return state.sheetFile.cellsOrder;\n  } else {\n    const cellsOrder = state.sheetFile.cells[contextId].data as Array<number>;\n    if (cellsOrder === undefined) {\n      throw Error('getParentCellsList: unknown context id');\n    }\n    return cellsOrder;\n  }\n}\n\n// Notifies storage middleware about update, which will create autosave task.\nfunction updateHistory(action: AnyAction, message: string) {\n  if ('historyChanged' in action) {\n    (action as unknown as { historyChanged: (msg: string) => void }).historyChanged(message);\n  } else {\n    console.error('Storage middleware not applied');\n  }\n}\n\nconst addCellComment = function (payload: { cellLoc: CellLocator, text: string }) {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const state = getState();\n    if (state.auth.user) {\n      const author = state.auth.user.login;\n      const { cellLoc, text } = payload;\n      dispatch(sheetSlice.actions.addCellComment({ cellLoc, author, text }));\n    }\n  }\n}\n\nconst remmoveCellComment = function (payload: { cellLoc: CellLocator, commentId: number }) {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const state = getState();\n    const { cellLoc, commentId } = payload;\n    const { id: cellId } = cellLoc\n    const cell = state.sheet.present.sheetFile.cells[cellId]\n    if (cell !== undefined) {\n      if (state.auth.user) {\n        const user = state.auth.user.login;\n        const comment = commentsAdapter.getSelectors().selectById(cell.comments, commentId);\n        if (comment) {\n          if (comment.author === user) {\n            dispatch(sheetSlice.actions.deleteComment({ cellLoc, commentId }));\n          } else {\n            console.log('You can delete only your own comments. ' + payload);\n          }\n        } else {\n          console.log('Invalid commentId parameter for removeCellComment action. ' + payload);\n        }\n      } else {\n        console.log('Auth state error, can\\'t use remmoveCellComment' + payload);\n      }\n    } else {\n      console.log('Invalid cellId parameter for removeCellComment action. ' + payload);\n    }\n  }\n}\n\nexport function importFromFile() {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.workbook,application/json';\n    input.onchange = _ => {\n      if (input.files !== null) {\n        // some file was selected\n        const file = input.files[0]\n        const fileReader = new FileReader();\n        fileReader.onload = e => {\n          const json = e.target?.result;\n          if (typeof json === 'string') {\n            dispatch(sheetActions.import({ json }));\n          } else {\n            console.error('Import failed. File reader result:', e.target?.result)\n          }\n        }\n        fileReader.readAsText(file)\n      }\n    };\n    input.click();\n  }\n}\n\nexport function downloadSheet() {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const state = getState();\n    const serialized = serializeWorkbook(state.sheet.present.sheetFile)\n    const url = window.URL.createObjectURL(new Blob([serialized], { type: 'application/json' }));\n    const link = document.createElement('a');\n    link.setAttribute('download', state.sheet.present.filename);\n    link.href = url;\n    link.click();\n    link.remove();\n  }\n}\n\nfunction initSheet(filename: string, json: string, sheetId: string) {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    clearContextMemo();\n    dispatch(sheetActions.initFromJson({ filename, json, sheetId }));\n  }\n}\n\n/* Actions */\nconst insertTextCell = (text: string, after: CellLocator) => sheetActions.insertCell({ after, type: 'text', data: text })\nconst insertAppCell = (type: string, state: any, after: CellLocator) => sheetActions.insertCell({ after, type, data: state })\nexport const sheetActions = { ...sheetSlice.actions, addCellComment, remmoveCellComment, insertTextCell, insertAppCell, initSheet };\n\nexport interface CellLocator {\n  id: number,\n  index: number,\n  contextId: number,\n}\n\n/* Selectors */\nexport const sheetSelectors = {\n  filename: (state: RootState) => state.sheet.present.filename,\n  state: (state: RootState) => state.sheet.present.state,\n  sheetId: (state: RootState) => state.sheet.present.localState.sheetId,\n  error: (state: RootState) => state.sheet.present.errorMessage,\n  cellsOrder: (state: RootState) => state.sheet.present.sheetFile.cellsOrder,\n  cells: (state: RootState) => state.sheet.present.sheetFile.cells,\n  cell: (cellLoc: CellLocator) => { return (state: RootState) => state.sheet.present.sheetFile.cells[cellLoc.id] },\n  sheetSettings: (state: RootState) => state.sheet.present.sheetFile.settings || defaultSettings,\n  firstCellId: (state: RootState) => state.sheet.present.sheetFile.cellsOrder.length === 0 ? -1 : state.sheet.present.sheetFile.cellsOrder[0],\n  lastCellId: (state: RootState) => state.sheet.present.sheetFile.cellsOrder.length === 0 ? -1 : state.sheet.present.sheetFile.cellsOrder[state.sheet.present.sheetFile.cellsOrder.length - 1],\n  cellComments: (cellLoc: CellLocator) => { return (state: RootState) => commentsAdapter.getSelectors().selectAll(state.sheet.present.sheetFile.cells[cellLoc.id].comments) },\n  undoRedoCounter: (state: RootState) => state.sheet.present.localState.undoRedoCounter,\n  lastCreatedCellId: (state: RootState) => state.sheet.present.localState.lastCreatedCellId,\n  logicContext: (cell: CellLocator) => cellContext(cell),\n  contextCellsList: (cellLoc: CellLocator) => { return (state: RootState) => getParentCellsOrder(state.sheet.present, cellLoc) },\n  importInfo: (state: RootState) => state.sheet.present.import,\n}\n\nexport default undoable(sheetSlice.reducer, {\n  filter: includeAction([\n    'sheet/insertCell',\n    'sheet/duplicateCell',\n    'sheet/updateCellData',\n    'sheet/addCellComment',\n    'sheet/updateCellComment',\n    'sheet/moveUpCell',\n    'sheet/moveDownCell',\n    'sheet/deleteCell',\n    'sheet/deleteComment',\n    'sheet/updateSettings',\n    'sheet/import'\n  ])\n});","import { ContextExtension } from \"./logicContext\";\nimport { Cell, SheetFile, SheetSettings, commentsAdapter } from \"./sheetSlice\";\nimport lodash from \"lodash\"\n\nexport function serializeWorkbook(workbook: SheetFile) {\n  return JSON.stringify(workbook, null, 2)\n}\n\nexport function deserializeWorkbook(workbook: string)\n  : { result: 'success', sheetFile: SheetFile }\n  | { result: 'error', message: string } {\n  try {\n    var sheetFile = JSON.parse(workbook);\n    if (typeof sheetFile !== 'object') {\n      return {\n        result: 'error',\n        message: `Parsed JSON has to be object, it is ${typeof sheetFile}`\n      }\n    }\n  } catch (e) {\n    const syntaxErr = e as SyntaxError\n    return {\n      result: 'error',\n      message: `JSON parse failed: ${syntaxErr}`\n    }\n  }\n\n  if ('versionNumber' in sheetFile && sheetFile.versionNumber === 2) {\n    try {\n      sheetFile = deserializeWorkbook2(sheetFile);\n    } catch (e) {\n      return {\n        result: 'error',\n        message: `Error while deserializing simplified format ${e}`\n      }\n    }\n  }\n\n  const { passed, error } = testSheetIntegrity(sheetFile);\n  if (passed) {\n    return { result: 'success', sheetFile }\n  } else {\n    return {\n      result: 'error',\n      message: error!\n    }\n  }\n}\n\nexport function testSheetIntegrity(sheet: SheetFile): { passed: boolean, error?: string } {\n  let error = undefined;\n\n  /* test keys and types of sheet object */\n  const reqKeys: { [key: string]: string } = {\n    'cells': 'object',\n    'cellsOrder': 'object',\n  }\n  /* optional keys */\n  const optKeys: { [key: string]: string } = {\n    /* now unused --> */\n    'idCounter': 'number',\n    'editedCellId': 'number',\n    'firstCellId': 'number',\n    'lastCellId': 'number',\n    /* <-- */\n    'versionNumber': 'number',\n    'settings': 'object',\n  }\n\n  /* check for presence of required keys */\n  for (const [key] of Object.entries(reqKeys)) {\n    if (!(key in sheet)) {\n      error = `Chýba kľúč '${key}'`;\n      break;\n    }\n  }\n  if (error) return { passed: false, error };\n\n  for (const [key, value] of Object.entries(sheet)) {\n    const keyType = key in reqKeys ? 'REQUIRED' : (key in optKeys ? 'OPTIONAL' : 'UNKNOWN')\n    if (keyType === 'REQUIRED' || keyType === 'OPTIONAL') {\n      const expectedType = keyType === 'REQUIRED' ? reqKeys[key] : optKeys[key]\n      if (typeof value !== expectedType) {\n        error = `Kľúč '${key}' je nesprávneho typu`;\n        break;\n      }\n    } else {\n      error = `Neznámi Kľúč '${key}'`;\n      break;\n    }\n  }\n  if (error) return { passed: false, error };\n\n  /* TODO? Cell and CellComment keys test */\n\n  /* cellsOrder has no duplicates */\n  if (new Set(sheet.cellsOrder).size !== sheet.cellsOrder.length) {\n    error = 'Poradie buniek obsahuje duplicitné hodnoty';\n  }\n  if (error) return { passed: false, error };\n\n  /* cellsOrder contains only existing cell ids */\n  for (const id of sheet.cellsOrder) {\n    if (!(id in sheet.cells)) {\n      error = 'Poradie buniek obsahuje neexistujúce id';\n      break;\n    }\n  }\n  if (error) return { passed: false, error };\n\n  return { passed: true }\n}\n\n\ninterface SimplifiedFormat {\n  versionNumber: 2,\n  settings?: SheetSettings,\n  cells: Array<{\n    id: number,\n    type: string,\n    comments: Array<{\n      id: number,\n      author: string,\n      timestamp: number,\n      text: string\n    }>\n    data: any,\n    contextExtension?: ContextExtension,\n  }>,\n}\ntype ArrayItemType<T> = T extends Array<infer U> ? U : never\ntype SimplifiedCell = ArrayItemType<SimplifiedFormat['cells']>\ntype SimplifiedComment = ArrayItemType<ArrayItemType<SimplifiedFormat['cells']>['comments']>\n\n\nfunction simplifyContext(cellsOrder: number[], cells: SheetFile['cells']): SimplifiedCell[] {\n  const result: SimplifiedCell[] = []\n  for (let cellId of cellsOrder) {\n    const wcell = cells[cellId]\n    const comments: SimplifiedComment[] = commentsAdapter\n      .getSelectors()\n      .selectAll(wcell.comments)\n\n    const {\n      idCounter: _1,\n      comments: _2,\n      ...simplifiedCell\n    } = wcell\n\n    const cell: SimplifiedCell = {\n      ...simplifiedCell,\n      data: wcell.type === 'context'\n        ? simplifyContext(wcell.data, cells)\n        : simplifiedCell.data,\n      comments\n    }\n    result.push(cell);\n\n  }\n  return result;\n}\n\nexport function serializeWorkbook2(workbook: SheetFile) {\n  const content: SimplifiedFormat = {\n    versionNumber: 2,\n    settings: workbook.settings,\n    cells: simplifyContext(workbook.cellsOrder, workbook.cells)\n  }\n  return JSON.stringify(content, null, 2)\n}\n\nfunction convertContext(simplifiedContext: SimplifiedCell[], cells: SheetFile['cells']): number[] {\n  const cellsOrder: number[] = [];\n  for (let sCell of simplifiedContext) {\n    cellsOrder.push(sCell.id);\n    const comments: Cell['comments'] = commentsAdapter.addMany(\n      commentsAdapter.getInitialState(), \n      sCell.comments\n    )\n    const { comments: _, ...cell } = sCell;\n    cells[sCell.id] = {\n      ...cell,\n      data: sCell.type === 'context'\n        ? convertContext(sCell.data as SimplifiedCell[], cells)\n        : sCell.data,\n      idCounter: Math.max(-1, ...sCell.comments.map(c => c.id)) + 1,\n      comments\n    }\n  }\n  return cellsOrder\n}\n\nexport function deserializeWorkbook2(workbook: SimplifiedFormat): SheetFile {\n  const cells: SheetFile['cells'] = {}\n  const cellsOrder = convertContext(workbook.cells, cells)\n\n  return {\n    versionNumber: 2,\n    settings: workbook.settings,\n    cells, cellsOrder\n  }\n}\n\nexport function compareSheetFiles(s1: SheetFile, s2: SheetFile) {\n  if (!lodash.isEqual(s1.cellsOrder, s2.cellsOrder)) {\n    console.error('Sheet comparison: different cellsOrder')\n    return false;\n  }\n  if (!lodash.isEqual(s1.settings, s2.settings)) {\n    console.error('Sheet comparison: different settings')\n    return false;\n  }\n  if (!lodash.isEqual(Object.keys(s1.cells), Object.keys(s2.cells))) {\n    console.error('Sheet comparison: keys in cell object')\n    return false;\n  }\n  for (let cell1 of Object.values(s1.cells)) {\n    const cell2 = s2.cells[cell1.id];\n    const { idCounter: _1, comments: comments1, ...cellCmp1 } = cell1\n    const { idCounter: _2, comments: comments2, ...cellCmp2 } = cell2\n    const commentsCmp1 = commentsAdapter.getSelectors().selectAll(comments1)\n    const commentsCmp2 = commentsAdapter.getSelectors().selectAll(comments2)\n    if (cell1.idCounter < 0 || cell2.idCounter < 0) {\n      console.error('Sheet comparison: invalid idCounter in cell', cell1.id)\n      return false;\n    }\n    if (!lodash.isEqual(cellCmp1, cellCmp2)) {\n      console.error('Sheet comparison: different cells with id', cell1.id)\n      return false;\n    }\n    if (!lodash.isEqual(commentsCmp1, commentsCmp2)) {\n      console.error('Sheet comparison: different comments in cell with id', cell1.id)\n      return false;\n    }\n  }\n  return true;\n}","/* eslint-disable no-restricted-globals */\n\nimport { StorageEngine } from \"./storageEngine\";\nimport { AutosaveTask, EngineMessage, Task } from \"./workerApi\";\n\nimport { initGithubEngine } from \"./githubStorage/engine\";\nimport { initGithubEngine as initGhEngine1 } from \"./githubStorage1/adapter\";\nimport { serializeWorkbook } from \"../features/sheet/slice/workbookFormat\";\n\nlet storageEngine: StorageEngine\nself.onmessage = async (e: MessageEvent<{msg: EngineMessage, requestId: number}>) => {\n  const {msg, requestId} = e.data;\n\n  if (msg.type === 'runCommand' && msg.command.type === 'init') {\n    switch(msg.command.payload.engineType) {\n      case 'github':\n        storageEngine = initGithubEngine(msg.command.payload)\n        break\n      case 'github1':\n          storageEngine = initGhEngine1(msg.command.payload)\n          break\n      default: \n        throw new Error('Unknown engine type')\n    }\n  }\n\n  if (msg.type === 'runTask' && msg.task.type === 'autosave') {\n    // serialize workbook object\n    const autosaveTask = msg.task as AutosaveTask\n    autosaveTask.payload.serialized = serializeWorkbook(autosaveTask.payload.contentObj)\n  }\n\n  if (msg.type === 'runCommand') {\n    const result = await storageEngine.runCommand(msg.command)\n    postMessage({requestId, result})\n  } else if (msg.type === 'runTask') {\n    const result = await storageEngine.runTask(msg.task)\n    postMessage({requestId, result})\n  }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [197], () => (__webpack_require__(50618)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"5019673c\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/workbook/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t484: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkworkbook\"] = self[\"webpackChunkworkbook\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(197).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","getState","accessToken","sheetStorage","ghToken","append","cache","async","args","api","extraOptions","githubApiParseLastPage","link","lastPage","split","forEach","item","parts","match","undefined","test","parseInt","githubApi","createApi","reducerPath","githubBaseQuery","tagTypes","endpoints","build","reposListForUserHeaders","query","queryArg","url","username","method","params","type","sort","direction","per_page","perPage","page","transformResponse","apiResponse","meta","response","get","reposListForAuthenticatedUserHeaders","visibility","affiliation","since","before","searchReposHeaders","q","order","reposListBranchesHeaders","owner","repo","protected","reposListAllBranches","onQueryStarted","dispatch","queryFulfilled","updateCachedData","initiate","isSuccess","data","result","console","log","extraBranches","recipe","concat","err","reposMergeWithResponseCode","mutation","body","baseQueryReturnValue","arg","status","reposRenameBranchWithResponseCode","reponse","useReposListForUserHeadersQuery","useReposListForAuthenticatedUserHeadersQuery","useSearchReposHeadersQuery","useReposListBranchesHeadersQuery","useReposListAllBranchesQuery","injectedRtkApi","gitignoreGetAllTemplates","gitignoreGetTemplate","name","gitCreateBlob","gitGetBlob","fileSha","gitCreateCommit","gitGetCommit","commitSha","gitListMatchingRefs","ref","gitGetRef","gitCreateRef","invalidatesTags","gitUpdateRef","gitDeleteRef","gitCreateTag","gitGetTag","tagSha","gitCreateTree","gitGetTree","treeSha","recursive","overrideExisting","useGitignoreGetAllTemplatesQuery","useGitignoreGetTemplateQuery","useGitCreateBlobMutation","useGitGetBlobQuery","useGitCreateCommitMutation","useGitGetCommitQuery","useGitListMatchingRefsQuery","useGitGetRefQuery","useGitCreateRefMutation","useGitUpdateRefMutation","useGitDeleteRefMutation","useGitCreateTagMutation","useGitGetTagQuery","useGitCreateTreeMutation","useGitGetTreeQuery","pullsList","state","head","base","providesTags","pullsListWH","value","key","pullsCreate","pullsListReviewCommentsForRepo","pullsGetReviewComment","commentId","pullsUpdateReviewComment","pullsDeleteReviewComment","pullsGet","pullNumber","pullsUpdate","pullsListReviewComments","pullsCreateReviewComment","pullsCreateReplyForReviewComment","pullsListCommits","pullsListFiles","pullsCheckIfMerged","pullsMerge","pullsListRequestedReviewers","pullsRequestReviewers","pullsRemoveRequestedReviewers","pullsListReviews","pullsCreateReview","pullsGetReview","reviewId","pullsUpdateReview","pullsDeletePendingReview","pullsListCommentsForReview","pullsDismissReview","pullsSubmitReview","pullsUpdateBranch","usePullsListQuery","usePullsCreateMutation","usePullsListReviewCommentsForRepoQuery","usePullsGetReviewCommentQuery","usePullsUpdateReviewCommentMutation","usePullsDeleteReviewCommentMutation","usePullsGetQuery","usePullsUpdateMutation","usePullsListReviewCommentsQuery","usePullsCreateReviewCommentMutation","usePullsCreateReplyForReviewCommentMutation","usePullsListCommitsQuery","usePullsListFilesQuery","usePullsCheckIfMergedQuery","usePullsMergeMutation","usePullsListRequestedReviewersQuery","usePullsRequestReviewersMutation","usePullsRemoveRequestedReviewersMutation","usePullsListReviewsQuery","usePullsCreateReviewMutation","usePullsGetReviewQuery","usePullsUpdateReviewMutation","usePullsDeletePendingReviewMutation","usePullsListCommentsForReviewQuery","usePullsDismissReviewMutation","usePullsSubmitReviewMutation","usePullsUpdateBranchMutation","reposListForOrg","org","reposCreateInOrg","reposGet","reposUpdate","reposDelete","reposListAutolinks","reposCreateAutolink","reposGetAutolink","autolinkId","reposDeleteAutolink","reposEnableAutomatedSecurityFixes","reposDisableAutomatedSecurityFixes","reposListBranches","reposGetBranch","branch","reposGetBranchProtection","reposUpdateBranchProtection","reposDeleteBranchProtection","reposGetAdminBranchProtection","reposSetAdminBranchProtection","reposDeleteAdminBranchProtection","reposGetPullRequestReviewProtection","reposUpdatePullRequestReviewProtection","reposDeletePullRequestReviewProtection","reposGetCommitSignatureProtection","reposCreateCommitSignatureProtection","reposDeleteCommitSignatureProtection","reposGetStatusChecksProtection","reposUpdateStatusCheckProtection","reposRemoveStatusCheckProtection","reposGetAllStatusCheckContexts","reposAddStatusCheckContexts","reposSetStatusCheckContexts","reposRemoveStatusCheckContexts","reposGetAccessRestrictions","reposDeleteAccessRestrictions","reposGetAppsWithAccessToProtectedBranch","reposAddAppAccessRestrictions","reposSetAppAccessRestrictions","reposRemoveAppAccessRestrictions","reposGetTeamsWithAccessToProtectedBranch","reposAddTeamAccessRestrictions","reposSetTeamAccessRestrictions","reposRemoveTeamAccessRestrictions","reposGetUsersWithAccessToProtectedBranch","reposAddUserAccessRestrictions","reposSetUserAccessRestrictions","reposRemoveUserAccessRestrictions","reposRenameBranch","reposCodeownersErrors","reposListCollaborators","reposCheckCollaborator","reposAddCollaborator","reposRemoveCollaborator","reposGetCollaboratorPermissionLevel","reposListCommitCommentsForRepo","reposGetCommitComment","reposUpdateCommitComment","reposDeleteCommitComment","reposListCommits","sha","path","author","until","reposListBranchesForHeadCommit","reposListCommentsForCommit","reposCreateCommitComment","reposListPullRequestsAssociatedWithCommit","reposGetCommit","reposGetCombinedStatusForRef","reposListCommitStatusesForRef","reposGetCommunityProfileMetrics","reposCompareCommits","basehead","reposGetContent","reposCreateOrUpdateFileContents","maxRetries","reposDeleteFile","reposListContributors","anon","reposListDeployments","task","environment","reposCreateDeployment","reposGetDeployment","deploymentId","reposDeleteDeployment","reposListDeploymentStatuses","reposCreateDeploymentStatus","reposGetDeploymentStatus","statusId","reposCreateDispatchEvent","reposGetAllEnvironments","reposGetEnvironment","environmentName","reposCreateOrUpdateEnvironment","reposDeleteAnEnvironment","reposListForks","reposCreateFork","reposListWebhooks","reposCreateWebhook","reposGetWebhook","hookId","reposUpdateWebhook","reposDeleteWebhook","reposGetWebhookConfigForRepo","reposUpdateWebhookConfigForRepo","reposListWebhookDeliveries","cursor","reposGetWebhookDelivery","deliveryId","reposRedeliverWebhookDelivery","reposPingWebhook","reposTestPushWebhook","reposListInvitations","reposUpdateInvitation","invitationId","reposDeleteInvitation","reposListDeployKeys","reposCreateDeployKey","reposGetDeployKey","keyId","reposDeleteDeployKey","reposListLanguages","reposEnableLfsForRepo","reposDisableLfsForRepo","reposMergeUpstream","reposMerge","reposGetPages","reposCreatePagesSite","reposUpdateInformationAboutPagesSite","reposDeletePagesSite","reposListPagesBuilds","reposRequestPagesBuild","reposGetLatestPagesBuild","reposGetPagesBuild","buildId","reposGetPagesHealthCheck","reposGetReadme","reposGetReadmeInDirectory","dir","reposListReleases","reposCreateRelease","reposGetReleaseAsset","assetId","reposUpdateReleaseAsset","reposDeleteReleaseAsset","reposGenerateReleaseNotes","reposGetLatestRelease","reposGetReleaseByTag","tag","reposGetRelease","releaseId","reposUpdateRelease","reposDeleteRelease","reposListReleaseAssets","reposUploadReleaseAsset","label","reposGetCodeFrequencyStats","reposGetCommitActivityStats","reposGetContributorsStats","reposGetParticipationStats","reposGetPunchCardStats","reposCreateCommitStatus","reposListTags","reposDownloadTarballArchive","reposListTeams","reposGetAllTopics","reposReplaceAllTopics","reposGetClones","per","reposGetTopPaths","reposGetTopReferrers","reposGetViews","reposTransfer","reposCheckVulnerabilityAlerts","reposEnableVulnerabilityAlerts","reposDisableVulnerabilityAlerts","reposDownloadZipballArchive","reposCreateUsingTemplate","templateOwner","templateRepo","reposListPublic","reposListForAuthenticatedUser","reposCreateForAuthenticatedUser","reposListInvitationsForAuthenticatedUser","reposAcceptInvitationForAuthenticatedUser","reposDeclineInvitationForAuthenticatedUser","reposListForUser","useReposListForOrgQuery","useReposCreateInOrgMutation","useReposGetQuery","useReposUpdateMutation","useReposDeleteMutation","useReposListAutolinksQuery","useReposCreateAutolinkMutation","useReposGetAutolinkQuery","useReposDeleteAutolinkMutation","useReposEnableAutomatedSecurityFixesMutation","useReposDisableAutomatedSecurityFixesMutation","useReposListBranchesQuery","useReposGetBranchQuery","useReposGetBranchProtectionQuery","useReposUpdateBranchProtectionMutation","useReposDeleteBranchProtectionMutation","useReposGetAdminBranchProtectionQuery","useReposSetAdminBranchProtectionMutation","useReposDeleteAdminBranchProtectionMutation","useReposGetPullRequestReviewProtectionQuery","useReposUpdatePullRequestReviewProtectionMutation","useReposDeletePullRequestReviewProtectionMutation","useReposGetCommitSignatureProtectionQuery","useReposCreateCommitSignatureProtectionMutation","useReposDeleteCommitSignatureProtectionMutation","useReposGetStatusChecksProtectionQuery","useReposUpdateStatusCheckProtectionMutation","useReposRemoveStatusCheckProtectionMutation","useReposGetAllStatusCheckContextsQuery","useReposAddStatusCheckContextsMutation","useReposSetStatusCheckContextsMutation","useReposRemoveStatusCheckContextsMutation","useReposGetAccessRestrictionsQuery","useReposDeleteAccessRestrictionsMutation","useReposGetAppsWithAccessToProtectedBranchQuery","useReposAddAppAccessRestrictionsMutation","useReposSetAppAccessRestrictionsMutation","useReposRemoveAppAccessRestrictionsMutation","useReposGetTeamsWithAccessToProtectedBranchQuery","useReposAddTeamAccessRestrictionsMutation","useReposSetTeamAccessRestrictionsMutation","useReposRemoveTeamAccessRestrictionsMutation","useReposGetUsersWithAccessToProtectedBranchQuery","useReposAddUserAccessRestrictionsMutation","useReposSetUserAccessRestrictionsMutation","useReposRemoveUserAccessRestrictionsMutation","useReposRenameBranchMutation","useReposCodeownersErrorsQuery","useReposListCollaboratorsQuery","useReposCheckCollaboratorQuery","useReposAddCollaboratorMutation","useReposRemoveCollaboratorMutation","useReposGetCollaboratorPermissionLevelQuery","useReposListCommitCommentsForRepoQuery","useReposGetCommitCommentQuery","useReposUpdateCommitCommentMutation","useReposDeleteCommitCommentMutation","useReposListCommitsQuery","useReposListBranchesForHeadCommitQuery","useReposListCommentsForCommitQuery","useReposCreateCommitCommentMutation","useReposListPullRequestsAssociatedWithCommitQuery","useReposGetCommitQuery","useReposGetCombinedStatusForRefQuery","useReposListCommitStatusesForRefQuery","useReposGetCommunityProfileMetricsQuery","useReposCompareCommitsQuery","useReposGetContentQuery","useReposCreateOrUpdateFileContentsMutation","useReposDeleteFileMutation","useReposListContributorsQuery","useReposListDeploymentsQuery","useReposCreateDeploymentMutation","useReposGetDeploymentQuery","useReposDeleteDeploymentMutation","useReposListDeploymentStatusesQuery","useReposCreateDeploymentStatusMutation","useReposGetDeploymentStatusQuery","useReposCreateDispatchEventMutation","useReposGetAllEnvironmentsQuery","useReposGetEnvironmentQuery","useReposCreateOrUpdateEnvironmentMutation","useReposDeleteAnEnvironmentMutation","useReposListForksQuery","useReposCreateForkMutation","useReposListWebhooksQuery","useReposCreateWebhookMutation","useReposGetWebhookQuery","useReposUpdateWebhookMutation","useReposDeleteWebhookMutation","useReposGetWebhookConfigForRepoQuery","useReposUpdateWebhookConfigForRepoMutation","useReposListWebhookDeliveriesQuery","useReposGetWebhookDeliveryQuery","useReposRedeliverWebhookDeliveryMutation","useReposPingWebhookMutation","useReposTestPushWebhookMutation","useReposListInvitationsQuery","useReposUpdateInvitationMutation","useReposDeleteInvitationMutation","useReposListDeployKeysQuery","useReposCreateDeployKeyMutation","useReposGetDeployKeyQuery","useReposDeleteDeployKeyMutation","useReposListLanguagesQuery","useReposEnableLfsForRepoMutation","useReposDisableLfsForRepoMutation","useReposMergeUpstreamMutation","useReposMergeMutation","useReposGetPagesQuery","useReposCreatePagesSiteMutation","useReposUpdateInformationAboutPagesSiteMutation","useReposDeletePagesSiteMutation","useReposListPagesBuildsQuery","useReposRequestPagesBuildMutation","useReposGetLatestPagesBuildQuery","useReposGetPagesBuildQuery","useReposGetPagesHealthCheckQuery","useReposGetReadmeQuery","useReposGetReadmeInDirectoryQuery","useReposListReleasesQuery","useReposCreateReleaseMutation","useReposGetReleaseAssetQuery","useReposUpdateReleaseAssetMutation","useReposDeleteReleaseAssetMutation","useReposGenerateReleaseNotesMutation","useReposGetLatestReleaseQuery","useReposGetReleaseByTagQuery","useReposGetReleaseQuery","useReposUpdateReleaseMutation","useReposDeleteReleaseMutation","useReposListReleaseAssetsQuery","useReposUploadReleaseAssetMutation","useReposGetCodeFrequencyStatsQuery","useReposGetCommitActivityStatsQuery","useReposGetContributorsStatsQuery","useReposGetParticipationStatsQuery","useReposGetPunchCardStatsQuery","useReposCreateCommitStatusMutation","useReposListTagsQuery","useReposDownloadTarballArchiveQuery","useReposListTeamsQuery","useReposGetAllTopicsQuery","useReposReplaceAllTopicsMutation","useReposGetClonesQuery","useReposGetTopPathsQuery","useReposGetTopReferrersQuery","useReposGetViewsQuery","useReposTransferMutation","useReposCheckVulnerabilityAlertsQuery","useReposEnableVulnerabilityAlertsMutation","useReposDisableVulnerabilityAlertsMutation","useReposDownloadZipballArchiveQuery","useReposCreateUsingTemplateMutation","useReposListPublicQuery","useReposListForAuthenticatedUserQuery","useReposCreateForAuthenticatedUserMutation","useReposListInvitationsForAuthenticatedUserQuery","useReposAcceptInvitationForAuthenticatedUserMutation","useReposDeclineInvitationForAuthenticatedUserMutation","useReposListForUserQuery","isFetchBaseQueryError","obj","error","originalStatus","isGithubErrorResponse","message","documentation_url","githubApiErrorMessage","Number","isInteger","githubErr","isSerializedError","ghStorageSlice","createSlice","initialState","reducers","setToken","action","payload","processResult","errorMessage","newEngineState","storageEngine","updateState","init","storageActions","actions","store","configureStore","reducer","middleware","getDefaultMiddleware","pathURIEncode","map","p","encodeURIComponent","reduce","c","getSessionBranchName","fileInfo","openAs","f","pop","length","slice","join","replace","getName","sha1","ghStorageSelectors","ghState","ghUpdateState","openSheet","location","branches","reposApi","forceRefetch","isError","Error","listAllRepoBranches","e","expectedSessionBranchName","sheetBranch","filter","b","sessionBranch","sheetFileLocation","r1","r","content","Base64","engineState","mergeState","baseBranch","baseCommitSha","commit","merged","isSessionBranchMerged","json","sheetId","JSON","stringify","storageType","custom","canMerge","pullsApi","listAllPulls","pulls","pull","processRecord","record","Promise","resolve","reject","processState","unsubscribe","subscribe","getEngineState","sessionBranchName","gitDbApi","saveError","createSessionBranch","object","updateArgs","contentObj","commitRecord","initGithubEngine","initPayload","merge","filename","mergeError","sourceBranch","targetBranch","call","pr","pullUrl","number","html_url","r2","title","r3","commit_title","commit_message","merge_method","r4","mergeChanges","mergeErr","customState","clearSessionBranch","ghClearSessionBranch","runCommand","cmd","addr","res","load","runTask","autosaveErr","autosave","assignV","current","k","other","isFail","MayFail","Success","Object","assign","toString","assignF","fce","retV","retF","transformError","newErr","asyncAssignF","MayFailPromise","_current","this","_value","constructor","Fail","_error","do","success","a","Math","random","s","assert","x","y","z","t1","scope","ww","w","code","octoProm","apiError","reason","request","GhContext","authToken","changeState","octokit","Octokit","auth","retry","doNotRetry","retries","retryAfter","throttle","enabled","undeletedMergedSession","handIn","handInBranch","rest","repos","parent","repoInfo","create","login","open","paginate","listBranches","getSheetBranches2","getContent","file","graphql","repository","headId","target","oid","baseCommitId","git","createRef","isBranchMerged2","commitId","nodes","associatedPullRequests","find","headRefOid","headRefName","isBranchMerged","performance","now","list","fileHash","mergedSession","_","createOrUpdateFileContents","newFileHash","apiResult","newHeadId","deleteMergedSession","deleteRef","mergeSession","created","pull_number","createdPull","mergeResult","GhEngineState","context","stateName","Initialized","super","UndeletedSession","SessionFull","SessionLess","splice","customError","stateInfo","newState","serialized","GithubEngine","openCmd","deleteMergedSessionCmd","handInTask","autosaveTask","mergeTask","adapter","contextSelectorMemo","commentsAdapter","createEntityAdapter","sortComparer","timestamp","emptySheet","versionNumber","cells","cellsOrder","sheetFile","localState","cellIdCounter","undoRedoCounter","sheetSlice","setErrorMessage","startLoading","initFromJson","importJson","import","updateHistory","importWithWarning","clearImport","insertCell","after","index","afterIndex","getParentCellsOrder","cell","id","idCounter","comments","getInitialState","push","lastCreatedCellId","duplicateCell","cellId","cellIndex","contextId","srcCell","parse","contextExtension","newCell","cid","newCellsOrder","updateCellData","cellLoc","addCellComment","text","comment","Date","getTime","addOne","updateCellComment","updateOne","changes","moveUpCell","moveDownCell","deleteCell","deleteContextCells","nid","deleteComment","removeOne","updateSettings","settings","syncUndoRedoCounter","extendLogicContext","workbook","convertContext","deserializeWorkbook2","passed","sheet","reqKeys","optKeys","entries","keyType","Set","size","testSheetIntegrity","deserializeWorkbook","sf","prev","cur","max","historyChanged","sheetActions","user","remmoveCellComment","present","getSelectors","selectById","insertTextCell","insertAppCell","initSheet","keys","clearContextMemo","undoable","includeAction","simplifiedContext","sCell","self","onmessage","msg","requestId","command","engineType","gh","initGhEngine1","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","n","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","all","promises","u","miniCssF","g","globalThis","Function","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next","then"],"sourceRoot":""}