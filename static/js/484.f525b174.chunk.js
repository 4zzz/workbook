(()=>{var e={50618:(e,t,o)=>{"use strict";var r=o(61465);const s=(0,o(40255).ni)({baseUrl:"https://api.github.com/",prepareHeaders:(e,t)=>{let{getState:o}=t;const r=o().sheetStorage.ghToken;return r&&e.append("Authorization","token ".concat(r)),e},cache:"no-cache"}),a=async(e,t,o)=>await s(e,t,o);function n(e){let t=null;return e&&e.split(", ").forEach((e=>{const o=e.split("; ");if('rel="last"'===o[1]){const e=o[0].match(/.*[?&]+page=([0-9]+)/);e&&void 0!==e[1]&&/^\d+$/.test(e[1])&&(t=parseInt(e[1]))}})),t||1}const c=(0,r.LC)({reducerPath:"githubApi",baseQuery:a,tagTypes:["Files","Refs","Pulls"],endpoints:e=>({reposListForUserHeaders:e.query({query:e=>({url:"/users/".concat(e.username,"/repos"),method:"HEAD",params:{type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var o;return{link:(null===t||void 0===t||null===(o=t.response)||void 0===o?void 0:o.headers.get("link"))||void 0}}}),reposListForAuthenticatedUserHeaders:e.query({query:e=>({method:"HEAD",url:"/user/repos",params:{visibility:e.visibility,affiliation:e.affiliation,type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page,since:e.since,before:e.before}}),transformResponse(e,t){var o;return{link:(null===t||void 0===t||null===(o=t.response)||void 0===o?void 0:o.headers.get("link"))||void 0}}}),searchReposHeaders:e.query({query:e=>({method:"HEAD",url:"/search/repositories",params:{q:e.q,sort:e.sort,order:e.order,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var o;return{link:(null===t||void 0===t||null===(o=t.response)||void 0===o?void 0:o.headers.get("link"))||void 0}}}),reposListBranchesHeaders:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches"),params:{protected:e.protected,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var o;return{link:(null===t||void 0===t||null===(o=t.response)||void 0===o?void 0:o.headers.get("link"))||void 0}}}),reposListAllBranches:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches"),params:{protected:e.protected,per_page:50}}),async onQueryStarted(e,t){let{owner:o,repo:r}=e,{dispatch:s,getState:a,queryFulfilled:i,updateCachedData:u}=t,l=await c.endpoints.reposListBranchesHeaders.initiate({owner:o,repo:r,perPage:50})(s,a,null);if(l.isSuccess){const e=n(l.data.link);try{let t=await i;console.log("reposListAllBranches: got result ",t," lastPage is ",e);let o=[];for(let r=1;r<e;r++)console.log("loading extra branches on page ",r);u((e=>e.concat(o)))}catch(Ar){}}}}),reposMergeWithResponseCode:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merges"),method:"POST",body:e.body}),transformResponse:(e,t,o)=>{var r;return console.log(t),{status:(null===t||void 0===t||null===(r=t.response)||void 0===r?void 0:r.status)||-1,response:e}}}),reposRenameBranchWithResponseCode:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merges"),method:"POST",body:e.body}),transformResponse:(e,t,o)=>(console.log(t),{status:0,reponse:void 0})})})}),{useReposListForUserHeadersQuery:i,useReposListForAuthenticatedUserHeadersQuery:u,useSearchReposHeadersQuery:l,useReposListBranchesHeadersQuery:p,useReposListAllBranchesQuery:d}=c,m=c.injectEndpoints({endpoints:e=>({gitignoreGetAllTemplates:e.query({query:()=>({url:"/gitignore/templates"})}),gitignoreGetTemplate:e.query({query:e=>({url:"/gitignore/templates/".concat(e.name)})}),gitCreateBlob:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/blobs"),method:"POST",body:e.body})}),gitGetBlob:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/blobs/").concat(e.fileSha)})}),gitCreateCommit:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/commits"),method:"POST",body:e.body})}),gitGetCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/commits/").concat(e.commitSha)})}),gitListMatchingRefs:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/matching-refs/").concat(e.ref),params:{per_page:e.perPage,page:e.page}})}),gitGetRef:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/ref/").concat(e.ref)})}),gitCreateRef:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/refs"),method:"POST",body:e.body}),invalidatesTags:["Refs"]}),gitUpdateRef:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/refs/").concat(e.ref),method:"PATCH",body:e.body}),invalidatesTags:["Refs"]}),gitDeleteRef:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/refs/").concat(e.ref),method:"DELETE"}),invalidatesTags:["Refs"]}),gitCreateTag:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/tags"),method:"POST",body:e.body})}),gitGetTag:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/tags/").concat(e.tagSha)})}),gitCreateTree:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/trees"),method:"POST",body:e.body})}),gitGetTree:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/trees/").concat(e.treeSha),params:{recursive:e.recursive}})})}),overrideExisting:!1}),{useGitignoreGetAllTemplatesQuery:h,useGitignoreGetTemplateQuery:y,useGitCreateBlobMutation:g,useGitGetBlobQuery:b,useGitCreateCommitMutation:w,useGitGetCommitQuery:f,useGitListMatchingRefsQuery:v,useGitGetRefQuery:R,useGitCreateRefMutation:S,useGitUpdateRefMutation:q,useGitDeleteRefMutation:E,useGitCreateTagMutation:C,useGitGetTagQuery:P,useGitCreateTreeMutation:k,useGitGetTreeQuery:T}=m,I=c.injectEndpoints({endpoints:e=>({pullsList:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls"),params:{state:e.state,head:e.head,base:e.base,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}}),providesTags:["Pulls"]}),pullsListWH:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls"),params:{state:e.state,head:e.head,base:e.base,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var o;let r={};return null===t||void 0===t||null===(o=t.response)||void 0===o||o.headers.forEach(((e,t)=>r[t]=e)),{response:e,headers:r}},providesTags:["Pulls"]}),pullsCreate:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls"),method:"POST",body:e.body}),invalidatesTags:["Pulls"]}),pullsListReviewCommentsForRepo:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments"),params:{sort:e.sort,direction:e.direction,since:e.since,per_page:e.perPage,page:e.page}})}),pullsGetReviewComment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments/").concat(e.commentId)})}),pullsUpdateReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments/").concat(e.commentId),method:"PATCH",body:e.body})}),pullsDeleteReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments/").concat(e.commentId),method:"DELETE"})}),pullsGet:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber)})}),pullsUpdate:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber),method:"PATCH",body:e.body})}),pullsListReviewComments:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/comments"),params:{sort:e.sort,direction:e.direction,since:e.since,per_page:e.perPage,page:e.page}})}),pullsCreateReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/comments"),method:"POST",body:e.body})}),pullsCreateReplyForReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/comments/").concat(e.commentId,"/replies"),method:"POST",body:e.body})}),pullsListCommits:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/commits"),params:{per_page:e.perPage,page:e.page}})}),pullsListFiles:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/files"),params:{per_page:e.perPage,page:e.page}})}),pullsCheckIfMerged:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/merge")})}),pullsMerge:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/merge"),method:"PUT",body:e.body}),invalidatesTags:["Files","Pulls"]}),pullsListRequestedReviewers:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/requested_reviewers"),params:{per_page:e.perPage,page:e.page}})}),pullsRequestReviewers:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/requested_reviewers"),method:"POST",body:e.body})}),pullsRemoveRequestedReviewers:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/requested_reviewers"),method:"DELETE",body:e.body})}),pullsListReviews:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews"),params:{per_page:e.perPage,page:e.page}})}),pullsCreateReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews"),method:"POST",body:e.body})}),pullsGetReview:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId)})}),pullsUpdateReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId),method:"PUT",body:e.body})}),pullsDeletePendingReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId),method:"DELETE"})}),pullsListCommentsForReview:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId,"/comments"),params:{per_page:e.perPage,page:e.page}})}),pullsDismissReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId,"/dismissals"),method:"PUT",body:e.body})}),pullsSubmitReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId,"/events"),method:"POST",body:e.body})}),pullsUpdateBranch:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/update-branch"),method:"PUT",body:e.body})})}),overrideExisting:!1}),{usePullsListQuery:M,usePullsCreateMutation:F,usePullsListReviewCommentsForRepoQuery:x,usePullsGetReviewCommentQuery:A,usePullsUpdateReviewCommentMutation:_,usePullsDeleteReviewCommentMutation:B,usePullsGetQuery:L,usePullsUpdateMutation:D,usePullsListReviewCommentsQuery:G,usePullsCreateReviewCommentMutation:O,usePullsCreateReplyForReviewCommentMutation:U,usePullsListCommitsQuery:Q,usePullsListFilesQuery:N,usePullsCheckIfMergedQuery:V,usePullsMergeMutation:H,usePullsListRequestedReviewersQuery:j,usePullsRequestReviewersMutation:W,usePullsRemoveRequestedReviewersMutation:z,usePullsListReviewsQuery:$,usePullsCreateReviewMutation:J,usePullsGetReviewQuery:K,usePullsUpdateReviewMutation:Z,usePullsDeletePendingReviewMutation:Y,usePullsListCommentsForReviewQuery:X,usePullsDismissReviewMutation:ee,usePullsSubmitReviewMutation:te,usePullsUpdateBranchMutation:oe}=I,re=c.injectEndpoints({endpoints:e=>({reposListForOrg:e.query({query:e=>({url:"/orgs/".concat(e.org,"/repos"),params:{type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}})}),reposCreateInOrg:e.mutation({query:e=>({url:"/orgs/".concat(e.org,"/repos"),method:"POST",body:e.body})}),reposGet:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo),cache:"reload"})}),reposUpdate:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo),method:"PATCH",body:e.body})}),reposDelete:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo),method:"DELETE"})}),reposListAutolinks:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks"),params:{page:e.page}})}),reposCreateAutolink:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks"),method:"POST",body:e.body})}),reposGetAutolink:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks/").concat(e.autolinkId)})}),reposDeleteAutolink:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks/").concat(e.autolinkId),method:"DELETE"})}),reposEnableAutomatedSecurityFixes:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/automated-security-fixes"),method:"PUT"})}),reposDisableAutomatedSecurityFixes:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/automated-security-fixes"),method:"DELETE"})}),reposListBranches:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches"),params:{protected:e.protected,per_page:e.perPage,page:e.page}}),providesTags:["Refs"]}),reposGetBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch)})}),reposGetBranchProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection")})}),reposUpdateBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection"),method:"PUT",body:e.body})}),reposDeleteBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection"),method:"DELETE"})}),reposGetAdminBranchProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/enforce_admins")})}),reposSetAdminBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/enforce_admins"),method:"POST"})}),reposDeleteAdminBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/enforce_admins"),method:"DELETE"})}),reposGetPullRequestReviewProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_pull_request_reviews")})}),reposUpdatePullRequestReviewProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_pull_request_reviews"),method:"PATCH",body:e.body})}),reposDeletePullRequestReviewProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_pull_request_reviews"),method:"DELETE"})}),reposGetCommitSignatureProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_signatures")})}),reposCreateCommitSignatureProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_signatures"),method:"POST"})}),reposDeleteCommitSignatureProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_signatures"),method:"DELETE"})}),reposGetStatusChecksProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks")})}),reposUpdateStatusCheckProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks"),method:"PATCH",body:e.body})}),reposRemoveStatusCheckProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks"),method:"DELETE"})}),reposGetAllStatusCheckContexts:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts")})}),reposAddStatusCheckContexts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts"),method:"POST",body:e.body})}),reposSetStatusCheckContexts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts"),method:"PUT",body:e.body})}),reposRemoveStatusCheckContexts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts"),method:"DELETE",body:e.body})}),reposGetAccessRestrictions:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions")})}),reposDeleteAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions"),method:"DELETE"})}),reposGetAppsWithAccessToProtectedBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps")})}),reposAddAppAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps"),method:"POST",body:e.body})}),reposSetAppAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps"),method:"PUT",body:e.body})}),reposRemoveAppAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps"),method:"DELETE",body:e.body})}),reposGetTeamsWithAccessToProtectedBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams")})}),reposAddTeamAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams"),method:"POST",body:e.body})}),reposSetTeamAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams"),method:"PUT",body:e.body})}),reposRemoveTeamAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams"),method:"DELETE",body:e.body})}),reposGetUsersWithAccessToProtectedBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users")})}),reposAddUserAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users"),method:"POST",body:e.body})}),reposSetUserAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users"),method:"PUT",body:e.body})}),reposRemoveUserAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users"),method:"DELETE",body:e.body})}),reposRenameBranch:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/rename"),method:"POST",body:e.body})}),reposCodeownersErrors:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/codeowners/errors"),params:{ref:e.ref}})}),reposListCollaborators:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators"),params:{affiliation:e.affiliation,per_page:e.perPage,page:e.page}})}),reposCheckCollaborator:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username)})}),reposAddCollaborator:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username),method:"PUT",body:e.body})}),reposRemoveCollaborator:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username),method:"DELETE"})}),reposGetCollaboratorPermissionLevel:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username,"/permission")})}),reposListCommitCommentsForRepo:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments"),params:{per_page:e.perPage,page:e.page}})}),reposGetCommitComment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments/").concat(e.commentId)})}),reposUpdateCommitComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments/").concat(e.commentId),method:"PATCH",body:e.body})}),reposDeleteCommitComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments/").concat(e.commentId),method:"DELETE"})}),reposListCommits:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits"),params:{sha:e.sha,path:e.path,author:e.author,since:e.since,until:e.until,per_page:e.perPage,page:e.page}})}),reposListBranchesForHeadCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/branches-where-head")})}),reposListCommentsForCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/comments"),params:{per_page:e.perPage,page:e.page}})}),reposCreateCommitComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/comments"),method:"POST",body:e.body})}),reposListPullRequestsAssociatedWithCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/pulls"),params:{per_page:e.perPage,page:e.page}})}),reposGetCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.ref),params:{page:e.page,per_page:e.perPage}})}),reposGetCombinedStatusForRef:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.ref,"/status"),params:{per_page:e.perPage,page:e.page}})}),reposListCommitStatusesForRef:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.ref,"/statuses"),params:{per_page:e.perPage,page:e.page}})}),reposGetCommunityProfileMetrics:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/community/profile")})}),reposCompareCommits:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/compare/").concat(e.basehead),params:{page:e.page,per_page:e.perPage}})}),reposGetContent:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contents/").concat(e.path),params:{ref:e.ref}}),providesTags:["Files"]}),reposCreateOrUpdateFileContents:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contents/").concat(e.path),method:"PUT",body:e.body}),extraOptions:{maxRetries:0},invalidatesTags:["Files","Refs"]}),reposDeleteFile:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contents/").concat(e.path),method:"DELETE",body:e.body})}),reposListContributors:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contributors"),params:{anon:e.anon,per_page:e.perPage,page:e.page}})}),reposListDeployments:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments"),params:{sha:e.sha,ref:e.ref,task:e.task,environment:e.environment,per_page:e.perPage,page:e.page}})}),reposCreateDeployment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments"),method:"POST",body:e.body})}),reposGetDeployment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId)})}),reposDeleteDeployment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId),method:"DELETE"})}),reposListDeploymentStatuses:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId,"/statuses"),params:{per_page:e.perPage,page:e.page}})}),reposCreateDeploymentStatus:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId,"/statuses"),method:"POST",body:e.body})}),reposGetDeploymentStatus:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId,"/statuses/").concat(e.statusId)})}),reposCreateDispatchEvent:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/dispatches"),method:"POST",body:e.body})}),reposGetAllEnvironments:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments")})}),reposGetEnvironment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments/").concat(e.environmentName)})}),reposCreateOrUpdateEnvironment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments/").concat(e.environmentName),method:"PUT",body:e.body})}),reposDeleteAnEnvironment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments/").concat(e.environmentName),method:"DELETE"})}),reposListForks:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/forks"),params:{sort:e.sort,per_page:e.perPage,page:e.page}})}),reposCreateFork:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/forks"),method:"POST",body:e.body})}),reposListWebhooks:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks"),params:{per_page:e.perPage,page:e.page}})}),reposCreateWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks"),method:"POST",body:e.body})}),reposGetWebhook:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId)})}),reposUpdateWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId),method:"PATCH",body:e.body})}),reposDeleteWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId),method:"DELETE"})}),reposGetWebhookConfigForRepo:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/config")})}),reposUpdateWebhookConfigForRepo:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/config"),method:"PATCH",body:e.body})}),reposListWebhookDeliveries:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/deliveries"),params:{per_page:e.perPage,cursor:e.cursor}})}),reposGetWebhookDelivery:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/deliveries/").concat(e.deliveryId)})}),reposRedeliverWebhookDelivery:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/deliveries/").concat(e.deliveryId,"/attempts"),method:"POST"})}),reposPingWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/pings"),method:"POST"})}),reposTestPushWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/tests"),method:"POST"})}),reposListInvitations:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/invitations"),params:{per_page:e.perPage,page:e.page}})}),reposUpdateInvitation:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/invitations/").concat(e.invitationId),method:"PATCH",body:e.body})}),reposDeleteInvitation:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/invitations/").concat(e.invitationId),method:"DELETE"})}),reposListDeployKeys:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys"),params:{per_page:e.perPage,page:e.page}})}),reposCreateDeployKey:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys"),method:"POST",body:e.body})}),reposGetDeployKey:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys/").concat(e.keyId)})}),reposDeleteDeployKey:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys/").concat(e.keyId),method:"DELETE"})}),reposListLanguages:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/languages")})}),reposEnableLfsForRepo:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/lfs"),method:"PUT"})}),reposDisableLfsForRepo:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/lfs"),method:"DELETE"})}),reposMergeUpstream:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merge-upstream"),method:"POST",body:e.body})}),reposMerge:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merges"),method:"POST",body:e.body})}),reposGetPages:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages")})}),reposCreatePagesSite:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages"),method:"POST",body:e.body})}),reposUpdateInformationAboutPagesSite:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages"),method:"PUT",body:e.body})}),reposDeletePagesSite:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages"),method:"DELETE"})}),reposListPagesBuilds:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds"),params:{per_page:e.perPage,page:e.page}})}),reposRequestPagesBuild:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds"),method:"POST"})}),reposGetLatestPagesBuild:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds/latest")})}),reposGetPagesBuild:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds/").concat(e.buildId)})}),reposGetPagesHealthCheck:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/health")})}),reposGetReadme:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/readme"),params:{ref:e.ref}})}),reposGetReadmeInDirectory:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/readme/").concat(e.dir),params:{ref:e.ref}})}),reposListReleases:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases"),params:{per_page:e.perPage,page:e.page}})}),reposCreateRelease:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases"),method:"POST",body:e.body})}),reposGetReleaseAsset:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/assets/").concat(e.assetId)})}),reposUpdateReleaseAsset:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/assets/").concat(e.assetId),method:"PATCH",body:e.body})}),reposDeleteReleaseAsset:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/assets/").concat(e.assetId),method:"DELETE"})}),reposGenerateReleaseNotes:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/generate-notes"),method:"POST",body:e.body})}),reposGetLatestRelease:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/latest")})}),reposGetReleaseByTag:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/tags/").concat(e.tag)})}),reposGetRelease:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId)})}),reposUpdateRelease:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId),method:"PATCH",body:e.body})}),reposDeleteRelease:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId),method:"DELETE"})}),reposListReleaseAssets:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId,"/assets"),params:{per_page:e.perPage,page:e.page}})}),reposUploadReleaseAsset:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId,"/assets"),method:"POST",body:e.body,params:{name:e.name,label:e.label}})}),reposGetCodeFrequencyStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/code_frequency")})}),reposGetCommitActivityStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/commit_activity")})}),reposGetContributorsStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/contributors")})}),reposGetParticipationStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/participation")})}),reposGetPunchCardStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/punch_card")})}),reposCreateCommitStatus:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/statuses/").concat(e.sha),method:"POST",body:e.body})}),reposListTags:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/tags"),params:{per_page:e.perPage,page:e.page}})}),reposDownloadTarballArchive:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/tarball/").concat(e.ref)})}),reposListTeams:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/teams"),params:{per_page:e.perPage,page:e.page}})}),reposGetAllTopics:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/topics"),params:{page:e.page,per_page:e.perPage}})}),reposReplaceAllTopics:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/topics"),method:"PUT",body:e.body})}),reposGetClones:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/clones"),params:{per:e.per}})}),reposGetTopPaths:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/popular/paths")})}),reposGetTopReferrers:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/popular/referrers")})}),reposGetViews:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/views"),params:{per:e.per}})}),reposTransfer:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/transfer"),method:"POST",body:e.body})}),reposCheckVulnerabilityAlerts:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/vulnerability-alerts")})}),reposEnableVulnerabilityAlerts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/vulnerability-alerts"),method:"PUT"})}),reposDisableVulnerabilityAlerts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/vulnerability-alerts"),method:"DELETE"})}),reposDownloadZipballArchive:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/zipball/").concat(e.ref)})}),reposCreateUsingTemplate:e.mutation({query:e=>({url:"/repos/".concat(e.templateOwner,"/").concat(e.templateRepo,"/generate"),method:"POST",body:e.body})}),reposListPublic:e.query({query:e=>({url:"/repositories",params:{since:e.since}})}),reposListForAuthenticatedUser:e.query({query:e=>({url:"/user/repos",params:{visibility:e.visibility,affiliation:e.affiliation,type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page,since:e.since,before:e.before}})}),reposCreateForAuthenticatedUser:e.mutation({query:e=>({url:"/user/repos",method:"POST",body:e.body})}),reposListInvitationsForAuthenticatedUser:e.query({query:e=>({url:"/user/repository_invitations",params:{per_page:e.perPage,page:e.page}})}),reposAcceptInvitationForAuthenticatedUser:e.mutation({query:e=>({url:"/user/repository_invitations/".concat(e.invitationId),method:"PATCH"})}),reposDeclineInvitationForAuthenticatedUser:e.mutation({query:e=>({url:"/user/repository_invitations/".concat(e.invitationId),method:"DELETE"})}),reposListForUser:e.query({query:e=>({url:"/users/".concat(e.username,"/repos"),params:{type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}})})}),overrideExisting:!1}),{useReposListForOrgQuery:se,useReposCreateInOrgMutation:ae,useReposGetQuery:ne,useReposUpdateMutation:ce,useReposDeleteMutation:ie,useReposListAutolinksQuery:ue,useReposCreateAutolinkMutation:le,useReposGetAutolinkQuery:pe,useReposDeleteAutolinkMutation:de,useReposEnableAutomatedSecurityFixesMutation:me,useReposDisableAutomatedSecurityFixesMutation:he,useReposListBranchesQuery:ye,useReposGetBranchQuery:ge,useReposGetBranchProtectionQuery:be,useReposUpdateBranchProtectionMutation:we,useReposDeleteBranchProtectionMutation:fe,useReposGetAdminBranchProtectionQuery:ve,useReposSetAdminBranchProtectionMutation:Re,useReposDeleteAdminBranchProtectionMutation:Se,useReposGetPullRequestReviewProtectionQuery:qe,useReposUpdatePullRequestReviewProtectionMutation:Ee,useReposDeletePullRequestReviewProtectionMutation:Ce,useReposGetCommitSignatureProtectionQuery:Pe,useReposCreateCommitSignatureProtectionMutation:ke,useReposDeleteCommitSignatureProtectionMutation:Te,useReposGetStatusChecksProtectionQuery:Ie,useReposUpdateStatusCheckProtectionMutation:Me,useReposRemoveStatusCheckProtectionMutation:Fe,useReposGetAllStatusCheckContextsQuery:xe,useReposAddStatusCheckContextsMutation:Ae,useReposSetStatusCheckContextsMutation:_e,useReposRemoveStatusCheckContextsMutation:Be,useReposGetAccessRestrictionsQuery:Le,useReposDeleteAccessRestrictionsMutation:De,useReposGetAppsWithAccessToProtectedBranchQuery:Ge,useReposAddAppAccessRestrictionsMutation:Oe,useReposSetAppAccessRestrictionsMutation:Ue,useReposRemoveAppAccessRestrictionsMutation:Qe,useReposGetTeamsWithAccessToProtectedBranchQuery:Ne,useReposAddTeamAccessRestrictionsMutation:Ve,useReposSetTeamAccessRestrictionsMutation:He,useReposRemoveTeamAccessRestrictionsMutation:je,useReposGetUsersWithAccessToProtectedBranchQuery:We,useReposAddUserAccessRestrictionsMutation:ze,useReposSetUserAccessRestrictionsMutation:$e,useReposRemoveUserAccessRestrictionsMutation:Je,useReposRenameBranchMutation:Ke,useReposCodeownersErrorsQuery:Ze,useReposListCollaboratorsQuery:Ye,useReposCheckCollaboratorQuery:Xe,useReposAddCollaboratorMutation:et,useReposRemoveCollaboratorMutation:tt,useReposGetCollaboratorPermissionLevelQuery:ot,useReposListCommitCommentsForRepoQuery:rt,useReposGetCommitCommentQuery:st,useReposUpdateCommitCommentMutation:at,useReposDeleteCommitCommentMutation:nt,useReposListCommitsQuery:ct,useReposListBranchesForHeadCommitQuery:it,useReposListCommentsForCommitQuery:ut,useReposCreateCommitCommentMutation:lt,useReposListPullRequestsAssociatedWithCommitQuery:pt,useReposGetCommitQuery:dt,useReposGetCombinedStatusForRefQuery:mt,useReposListCommitStatusesForRefQuery:ht,useReposGetCommunityProfileMetricsQuery:yt,useReposCompareCommitsQuery:gt,useReposGetContentQuery:bt,useReposCreateOrUpdateFileContentsMutation:wt,useReposDeleteFileMutation:ft,useReposListContributorsQuery:vt,useReposListDeploymentsQuery:Rt,useReposCreateDeploymentMutation:St,useReposGetDeploymentQuery:qt,useReposDeleteDeploymentMutation:Et,useReposListDeploymentStatusesQuery:Ct,useReposCreateDeploymentStatusMutation:Pt,useReposGetDeploymentStatusQuery:kt,useReposCreateDispatchEventMutation:Tt,useReposGetAllEnvironmentsQuery:It,useReposGetEnvironmentQuery:Mt,useReposCreateOrUpdateEnvironmentMutation:Ft,useReposDeleteAnEnvironmentMutation:xt,useReposListForksQuery:At,useReposCreateForkMutation:_t,useReposListWebhooksQuery:Bt,useReposCreateWebhookMutation:Lt,useReposGetWebhookQuery:Dt,useReposUpdateWebhookMutation:Gt,useReposDeleteWebhookMutation:Ot,useReposGetWebhookConfigForRepoQuery:Ut,useReposUpdateWebhookConfigForRepoMutation:Qt,useReposListWebhookDeliveriesQuery:Nt,useReposGetWebhookDeliveryQuery:Vt,useReposRedeliverWebhookDeliveryMutation:Ht,useReposPingWebhookMutation:jt,useReposTestPushWebhookMutation:Wt,useReposListInvitationsQuery:zt,useReposUpdateInvitationMutation:$t,useReposDeleteInvitationMutation:Jt,useReposListDeployKeysQuery:Kt,useReposCreateDeployKeyMutation:Zt,useReposGetDeployKeyQuery:Yt,useReposDeleteDeployKeyMutation:Xt,useReposListLanguagesQuery:eo,useReposEnableLfsForRepoMutation:to,useReposDisableLfsForRepoMutation:oo,useReposMergeUpstreamMutation:ro,useReposMergeMutation:so,useReposGetPagesQuery:ao,useReposCreatePagesSiteMutation:no,useReposUpdateInformationAboutPagesSiteMutation:co,useReposDeletePagesSiteMutation:io,useReposListPagesBuildsQuery:uo,useReposRequestPagesBuildMutation:lo,useReposGetLatestPagesBuildQuery:po,useReposGetPagesBuildQuery:mo,useReposGetPagesHealthCheckQuery:ho,useReposGetReadmeQuery:yo,useReposGetReadmeInDirectoryQuery:go,useReposListReleasesQuery:bo,useReposCreateReleaseMutation:wo,useReposGetReleaseAssetQuery:fo,useReposUpdateReleaseAssetMutation:vo,useReposDeleteReleaseAssetMutation:Ro,useReposGenerateReleaseNotesMutation:So,useReposGetLatestReleaseQuery:qo,useReposGetReleaseByTagQuery:Eo,useReposGetReleaseQuery:Co,useReposUpdateReleaseMutation:Po,useReposDeleteReleaseMutation:ko,useReposListReleaseAssetsQuery:To,useReposUploadReleaseAssetMutation:Io,useReposGetCodeFrequencyStatsQuery:Mo,useReposGetCommitActivityStatsQuery:Fo,useReposGetContributorsStatsQuery:xo,useReposGetParticipationStatsQuery:Ao,useReposGetPunchCardStatsQuery:_o,useReposCreateCommitStatusMutation:Bo,useReposListTagsQuery:Lo,useReposDownloadTarballArchiveQuery:Do,useReposListTeamsQuery:Go,useReposGetAllTopicsQuery:Oo,useReposReplaceAllTopicsMutation:Uo,useReposGetClonesQuery:Qo,useReposGetTopPathsQuery:No,useReposGetTopReferrersQuery:Vo,useReposGetViewsQuery:Ho,useReposTransferMutation:jo,useReposCheckVulnerabilityAlertsQuery:Wo,useReposEnableVulnerabilityAlertsMutation:zo,useReposDisableVulnerabilityAlertsMutation:$o,useReposDownloadZipballArchiveQuery:Jo,useReposCreateUsingTemplateMutation:Ko,useReposListPublicQuery:Zo,useReposListForAuthenticatedUserQuery:Yo,useReposCreateForAuthenticatedUserMutation:Xo,useReposListInvitationsForAuthenticatedUserQuery:er,useReposAcceptInvitationForAuthenticatedUserMutation:tr,useReposDeclineInvitationForAuthenticatedUserMutation:or,useReposListForUserQuery:rr}=re;function sr(e){return(null!==e&&"object"===typeof e||"function"===typeof e)&&("number"===typeof e.status&&"data"in e||"FETCH_ERROR"===e.status&&"string"===typeof e.error||"PARSING_ERROR"===e.status&&"number"===typeof e.originalStatus&&"string"===typeof e.data&&"string"===typeof e.error||"CUSTOM_ERROR"===e.status&&"string"===typeof e.error)}function ar(e){return(null!==e&&"object"===typeof e||"function"===typeof e)&&"string"===typeof e.message&&"string"===typeof e.documentation_url}function nr(e){if(sr(e)){const t=e,{status:o}=t;if("FETCH_ERROR"===o)return"Fetch error: ".concat(t.error);if("PARSING_ERROR"===o)return"Parsing error: ".concat(t.error);if("CUSTOM_ERROR"===o)return"Custom error: ".concat(t.error);if(Number.isInteger(o)){if(ar(t.data)){const e=t.data;return"".concat(t.status,": ").concat(e.message)}return"".concat(t.status,": Unknown error")}return"".concat(t.status,": Unknown error")}return function(e){return!sr(e)}(e)?"Serialized error":"Unknown error"}var cr=o(34520),ir=o.n(cr),ur=o(58134),lr=o(95273);const pr=(0,lr.createSlice)({name:"githubStorage",initialState:{status:"not_initialized"},reducers:{setToken:(e,t)=>{e.ghToken=t.payload},processResult:(e,t)=>{const{errorMessage:o,newEngineState:r}=t.payload;void 0===o?e.status="task_finished":(e.errorMessage=o,e.status="error"),void 0!==r&&(e.storageEngine.state=r)},updateState:(e,t)=>{void 0!==e.storageEngine?e.storageEngine.state=t.payload:console.error("SheetStorage: storage engine is not initialized")},init:(e,t)=>{const{type:o,initialState:r}=t.payload;e.storageEngine={type:o,state:r}}}}),dr={...pr.actions},mr=(0,lr.configureStore)({reducer:{[c.reducerPath]:c.reducer,sheetStorage:pr.reducer},middleware:e=>e().concat(c.middleware)});function hr(e){return e.split("/").map((e=>encodeURIComponent(e))).reduce(((e,t)=>"".concat(e,"/").concat(t)))}function yr(e){const{path:t,ref:o,openAs:r}=e;return"".concat(o,"_session_").concat((e=>{var t;const o=null===(t=e.split("/").pop())||void 0===t?void 0:t.split(".");let r=o?1===o.length?o[0]:o.slice(0,-1).join("."):"";return r=r.replace("..",""),r=r.replace("@{",""),r=r.replace("~",""),r=r.replace("^",""),r=r.replace(":",""),r=r.replace("?",""),r=r.replace("*",""),r=r.replace("[",""),r=r.replace(" ","-"),r})(t),"_").concat(ir()(t)).concat(r?"_".concat(r):"")}const gr={ghState:e=>void 0!==e.sheetStorage.storageEngine&&"github"===e.sheetStorage.storageEngine.type?e.sheetStorage.storageEngine.state:void 0};function br(e){return dr.updateState(e)}function wr(e){return async(t,o)=>{const{owner:r,repo:s,ref:a}=e;let c=[];try{c=await function(e,t){return async(o,r)=>{var s;const a=await re.endpoints.reposListBranchesHeaders.initiate({owner:e,repo:t,perPage:100},{forceRefetch:!0})(o,r,null);if(a.isError)throw Error("unexpected response");const c=n(null===(s=a.data)||void 0===s?void 0:s.link);let i=[];for(let n=1;n<=c;n++){const s=await re.endpoints.reposListBranches.initiate({owner:e,repo:t,perPage:100,page:n},{forceRefetch:!0})(o,r,null);if(void 0===s.data)throw Error("unexpected response");i=i.concat(s.data)}return i}}(r,s)(t,o)}catch(b){return console.log("branch listing error ",c),{error:"API call (listAllRepoBranches) failed, try again."}}const i=yr(e),u=c.filter((e=>e.name===a))[0],l=c.filter((e=>e.name===i))[0];if(void 0===u)return{error:"The requested work sheet was not found in the repository. Check the file name, path, and branch."};console.log("branches: ",c),console.log("expected session branch",i),console.log("session filter: ",c.filter((e=>e.name===i))),console.log("sheetBranch is ",u),console.log("session branch is ",l);const p={...e,ref:void 0!==l?l.name:u.name},d=await(m=p,async(e,t)=>{m.path=hr(m.path);const o=await re.endpoints.reposGetContent.initiate(m,{forceRefetch:!0})(e,t,null);if(!o.isSuccess)return{error:o.error?nr(o.error):"GitHub API call error while loading the worksheet"};const{data:r}=o;if(!("content"in r))return{error:"Worksheet path does not refer to a file."};try{return{content:ur.DS.decode(r.content),sha:r.sha}}catch(b){return{error:"Base64 content decoding failed"}}})(t,o);var m;if("error"in d){const{error:e}=d;return{error:e||"Failed to load file"}}const{content:h,sha:y}=d,g={mergeState:"idle",location:e,baseBranch:u.name,baseCommitSha:u.commit.sha,sha:y};if(void 0===l||(console.log("reusing existing session"),g.sessionBranch={name:l.name,commitSha:l.commit.sha}),t(dr.init({type:"github",initialState:g})),void 0!==g.sessionBranch){const e=await fr()(t,o);console.log("isSessionBranchMerged: ",e)}return{json:h,sheetId:ir()(JSON.stringify({storageType:"github",location:e})),custom:{canMerge:void 0!==l}}}}function fr(){return async(e,t)=>{const o=gr.ghState(t());if(console.log("testSessionBranch"),void 0===o||void 0===o.sessionBranch)throw Error("isSessionBranchMerged called on uninitialized ghStorage");const{owner:r,repo:s}=o.location,{baseBranch:a,sessionBranch:c}=o,i=await function(e,t,o,r){return async(s,a)=>{let c=1,i=[];for(let u=1;u<=c;u++){const l=await I.endpoints.pullsListWH.initiate({owner:e,repo:t,state:o,perPage:100},{forceRefetch:r})(s,a,null);if(void 0===l.data)return{error:l.error};1===u&&(c=n(l.data.headers.link)),i=i.concat(l.data.response)}return{result:i}}}(r,s,"closed",!0)(e,t);if(void 0!==i.error)return{error:i.error};const u=i.result;console.log("searching for pull from ".concat(a," to ").concat(c.name," with sha ").concat(c.commitSha)),console.log("pulls: ",u);for(let n of u)if("closed"===n.state&&n.base.ref===a&&n.head.ref===c.name&&n.head.sha===c.commitSha)return{result:!0};return{result:!1}}}function vr(e){return async(t,o)=>{try{await new Promise(((e,t)=>{const o=()=>{const o=mr.getState().sheetStorage.storageEngine.state.mergeState;return"idle"===o||"success"===o||"merge_waiting"===o?(e(),!0):"error"===o&&(t(),!0)};if(!1===o()){const e=mr.subscribe((()=>{o()&&e()}))}}))}catch(n){}const r=()=>o().sheetStorage.storageEngine.state;if(void 0===r().sessionBranch){const e=await(async(e,t)=>{const o=t().sheetStorage.storageEngine.state,{location:r,baseCommitSha:s}=o,{owner:a,repo:n}=r,c="refs/heads/".concat(yr(r)),i=await m.endpoints.gitCreateRef.initiate({owner:a,repo:n,body:{ref:c,sha:s}})(e,t,null);if("data"in i)return{response:i.data};{const{error:e}=i;return sr(e)&&"number"===typeof e.status&&ar(e.data)&&422===e.status&&"Reference already exists"===e.data.message?{saveError:{type:"background_update",message:e.data.message}}:{saveError:{type:"unknown_error",message:nr(e)}}}})(t,o);if(void 0!==e.saveError){const o={...r(),saveError:e.saveError};return void t(dr.processResult({errorMessage:"Creation of session branch failed: ".concat(e.saveError.message),newEngineState:o}))}console.log("created session branch ",e.response);const s={...r(),sessionBranch:{name:yr(r().location),commitSha:e.response.object.sha}};t(dr.updateState(s))}const s=await fr()(t,o);if(void 0!==s.error){const e={...r(),saveError:{type:"unknown_error",message:"API call failed: ".concat(nr(s.error))}};return void t(dr.processResult({errorMessage:"API call failed: ".concat(nr(s.error)),newEngineState:e}))}if(!0===s.result){const e={...r(),saveError:{type:"merged_session",message:"Merged session branch must be deleted"}};return void t(dr.processResult({errorMessage:"Merged session branch must be deleted",newEngineState:e}))}console.log("isSessionBranchMerged: ",s);const a=await function(e){return async(t,o)=>{const r=o().sheetStorage.storageEngine.state,{owner:s,repo:a,path:n}=r.location,{sessionBranch:c,sha:i}=r,u={owner:s,repo:a,path:hr(n),body:{message:e.message,content:ur.DS.encode(JSON.stringify(e.contentObj,null,2)),sha:i,branch:c.name}},l=await re.endpoints.reposCreateOrUpdateFileContents.initiate(u)(t,o,null);if("error"in l){const{error:e}=l;return sr(e)&&"number"===typeof e.status&&ar(e.data)&&409===e.status?{saveError:{type:"background_update",message:e.data.message}}:{saveError:{type:"unknown_error",message:nr(e)}}}return{response:l}}}(e)(t,o);if(void 0!==a.saveError){const e={...r(),saveError:a.saveError};t(dr.processResult({errorMessage:"Commit failed: ".concat(a.saveError.message),newEngineState:e}))}else{const e=o().sheetStorage.storageEngine.state,r=a.response.data.content.sha,s={...e.sessionBranch,commitSha:a.response.data.commit.sha},n={...e,sha:r,sessionBranch:s};t(dr.processResult({newEngineState:n}))}}}function Rr(e){const t=mr.dispatch,o=mr.getState,r={canMerge:!1};async function s(){const e=await(async(e,t)=>{const o=()=>t().sheetStorage.storageEngine.state,{owner:r,repo:s,path:a}=o().location,n=a.replace(/^([^/]*\/)*([^/]+)\.workbook$/,"$2");if(void 0===o().sessionBranch){const t={type:"no_session_branch",message:"There is no session branch therefore no changes to merge"};return e(br({...o(),mergeState:"error",mergeError:t})),!1}const c=o().sessionBranch,i=o().baseBranch;e(br({...o(),mergeState:"merge_waiting"})),e(br({...o(),mergeState:"merging"}));const u=await I.endpoints.pullsList.initiate({owner:r,repo:s,state:"open",perPage:100},{forceRefetch:!0})(e,t,null);if(!("data"in u)||void 0===u.data){const t={type:"api_call_failed",message:void 0!==u.error?nr(u.error):"",call:"pullsList"};return e(br({...o(),mergeState:"error",mergeError:t})),!1}const l=u.data;console.log("Pulls list: ",l);const p=l.filter((e=>e.base.ref===i&&e.head.ref===c.name));if(console.log("filtered pr: ",p),p.length>1){const t={type:"multiple_pulls",message:"The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch."};return e(br({...o(),mergeState:"error",mergeError:t})),!1}let d,h;if(1===p.length)console.log("PR already created"),d=p[0].number,h=p[0].html_url;else{const a=await I.endpoints.pullsCreate.initiate({owner:r,repo:s,body:{title:"".concat(n,": Worksheet session"),head:"refs/heads/".concat(c.name),base:"refs/heads/".concat(i)}})(e,t,null);if(!("data"in a)){const t={type:"api_call_failed",message:nr(a.error),call:"pullsCreate"};return e(br({...o(),mergeState:"error",mergeError:t})),!1}console.log("created PR: ",a.data),d=a.data.number,h=a.data.html_url}const y=await I.endpoints.pullsMerge.initiate({owner:r,repo:s,pullNumber:d,body:{commit_title:"".concat(n,": Worksheet session ").concat(r,"/").concat(s,"#").concat(d),commit_message:"See https://github.com/".concat(r,"/").concat(s,"/pull/").concat(d),merge_method:"squash"}})(e,t,null);if(!("data"in y)){const{error:t}=y;let r;return r=sr(t)&&"number"===typeof t.status&&ar(t.data)&&405===t.status&&"Pull Request is not mergeable"===t.data.message?{type:"not_mergable",message:nr(y.error),url:h}:{type:"api_call_failed",message:nr(y.error),call:"pullsMerge"},e(br({...o(),mergeState:"error",mergeError:r})),!1}console.log("merge success",y.data);const g=await m.endpoints.gitDeleteRef.initiate({owner:r,repo:s,ref:"heads/".concat(hr(c.name))})(e,t,null);return"data"in g||console.log("Failed to delete old branch"),console.log("old branch delete success",g),e(dr.updateState({...o(),sessionBranch:void 0,mergeState:"success",mergeError:void 0,baseCommitSha:y.data.sha})),y.data})(t,o);if(!1===e){var s,a;const e=null===(s=o().sheetStorage.storageEngine)||void 0===s?void 0:s.state,{baseBranch:t,mergeState:n,mergeError:c,sessionBranch:i}=e;return r.mergeErr={baseBranch:t,mergeState:n,mergeError:c,sessionBranch:i},{result:"error",errorMessage:(null===(a=e.mergeError)||void 0===a?void 0:a.message)||"save error",customState:r}}return r.canMerge=!1,{result:"success",customState:r}}function a(){return((e,t)=>{const o=gr.ghState(t());void 0!==o&&e(br({...o,sessionBranch:void 0}))})(t,o),{result:"success"}}return{runCommand:async e=>{switch(e.type){case"init":return function(e){if(!("ghToken"in e.custom))throw new Error("Missing github access token in github engine initialization");return t(dr.setToken(e.custom.ghToken)),{result:"success",customState:r}}(e.payload);case"load":return async function(e){const s=await wr(e)(t,o);return void 0!==s.error?{result:"error",errorMessage:s.error}:(r.canMerge=s.custom.canMerge,{result:"success",data:{json:s.json,sheetId:s.sheetId},customState:r})}(e.payload);case"clearSessionBranch":return a();default:throw new Error("Unknown command in github engine: "+e.type)}},runTask:async e=>{switch(e.type){case"autosave":return async function(e){var s,a,n,c;await vr(e)(t,o);const i=o();return"task_finished"===i.sheetStorage.status?(r.canMerge=!0,{result:"success",customState:r}):(r.autosaveErr={location:null===(s=i.sheetStorage.storageEngine)||void 0===s?void 0:s.state.location,sessionBranch:null===(a=i.sheetStorage.storageEngine)||void 0===a?void 0:a.state.sessionBranch,baseBranch:null===(n=i.sheetStorage.storageEngine)||void 0===n?void 0:n.state.baseBranch,saveError:null===(c=i.sheetStorage.storageEngine)||void 0===c?void 0:c.state.saveError},{result:"error",errorMessage:i.sheetStorage.errorMessage||"err",customState:r})}(e.payload);case"merge":return s();default:throw new Error("Unknown task in github engine: "+e.type)}}}}function Sr(e,t,o){return e.isFail()?e:o.isFail()?o:Fr.Success(Object.assign({},e.value,{[t.toString()]:o.value}))}function qr(e,t,o){if(e.isFail())return e;return Sr(e,t,o(e.value))}function Er(e,t){return e.isFail()?e:t}function Cr(e,t){return e.isFail()?e:t(e.value)}function Pr(e,t){if(e.isSuccess())return e;const o=t(e.value);return Fr.Error(o)}function kr(e,t,o){return new Tr((async r=>{const s=e instanceof Promise?await e:e;if(s.isFail())return void r(s);const a=await o(s.value);r(Sr(s,t,a))}))}class Tr extends Promise{assignV(e,t){return new Tr((async o=>{o(Sr(await(this),e,t))}))}assignF(e,t){return new Tr((async o=>{o(qr(await(this),e,t))}))}retV(e){return new Tr((async t=>{t(Er(await(this),e))}))}retF(e){return new Tr((async t=>{t(Cr(await(this),e))}))}asyncAssignF(e,t){return kr(this,e,t)}transformError(e){return new Tr((async t=>{t(Pr(await(this),e))}))}}class Ir{get value(){return this._value}isSuccess(){return!0}isFail(){return!1}constructor(e){this._value=void 0,this._value=e}assignV(e,t){return Sr(this,e,t)}assignF(e,t){return qr(this,e,t)}retV(e){return Er(this,e)}retF(e){return Cr(this,e)}asyncAssignF(e,t){return kr(this,e,t)}transformError(e){return Pr(this,e)}}class Mr{get value(){return this._error}isSuccess(){return!1}isFail(){return!0}constructor(e){this._error=void 0,this._error=e}assignV(e,t){return Sr(this,e,t)}assignF(e,t){return qr(this,e,t)}retV(e){return Er(this,e)}retF(e){return Cr(this,e)}asyncAssignF(e,t){return kr(this,e,t)}transformError(e){return Pr(this,e)}}class Fr{static Success(e){return new Ir(e)}static Error(e){return new Mr(e)}static do(){return Fr.Success({})}}function xr(e){return Fr.Success(e)}function Ar(e){return Fr.Error(e)}let _r=Fr.do().retV(Math.random()>.5?Fr.Success(1):Fr.Error("out of luck"));Fr.do().assignV("x",_r);Fr.do().assignV("x",xr(4)).assignF("y",(e=>_r)),Fr.do().assignV("x",xr(4)).asyncAssignF("y",(async e=>_r)),function(){const e=e=>{if(!e)throw new Error("assertion failed")};let t=Fr.do().assignV("x",Fr.Success(5));e(t.isSuccess()&&5===t.value.x),t=Fr.do().assignF("x",(()=>Fr.Success(10))),e(t.isSuccess()&&10===t.value.x);let o=Fr.do().assignF("x",(()=>Fr.Success(10))).retV(Fr.Success(5));e(o.isSuccess()&&5===o.value),o=Fr.do().assignF("x",(()=>Fr.Success(10))).retF((()=>Fr.Success(10))),e(o.isSuccess()&&10===o.value);let r=Fr.do().assignF("x",(()=>Fr.Success(10))).retF((()=>Fr.Error(10)));e(r.isFail()&&10===r.value),r=Fr.do().assignF("x",(()=>Fr.Error(10))).retF((()=>Fr.Error(10))),e(r.isFail()&&10===r.value),r=Fr.do().assignV("x",Fr.Error(10)).retF((()=>Fr.Error(10))),e(r.isFail()&&10===r.value),r=Fr.do().assignF("x",(()=>Fr.Success(10))).retV(Fr.Error(11)),e(r.isFail()&&11===r.value),r=Fr.do().assignF("x",(()=>Fr.Success(10))).retV(Fr.Error(11)).transformError((e=>2*e)),e(r.isFail()&&22===r.value),(async()=>{let t=await Fr.do().asyncAssignF("x",(async e=>Fr.Success(1)));e(t.isSuccess()&&1===t.value.x);let o=await Fr.do().assignV("x",Fr.Success(2)).asyncAssignF("y",(async e=>Fr.Success(3)));e(o.isSuccess()&&2===o.value.x&&3===o.value.y);let r=await Fr.do().assignV("x",Fr.Success(4)).asyncAssignF("y",(async e=>Fr.Success(5))).assignV("z",Fr.Success(6));e(r.isSuccess()&&4===r.value.x&&5===r.value.y&&6===r.value.z)})()}();let Br=Fr.do().assignV("x",Fr.Success(5)).assignF("y",(e=>e.x>5?Fr.Success(e.x*e.x):Fr.Error(-1))).transformError((e=>"".concat(e)));if(Br.isSuccess()){Br.value}else{Br.value}Fr.do().assignV("x",Fr.Success(5)).retV(Fr.Error(!1)),Fr.do().assignF("x",(e=>Fr.Success(5))),Fr.do().assignV("x",Fr.Error("10")).assignV("ww",Fr.Error("")).assignF("y",(e=>e.x>10?Fr.Success(5):Fr.Success("a"))).assignF("z",(e=>"string"===typeof e.y?Fr.Success(e.y):Fr.Error("wrong"))).assignF("w",(e=>5===e.y?Fr.Success(e.y):Fr.Error("10"))).retF((e=>{e.x,e.ww,e.y,e.z,e.w;return""===e.z?Fr.Error("5"):Fr.Success(!0)})),Fr.do().assignF("x",(e=>Fr.Error("10"))).assignF("y",(e=>Fr.Error("10"))).assignF("z",(e=>{e.x,e.y;return Fr.Success(!0)}));Fr.do().assignF("x",(e=>Fr.Error("10"))).assignF("y",(e=>Fr.Error("10"))).assignF("z",(e=>{e.x,e.y;return Fr.Success(!0)})).retV(Fr.Error("true"));Fr.do().assignF("x",(e=>Fr.Error({code:5,message:"fail"}))),Fr.do().assignV("x",Fr.Error("10")),Fr.do().assignV("x",Fr.Error("10")),Fr.do().assignV("x",Fr.Error("10")),Fr.do().assignV("x",Fr.Error("10")),Fr.do().assignF("x",(e=>Fr.Error("10"))),Fr.do().assignV("x",Fr.Error(5)),Fr.do().assignV("x",Math.random()>.5?Fr.Success(1):Fr.Error("out of luck")).assignV("y",Fr.Error(10)),Fr.do().assignF("x",(()=>Math.random()>.5?Fr.Success(1):Fr.Error("out of luck"))).assignV("y",Fr.Error(10)),Fr.do().assignV("x",Fr.Error("true")).assignV("y",Fr.Error(4)),Fr.do().assignV("x",Fr.Error(!0)).assignV("y",Fr.Error(4)),Fr.do().assignV("x",Fr.Error(!0)).assignV("y",Fr.Error(4)).assignV("z",Fr.Error(!1)),Fr.do().assignV("x",Fr.Error(!0)).assignV("y",Fr.Error("4")).assignV("z",Fr.Error("false")),Fr.do().assignV("x",Fr.Error(!0)).assignV("y",Fr.Success("4")).assignV("z",Fr.Error(!1)),Fr.do().assignF("x",(()=>Fr.Success(4))).assignV("y",Fr.Error(4)),Fr.do().retV(Fr.Error("no")).assignV("x",Fr.Error(5)),Fr.do().retV(Fr.Error("no")).assignV("x",Fr.Error(7)),Fr.do().retF((()=>Fr.Error("no"))).assignV("x",Fr.Error(5)),Fr.do().retF((()=>Fr.Error("no"))).assignV("x",Fr.Error(7));var Lr=o(1192);async function Dr(e){try{const t=await e;return Fr.Success(t)}catch(t){if("name"in t&&"message"in t){if("HttpError"===t.name){const e=t;return Fr.Error({reason:"api_call_failed",message:"HTTP error: ".concat(e.request.method," ").concat(e.request.url," failed (").concat(e.message,")"),apiError:e})}return Fr.Error({reason:"api_call_failed",message:"Exception during API call: ".concat(t.name,": ").concat(t.message)})}return Fr.Error({reason:"api_call_failed",message:"API call ended with unknown error: ".concat(t)})}}class Gr{constructor(e,t){this.changeState=void 0,this.customState=void 0,this.octokit=void 0,this.octokit=new Lr.vd({auth:e,retry:{doNotRetry:[404,405,409,422]},request:{retries:0,retryAfter:1},throttle:{enabled:!1}}),this.changeState=t,this.customState={canMerge:!1,undeletedMergedSession:!1,baseBranch:"will be set"}}async handIn(e){const{owner:t,repo:o,ref:r}=e.addr,{handInBranch:s,title:a,body:n}=e;return Fr.do().assignV("repoInfo",await Dr(this.octokit.rest.repos.get({owner:t,repo:o}))).asyncAssignF("pullRequest",(async e=>{const{parent:c}=e.repoInfo.data;return void 0===c?Fr.Error({reason:"no_parent",message:"Workbook opened from repository that has no parent"}):Dr(this.octokit.rest.pulls.create({owner:c.owner.login,repo:o,base:s,head:"".concat(t,":").concat(r),title:a,body:n}))}))}async open(e){const{owner:t,repo:o,path:r}=e;return Fr.do().assignV("branches",await Dr(this.octokit.paginate(this.octokit.rest.repos.listBranches,{owner:t,repo:o,per_page:100,headers:{"If-None-Match":""}}))).assignV("sheetBranch",await this.getSheetBranches2(e)).asyncAssignF("undeletedMergedSession",(async e=>Fr.Success(!1))).asyncAssignF("file",(async e=>{const{baseBranch:s,sessionBranch:a}=e.sheetBranch,n=void 0===a?s.name:a.name;return Dr(this.octokit.rest.repos.getContent({owner:t,repo:o,path:r,ref:n,headers:{"If-None-Match":""}}))})).retF((e=>{const{file:t}=e,{baseBranch:o,sessionBranch:r}=e.sheetBranch;if(!("content"in t.data))return Ar({reason:"not_found",message:"Workbook path refers to a directory."});try{return xr({baseBranch:o,sessionBranch:r,content:ur.DS.decode(t.data.content),sha:t.data.sha,undeletedMergedSession:false})}catch(s){return Ar({reason:"load_error",message:"Base64 content decoding failed."})}})).transformError((e=>({...e,apiError:void 0})))}async getSheetBranches2(e){const{owner:t,repo:o}=e,r=e.ref,s=yr(e);return Fr.do().assignV("branches",await Dr(this.octokit.graphql("\n        query getSheetBranches($owner: String!, $repo: String!, $baseBranch: String!, $sessionBranch: String!) {\n          repository(owner: $owner, name: $repo) {\n            baseBranch: ref(qualifiedName: $baseBranch) {\n              name\n              target {\n                ... on Commit {\n                  oid\n                }\n              }\n            }\n            sessionBranch: ref(qualifiedName: $sessionBranch) {\n              name\n              target {\n                ... on Commit {\n                  oid\n                }\n              }\n            }\n          }\n        }      \n        ",{owner:t,repo:o,baseBranch:r,sessionBranch:s,headers:{"If-None-Match":""}}))).retF((e=>{const{baseBranch:t,sessionBranch:o}=e.branches.repository;return null===t?Fr.Error({reason:"not_found",message:"The requested work sheet was not found in the repository. Check the file name, path, and branch."}):Fr.Success({baseBranch:{headId:t.target.oid,name:t.name},sessionBranch:null!==o?{name:o.name,headId:o.target.oid}:void 0})}))}async createSessionBranch(e){const{addr:t,baseCommitId:o}=e,{owner:r,repo:s}=t,a="refs/heads/".concat(yr(e.addr));return Fr.do().assignV("create",await Dr(this.octokit.rest.git.createRef({owner:r,repo:s,ref:a,sha:o}))).retF((e=>Fr.Success({name:yr(t),headId:e.create.data.object.sha}))).transformError((e=>{if("api_call_failed"===e.reason){var t;const{apiError:o}=e;if(422===(null===o||void 0===o?void 0:o.status)&&"Reference already exists"===(null===o||void 0===o||null===(t=o.response)||void 0===t?void 0:t.data).message){return{reason:"background_update",message:""}}}return e}))}async isBranchMerged2(e){const{addr:t,sessionBranchName:o,commitId:r}=e,{owner:s,repo:a}=t;return Fr.do().assignV("pull",await Dr(this.octokit.graphql("\n        query getPullRequestForCommit($owner: String!, $repo: String!, $commitId: GitObjectID!) {\n          repository(owner: $owner, name: $repo) {\n            object(oid: $commitId) {\n              ... on Commit {\n                associatedPullRequests(first: 1) {\n                  nodes {\n                    state,\n                    headRefOid,\n                    headRefName\n                  }\n                }\n              }\n            }\n          }\n        }\n        ",{owner:s,repo:a,commitId:r,headers:{"If-None-Match":""}}))).retF((e=>{console.log(e);const t=e.pull.repository.object.associatedPullRequests.nodes;return console.log("Nodes",t),void 0!==t.find((e=>"MERGED"===e.state&&e.headRefOid===r&&e.headRefName===o))?Fr.Success(!0):Fr.Success(!1)}))}async isBranchMerged(e){const{addr:t,baseBranch:o,branch:r}=e,{owner:s,repo:a}=t,{name:n,commitId:c}=r,i=performance.now();return Fr.do().assignV("pulls",await Dr(this.octokit.paginate(this.octokit.rest.pulls.list,{owner:s,repo:a,state:"closed",per_page:100,headers:{"If-None-Match":""}}))).retF((e=>{const{pulls:t}=e;for(let r of t)if("closed"===r.state&&r.base.ref===o&&r.head.ref===n&&r.head.sha===c)return console.log("IT TOOK",performance.now()-i),Fr.Success(!0);return console.log("IT TOOK",performance.now()-i),Fr.Success(!1)}))}async commit(e){const{addr:t,sessionBranchName:o,commitId:r,content:s,fileHash:a,message:n}=e,{owner:c,repo:i,path:u}=t;return console.log("in commit"),Fr.do().assignV("mergedSession",await this.isBranchMerged2({addr:t,sessionBranchName:o,commitId:r})).retF((e=>!0===e.mergedSession?Fr.Error({reason:"merged_session",message:"Session branch was merged, but not deleted"}):Fr.Success({}))).asyncAssignF("apiResult",(e=>Dr(this.octokit.rest.repos.createOrUpdateFileContents({owner:c,repo:i,path:hr(u),message:n,content:s,sha:a,branch:o})))).retF((e=>Fr.Success({newFileHash:e.apiResult.data.content.sha,newHeadId:e.apiResult.data.commit.sha}))).transformError((e=>{if("api_call_failed"===e.reason){const{apiError:t}=e;if(409===(null===t||void 0===t?void 0:t.status))return{reason:"background_update",message:"Workbook file was updated in the background"}}return e})).transformError((e=>({...e,apiError:void 0})))}async deleteMergedSession(e){const{addr:t,sessionBranch:o}=e,{owner:r,repo:s}=t;return Fr.do().assignV("deleteResult",await Dr(this.octokit.rest.git.deleteRef({owner:r,repo:s,ref:"heads/".concat(hr(o))}))).retV(Fr.Success(!0))}async mergeSession(e){const{addr:t,sourceBranch:o,targetBranch:r}=e,{owner:s,repo:a,path:n}=t,c=n.replace(/^([^/]*\/)*([^/]+)\.workbook$/,"$2");let i=await Fr.do().assignV("pulls",await Dr(this.octokit.paginate(this.octokit.rest.pulls.list,{owner:s,repo:a,state:"open",per_page:100,headers:{"If-None-Match":""}}))).asyncAssignF("createdPull",(async e=>{const{pulls:t}=e,n=t.filter((e=>e.base.ref===r&&e.head.ref===o.name));return n.length>1?Ar({reason:"multiple_pulls",message:"The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch."}):1===n.length?xr({pullNumber:n[0].number,pullUrl:n[0].html_url,created:!0}):(await Dr(this.octokit.rest.pulls.create({owner:s,repo:a,title:"".concat(c,": Worksheet session"),head:"refs/heads/".concat(o.name),base:"refs/heads/".concat(r)}))).retF((e=>xr({pullNumber:e.data.number,pullUrl:e.data.html_url})))})).asyncAssignF("mergeResult",(async e=>{console.log("merging");let t=(await Dr(this.octokit.rest.pulls.merge({owner:s,repo:a,pull_number:e.createdPull.pullNumber,commit_title:"".concat(c,": Workbook session ").concat(s,"/").concat(a,"#").concat(e.createdPull.pullNumber),commit_message:"See https://github.com/".concat(s,"/").concat(a,"/pull/").concat(e.createdPull.pullNumber),merge_method:"squash"}))).transformError((t=>{if(console.log("merge error",t),"api_call_failed"===t.reason){const{apiError:o}=t;if(405===(null===o||void 0===o?void 0:o.status))return console.log("transforming error"),{reason:"not_mergable",message:"",pullUrl:e.createdPull.pullUrl}}return t}));return console.log("merging ended"),t})).asyncAssignF("deleteResult",(async e=>(await Dr(this.octokit.rest.git.deleteRef({owner:s,repo:a,ref:"heads/".concat(hr(o.name))})),xr(!0)))).retF((e=>Fr.Success(e.mergeResult.data.sha))).transformError((e=>({...e,apiError:void 0})));return console.log("merging function ended"),i}}class Or{constructor(e,t){this.context=void 0,this.stateName=void 0,this.context=e,this.stateName=t}}class Ur extends Or{constructor(e){super(e,"Initialized"),this.context.customState={canMerge:!1,undeletedMergedSession:!1,baseBranch:"",sessionBranch:""}}async open(e){return Fr.do().assignV("data",await this.context.open(e)).retF((t=>{const{sessionBranch:o,baseBranch:r,sha:s,content:a,undeletedMergedSession:n}=t.data;this.context.customState={canMerge:void 0!==o&&!1===n,undeletedMergedSession:n,baseBranch:r.name,sessionBranch:null===o||void 0===o?void 0:o.name},this.context.changeState(n?new Qr(this.context,{addr:e,baseBranch:r,sessionBranch:o.name,fileHash:s}):void 0!==o?new Vr(this.context,e,r,o,s):new Nr(this.context,e,r,s));let c=e.path.split("/").splice(-1,1)[0];return Fr.Success({customState:this.context.customState,data:{filename:c,json:a,sheetId:ir()(JSON.stringify({storageType:"github",location:e}))}})})).transformError((e=>({customError:e,customState:this.context.customState})))}async autosave(e){throw new Error("Invalid action")}async merge(){throw new Error("Invalid action")}async handIn(){throw new Error("Invalid action")}async deleteMergedSession(){throw new Error("Invalid action")}}class Qr extends Or{constructor(e,t){super(e,"UndeletedSession"),this.stateInfo=void 0,this.stateInfo=t,this.context.customState.undeletedMergedSession=!0}open(e){const t=new Ur(this.context);return this.context.changeState(t),t.open(e)}async autosave(e){return Fr.Error({customError:{reason:"merged_session",message:"Session branch was merged and must be deleted"},customState:this.context.customState})}merge(){throw new Error("Invalid action")}async handIn(){throw new Error("Invalid action")}async deleteMergedSession(){return(await this.context.deleteMergedSession({addr:this.stateInfo.addr,sessionBranch:this.stateInfo.sessionBranch})).retF((e=>(this.context.customState.undeletedMergedSession=!1,this.context.customState.canMerge=!1,this.context.changeState(new Nr(this.context,this.stateInfo.addr,this.stateInfo.baseBranch,this.stateInfo.fileHash)),Fr.Success({customState:this.context.customState})))).transformError((e=>({...e,apiError:void 0}))).transformError((e=>({customError:e})))}}class Nr extends Or{constructor(e,t,o,r){super(e,"SessionLess"),this.addr=void 0,this.baseBranch=void 0,this.fileHash=void 0,this.addr=t,this.baseBranch=o,this.fileHash=r}async open(e){throw new Error("Invalid action")}async autosave(e){return await Fr.do().assignV("sessionBranch",await this.context.createSessionBranch({addr:this.addr,baseCommitId:this.baseBranch.headId})).transformError((e=>({customError:{...e,apiError:void 0},customState:this.context.customState}))).asyncAssignF("autosave",(async t=>{this.context.customState.canMerge=!0;const o=new Vr(this.context,this.addr,this.baseBranch,t.sessionBranch,this.fileHash);return this.context.changeState(o),o.autosave(e)})).retF((e=>xr(e.autosave)))}async merge(){throw new Error("Invalid action")}async handIn(e){return(await this.context.handIn({addr:this.addr,...e})).retV(Fr.Success({customState:this.context.customState})).transformError((e=>({customError:{...e,apiError:void 0}})))}async deleteMergedSession(){throw new Error("Invalid action")}}class Vr extends Or{constructor(e,t,o,r,s){super(e,"SessionFull"),this.addr=void 0,this.baseBranch=void 0,this.sessionBranch=void 0,this.fileHash=void 0,this.addr=t,this.baseBranch=o,this.sessionBranch=r,this.fileHash=s}async open(e){throw new Error("Invalid action")}async autosave(e){return Fr.do().assignV("commit",await this.context.commit({addr:this.addr,message:e.message,content:ur.DS.encode(e.serialized),sessionBranchName:this.sessionBranch.name,commitId:this.sessionBranch.headId,fileHash:this.fileHash})).retF((e=>{const{newFileHash:t,newHeadId:o}=e.commit;return this.fileHash=t,this.sessionBranch.headId=o,this.context.customState.canMerge=!0,Fr.Success({customState:this.context.customState})})).transformError((e=>("merged_session"===e.reason&&this.context.changeState(new Qr(this.context,{addr:this.addr,baseBranch:this.baseBranch,sessionBranch:this.sessionBranch.name,fileHash:this.fileHash})),{customError:e,customState:this.context.customState})))}async merge(){return Fr.do().assignV("mergeResult",await this.context.mergeSession({addr:this.addr,sourceBranch:this.sessionBranch,targetBranch:this.baseBranch.name})).retF((e=>(console.log("Merge task successful"),this.context.customState.canMerge=!1,this.context.changeState(new Nr(this.context,this.addr,{...this.baseBranch,headId:e.mergeResult},this.fileHash)),Fr.Success({customState:this.context.customState})))).transformError((e=>(console.log("Merge task ended with error",e),{customError:e,customState:this.context.customState})))}async handIn(e){return(await this.context.handIn({addr:this.addr,...e})).retV(Fr.Success({customState:this.context.customState})).transformError((e=>({customError:{...e,apiError:void 0}})))}async deleteMergedSession(){throw new Error("Invalid action")}}class Hr{constructor(e){this.state=void 0,this.context=void 0,this.context=new Gr(e,(e=>{this.state=e})),this.state=new Ur(this.context)}async openCmd(e){return this.state.open(e)}async deleteMergedSessionCmd(){return this.state.deleteMergedSession()}async handInTask(e){return this.state.handIn(e)}async autosaveTask(e){return this.state.autosave(e)}async mergeTask(){return this.state.merge()}}function jr(e){return console.log("Adapter result",e),e.isSuccess()?{result:"success",...e.value}:{result:"error",errorMessage:e.value.customError.message,customState:e.value.customState,customError:e.value.customError}}var Wr=o(69824);o(50873);const zr={};const $r=(0,lr.createEntityAdapter)({sortComparer:(e,t)=>e.timestamp-t.timestamp}),Jr={versionNumber:1,cells:{},cellsOrder:[]},Kr={state:"not_loaded",sheetFile:Jr,localState:{cellIdCounter:0,undoRedoCounter:0,sheetId:"initial"},filename:""},Zr=(0,lr.createSlice)({name:"sheet",initialState:Kr,reducers:{setErrorMessage:(e,t)=>{const{message:o,newState:r}=t.payload;e.errorMessage=o,void 0!==r&&(e.state=r)},startLoading:e=>{e.state="loading"},initFromJson:(e,t)=>{const{filename:o,json:r,sheetId:s}=t.payload;e.sheetFile=Jr,e.filename=o,e.localState={...Kr.localState,sheetId:s};const a=Yr(e,r);!0===a?e.state="loaded":(e.state="load_error",e.errorMessage=a)},import:(e,t)=>{const{json:o}=t.payload,r=Yr(e,o);!0!==r?e.import={json:o,error:"Importing failed: ".concat(r)}:(e.import=void 0,es(t,"Imported workbook from file"))},importWithWarning:(e,t)=>{const{json:o}=t.payload;e.import={json:o}},clearImport:e=>{e.import=void 0},insertCell:(e,t)=>{const{after:o,type:r,data:s}=t.payload,{index:a}=o,n=Xr(e,o);if(console.log("Inserting cell ",t),a>=-2&&a<n.length){const o={id:e.localState.cellIdCounter,type:r,data:s,idCounter:0,comments:$r.getInitialState()};e.sheetFile.cells[o.id]=o,-2===a?n.push(o.id):n.splice(a+1,0,o.id),e.localState.cellIdCounter+=1,e.localState.lastCreatedCellId=o.id,es(t,"Created new cell of type '".concat(r,"'"))}else console.log("Invalid afterIndex parameters for insertCell action. "+t.payload)},duplicateCell:(e,t)=>{const{id:o,index:r,contextId:s}=t.payload,a=Xr(e,t.payload),n=t=>{const o=e.sheetFile.cells[t],{type:r}=o,s=JSON.parse(JSON.stringify(o.data));let a;o.contextExtension&&(a=JSON.parse(JSON.stringify(o.contextExtension)));const n={id:e.localState.cellIdCounter,type:r,data:s,idCounter:0,comments:$r.getInitialState(),contextExtension:a};return e.localState.cellIdCounter+=1,e.sheetFile.cells[n.id]=n,n.id};if(void 0!==e.sheetFile.cells[o])if("context"===e.sheetFile.cells[o].type){const s=n(o);a.splice(r+1,0,s);let c=[];for(let t of e.sheetFile.cells[o].data)c.push(n(t));e.sheetFile.cells[s].data=c,es(t,"Duplicated context ".concat(o))}else a.splice(r+1,0,n(o)),es(t,"Duplicated cell ".concat(o));else console.log("Invalid cellId parameter for duplicateCell action. "+t.payload)},updateCellData:(e,t)=>{const{cellLoc:o,data:r}=t.payload,{id:s}=o;void 0!==e.sheetFile.cells[s]?(e.sheetFile.cells[s].data=r,console.log("updating cell ".concat(s," data")),es(t,"Updated cell ".concat(s))):console.log("Invalid cellId parameters for updateCellData action. "+t.payload)},addCellComment:(e,t)=>{const{cellLoc:o,author:r,text:s}=t.payload,{id:a}=o;if(void 0!==e.sheetFile.cells[a]){const o=e.sheetFile.cells[a],n={author:r,text:s,timestamp:(new Date).getTime(),id:o.idCounter++};$r.addOne(o.comments,n),es(t,"Added comment to cell ".concat(a))}else console.log("Invalid cellId parameters for addCellComment action. "+t.payload)},updateCellComment:(e,t)=>{const{cellLoc:o,commentId:r,text:s}=t.payload,{id:a}=o;if(void 0!==e.sheetFile.cells[a]){const o=e.sheetFile.cells[a];$r.updateOne(o.comments,{id:r,changes:{text:s,timestamp:(new Date).getTime()}}),es(t,"Updated comment ".concat(r," in cell ").concat(a))}else console.log("Invalid cellId parameters for updateCellComment action. "+t.payload)},moveUpCell:(e,t)=>{const{index:o}=t.payload,r=Xr(e,t.payload);if(o>=1&&o<r.length){const e=r[o];r.splice(o,1),r.splice(o-1,0,e),es(t,"Moved up cell ".concat(e))}else console.log("Invalid cellIndex parameters for moveUpCell action. "+t.payload)},moveDownCell:(e,t)=>{const{index:o}=t.payload,r=Xr(e,t.payload);if(o>=0&&o<r.length-1){const e=r[o];r.splice(o,1),r.splice(o+1,0,e),es(t,"Moved down cell ".concat(e))}else console.log("Invalid cellIndex parameters for moveDownCell action. "+t.payload)},deleteCell:(e,t)=>{const{id:o,index:r}=t.payload,s=Xr(e,t.payload);if(r>=0&&r<s.length&&void 0!==e.sheetFile.cells[o]){const a=t=>{if("context"===e.sheetFile.cells[t].type)for(let r of e.sheetFile.cells[o].data)a(r),delete e.sheetFile.cells[r]};a(o),delete e.sheetFile.cells[o],s.splice(r,1),es(t,"Removed cell ".concat(o))}else console.log("Invalid payload values for cell deletion. (payload: ".concat(t.payload,")"))},deleteComment:(e,t)=>{const{cellLoc:o,commentId:r}=t.payload,{id:s}=o;if(void 0!==e.sheetFile.cells[s]){const o=e.sheetFile.cells[s];$r.removeOne(o.comments,r),es(t,"Removed comment of cell ".concat(s))}else console.log("Invalid cellId parameter for comment deletion. (payload: ".concat(t.payload,")"))},updateSettings:(e,t)=>{e.sheetFile.settings=t.payload,es(t,"Updated sheet settings")},syncUndoRedoCounter:(e,t)=>{e.localState.undoRedoCounter=t.payload},extendLogicContext:(e,t)=>{const{cellLoc:o,contextExtension:r}=t.payload;JSON.stringify(e.sheetFile.cells[o.id].contextExtension)!==JSON.stringify(r)&&(e.sheetFile.cells[o.id].contextExtension=r,console.log("updating context of ",o))}}});function Yr(e,t){const o=function(e){try{var t=JSON.parse(e);if("object"!==typeof t)return{result:"error",message:"Parsed JSON has to be object, it is ".concat(typeof t)}}catch(s){return{result:"error",message:"JSON parse failed: ".concat(s)}}if("versionNumber"in t&&2===t.versionNumber)try{t=function(e){const t={},o=os(e.cells,t);return{versionNumber:2,settings:e.settings,cells:t,cellsOrder:o}}(t)}catch(s){return{result:"error",message:"Error while deserializing simplified format ".concat(s)}}const{passed:o,error:r}=function(e){let t;const o={cells:"object",cellsOrder:"object"},r={idCounter:"number",editedCellId:"number",firstCellId:"number",lastCellId:"number",versionNumber:"number",settings:"object"};for(const[s]of Object.entries(o))if(!(s in e)){t="Ch\xfdba k\u013e\xfa\u010d '".concat(s,"'");break}if(t)return{passed:!1,error:t};for(const[s,a]of Object.entries(e)){const e=s in o?"REQUIRED":s in r?"OPTIONAL":"UNKNOWN";if("REQUIRED"!==e&&"OPTIONAL"!==e){t="Nezn\xe1mi K\u013e\xfa\u010d '".concat(s,"'");break}if(typeof a!==("REQUIRED"===e?o[s]:r[s])){t="K\u013e\xfa\u010d '".concat(s,"' je nespr\xe1vneho typu");break}}if(t)return{passed:!1,error:t};new Set(e.cellsOrder).size!==e.cellsOrder.length&&(t="Poradie buniek obsahuje duplicitn\xe9 hodnoty");if(t)return{passed:!1,error:t};for(const s of e.cellsOrder)if(!(s in e.cells)){t="Poradie buniek obsahuje neexistuj\xface id";break}return t?{passed:!1,error:t}:{passed:!0}}(t);return o?{result:"success",sheetFile:t}:{result:"error",message:r}}(t);if("success"===o.result){const{sheetFile:t}=o,{localState:r}=e,s=t;return e.sheetFile=t,r.cellIdCounter=Object.entries(s.cells).map((e=>e[1].id)).reduce(((e,t)=>Math.max(e,t)),0)+1,!0}return o.message}function Xr(e,t){let{contextId:o}=t;if(-1===o)return e.sheetFile.cellsOrder;{const t=e.sheetFile.cells[o].data;if(void 0===t)throw Error("getParentCellsList: unknown context id");return t}}function es(e,t){"historyChanged"in e?e.historyChanged(t):console.error("Storage middleware not applied")}const ts={...Zr.actions,addCellComment:function(e){return(t,o)=>{const r=o();if(r.auth.user){const o=r.auth.user.login,{cellLoc:s,text:a}=e;t(Zr.actions.addCellComment({cellLoc:s,author:o,text:a}))}}},remmoveCellComment:function(e){return(t,o)=>{const r=o(),{cellLoc:s,commentId:a}=e,{id:n}=s,c=r.sheet.present.sheetFile.cells[n];if(void 0!==c)if(r.auth.user){const o=r.auth.user.login,n=$r.getSelectors().selectById(c.comments,a);n?n.author===o?t(Zr.actions.deleteComment({cellLoc:s,commentId:a})):console.log("You can delete only your own comments. "+e):console.log("Invalid commentId parameter for removeCellComment action. "+e)}else console.log("Auth state error, can't use remmoveCellComment"+e);else console.log("Invalid cellId parameter for removeCellComment action. "+e)}},insertTextCell:(e,t)=>ts.insertCell({after:t,type:"text",data:e}),insertAppCell:(e,t,o)=>ts.insertCell({after:o,type:e,data:t}),initSheet:function(e,t,o){return(r,s)=>{!function(){for(let e of Object.keys(zr))delete zr[e]}(),r(ts.initFromJson({filename:e,json:t,sheetId:o}))}}};(0,Wr.ZP)(Zr.reducer,{filter:(0,Wr.an)(["sheet/insertCell","sheet/duplicateCell","sheet/updateCellData","sheet/addCellComment","sheet/updateCellComment","sheet/moveUpCell","sheet/moveDownCell","sheet/deleteCell","sheet/deleteComment","sheet/updateSettings","sheet/import"])});o(763);function os(e,t){const o=[];for(let r of e){o.push(r.id);const e=$r.addMany($r.getInitialState(),r.comments),{comments:s,...a}=r;t[r.id]={...a,data:"context"===r.type?os(r.data,t):r.data,idCounter:Math.max(-1,...r.comments.map((e=>e.id)))+1,comments:e}}return o}let rs;self.onmessage=async e=>{const{msg:t,requestId:o}=e.data;if("runCommand"===t.type&&"init"===t.command.type)switch(t.command.payload.engineType){case"github":rs=Rr(t.command.payload);break;case"github1":rs=function(e){const t=new Hr(e.custom.ghToken);return{runCommand:async e=>{switch(console.log("Running command:",e),e.type){case"load":return jr(await t.openCmd(e.payload));case"init":return{result:"success"};case"deleteMergedSession":return jr(await t.deleteMergedSessionCmd());default:throw new Error("Unknown command in github engine: "+e.type)}},runTask:async e=>{switch(console.log("Running task:",e),e.type){case"autosave":return jr(await t.autosaveTask(e.payload));case"merge":return jr(await t.mergeTask());case"handIn":return jr(await t.handInTask(e.payload));default:throw new Error("Unknown task in github engine: "+e.type)}}}}(t.command.payload);break;default:throw new Error("Unknown engine type")}if("runTask"===t.type&&"autosave"===t.task.type){const e=t.task;e.payload.serialized=(r=e.payload.contentObj,JSON.stringify(r,null,2))}var r;if("runCommand"===t.type){const e=await rs.runCommand(t.command);postMessage({requestId:o,result:e})}else if("runTask"===t.type){const e=await rs.runTask(t.task);postMessage({requestId:o,result:e})}}},5696:()=>{}},t={};function o(r){var s=t[r];if(void 0!==s)return s.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,o),a.loaded=!0,a.exports}o.m=e,o.x=()=>{var e=o.O(void 0,[197],(()=>o(50618)));return e=o.O(e)},(()=>{var e=[];o.O=(t,r,s,a)=>{if(!r){var n=1/0;for(l=0;l<e.length;l++){r=e[l][0],s=e[l][1],a=e[l][2];for(var c=!0,i=0;i<r.length;i++)(!1&a||n>=a)&&Object.keys(o.O).every((e=>o.O[e](r[i])))?r.splice(i--,1):(c=!1,a<n&&(n=a));if(c){e.splice(l--,1);var u=s();void 0!==u&&(t=u)}}return t}a=a||0;for(var l=e.length;l>0&&e[l-1][2]>a;l--)e[l]=e[l-1];e[l]=[r,s,a]}})(),o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>"static/js/"+e+".5019673c.chunk.js",o.miniCssF=e=>{},o.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),o.p="/workbook/",(()=>{var e={484:1};o.f.i=(t,r)=>{e[t]||importScripts(o.p+o.u(t))};var t=self.webpackChunkworkbook=self.webpackChunkworkbook||[],r=t.push.bind(t);t.push=t=>{var s=t[0],a=t[1],n=t[2];for(var c in a)o.o(a,c)&&(o.m[c]=a[c]);for(n&&n(o);s.length;)e[s.pop()]=1;r(t)}})(),(()=>{var e=o.x;o.x=()=>o.e(197).then(e)})();o.x()})();
//# sourceMappingURL=484.f525b174.chunk.js.map