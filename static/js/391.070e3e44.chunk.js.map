{"version":3,"file":"static/js/391.070e3e44.chunk.js","mappings":"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","sources":["storageWorker/githubStorage/githubApi/baseQuery.ts","storageWorker/githubStorage/githubApi/lastPage.ts","storageWorker/githubStorage/githubApi/baseApi.ts","storageWorker/githubStorage/githubApi/endpoints/git.ts","storageWorker/githubStorage/githubApi/endpoints/pulls.ts","storageWorker/githubStorage/githubApi/endpoints/repos.ts","storageWorker/githubStorage/githubApi/errorMessage.ts","storageWorker/githubStorage/store.ts","storageWorker/githubStorage/utils.ts","storageWorker/githubStorage/githubStorage.ts","storageWorker/worker.ts","storageWorker/githubStorage/engine.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { BaseQueryFn, FetchArgs, fetchBaseQuery, FetchBaseQueryError, FetchBaseQueryMeta } from \"@reduxjs/toolkit/query/react\";\nimport { RootState } from \"../store\";\n\nconst baseQuery = fetchBaseQuery({ \n  baseUrl: \"https://api.github.com/\",\n  prepareHeaders: (headers, { getState }) => {\n    \n    const accessToken = (getState() as RootState).sheetStorage.ghToken;\n    if (accessToken) {\n      headers.append('Authorization', `token ${accessToken}`);\n    }\n    return headers;\n  },\n  cache: 'no-cache',\n\n });\n\n const githubBaseQuery: BaseQueryFn<\n  string | FetchArgs,\n  unknown, FetchBaseQueryError,\n  {},\n  FetchBaseQueryMeta\n> = async (args, api, extraOptions) => {\n  /* Detect when query returns http status 401 (Unauthorized) which means accessToken \n   * is invalid or expired.\n   */\n  let result = await baseQuery(args, api, extraOptions)\n  /*\n  if (result.error && result.error.status === 401) {\n    clearSavedAuthState();\n    api.dispatch(authActions.setAuthState('tokenExpired'));\n  }\n  */\n  return result;\n};\n\nexport default githubBaseQuery;\n","export default function githubApiParseLastPage(link?: string) {\n  let lastPage: number | null = null;\n  if (link) {\n    link.split(', ').forEach(item => {\n      const parts = item.split('; ');\n      if (parts[1] === 'rel=\"last\"') {\n        const match = parts[0].match(/.*[?&]+page=([0-9]+)/)\n        /* was positive integer parsed? */\n        if (match && match[1] !== undefined && /^\\d+$/.test(match[1])) {\n          lastPage = parseInt(match[1]);\n        }\n      }\n    })\n  }\n  if (!lastPage) {\n    return 1\n  } else {\n    return lastPage;\n  }\n}","import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport githubBaseQuery from \"./baseQuery\";\nimport { ReposListBranchesApiArg, ReposListBranchesApiResponse, ReposListForAuthenticatedUserApiArg, ReposListForUserApiArg, ReposMergeApiArg, ReposMergeApiResponse } from \"./endpoints/repos\";\nimport { SearchReposApiArg } from \"./endpoints/search\";\nimport githubApiParseLastPage from \"./lastPage\";\n\nexport const githubApi = createApi({\n  reducerPath: \"githubApi\",\n  baseQuery: githubBaseQuery,\n  tagTypes: ['Files', 'Refs', 'Pulls'],\n  endpoints: (build) => ({\n    reposListForUserHeaders: build.query<{ link?: string }, ReposListForUserApiArg>({\n      query: (queryArg) => ({\n        url: `/users/${queryArg.username}/repos`,\n        method: 'HEAD',\n        params: {\n          type: queryArg['type'],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    reposListForAuthenticatedUserHeaders: build.query<{ link?: string }, ReposListForAuthenticatedUserApiArg>({\n      query: (queryArg) => ({\n        method: 'HEAD',\n        url: `/user/repos`,\n        params: {\n          visibility: queryArg.visibility,\n          affiliation: queryArg.affiliation,\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n          since: queryArg.since,\n          before: queryArg.before,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    searchReposHeaders: build.query<{ link?: string }, SearchReposApiArg>({\n      query: (queryArg) => ({\n        method: 'HEAD',\n        url: `/search/repositories`,\n        params: {\n          q: queryArg.q,\n          sort: queryArg.sort,\n          order: queryArg.order,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    reposListBranchesHeaders: build.query<{ link?: string }, ReposListBranchesApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches`,\n        params: {\n          protected: queryArg[\"protected\"],\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        return { link: meta?.response?.headers.get(\"link\") || undefined }\n      }\n    }),\n    reposListAllBranches: build.query<ReposListBranchesApiResponse, { owner: string, repo: string, protected?: boolean }>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches`,\n        params: {\n          protected: queryArg[\"protected\"],\n          per_page: 50\n        },\n      }),\n      async onQueryStarted({ owner, repo }, { dispatch, getState, queryFulfilled, updateCachedData }) {\n        let headers = await githubApi.endpoints.reposListBranchesHeaders.initiate({ owner, repo, perPage: 50 })(dispatch, getState, null)\n        if (headers.isSuccess) {\n          const lastPage = githubApiParseLastPage(headers.data.link);\n          try {\n            let result = await queryFulfilled\n            console.log('reposListAllBranches: got result ', result, ' lastPage is ', lastPage);\n            let extraBranches: ReposListBranchesApiResponse = []\n            for (let page = 1; page < lastPage; page++) {\n              //const r1 = await reposApi.endpoints.reposListBranches.initiate({owner, repo, page, perPage: 50})(dispatch, getState, null)\n              console.log('loading extra branches on page ', page);\n              /*if (r1.isSuccess) {\n                extraBranches = extraBranches.concat(r1.data)\n              } else {\n                // TODO\n              }*/\n            }\n            updateCachedData(recipe => recipe.concat(extraBranches))\n          } catch (err) {\n            // TODO\n          }\n        }\n      },\n    }),\n    reposMergeWithResponseCode: build.mutation<{ status: number, response: ReposMergeApiResponse }, ReposMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merges`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      transformResponse: (baseQueryReturnValue, meta, arg) => {\n        console.log(meta);\n        return { status: meta?.response?.status || -1, response: baseQueryReturnValue as ReposMergeApiResponse}\n      },\n    }),\n    reposRenameBranchWithResponseCode: build.mutation<{ status: number, reponse: ReposMergeApiResponse }, ReposMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merges`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      transformResponse: (baseQueryReturnValue, meta, arg) => {\n        console.log(meta);\n        return { status: 0, reponse: undefined }\n      },\n    }),\n  }),\n});\n\n//export { githubApi }\nexport const { useReposListForUserHeadersQuery, useReposListForAuthenticatedUserHeadersQuery, useSearchReposHeadersQuery, useReposListBranchesHeadersQuery, useReposListAllBranchesQuery } = githubApi;","import { githubApi as api } from \"../baseApi\";\nconst injectedRtkApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    gitignoreGetAllTemplates: build.query<\n      GitignoreGetAllTemplatesApiResponse,\n      GitignoreGetAllTemplatesApiArg\n    >({\n      query: () => ({ url: `/gitignore/templates` }),\n    }),\n    gitignoreGetTemplate: build.query<\n      GitignoreGetTemplateApiResponse,\n      GitignoreGetTemplateApiArg\n    >({\n      query: (queryArg) => ({ url: `/gitignore/templates/${queryArg.name}` }),\n    }),\n    gitCreateBlob: build.mutation<\n      GitCreateBlobApiResponse,\n      GitCreateBlobApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/blobs`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetBlob: build.query<GitGetBlobApiResponse, GitGetBlobApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/blobs/${queryArg.fileSha}`,\n      }),\n    }),\n    gitCreateCommit: build.mutation<\n      GitCreateCommitApiResponse,\n      GitCreateCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/commits`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetCommit: build.query<GitGetCommitApiResponse, GitGetCommitApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/commits/${queryArg.commitSha}`,\n      }),\n    }),\n    gitListMatchingRefs: build.query<\n      GitListMatchingRefsApiResponse,\n      GitListMatchingRefsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/matching-refs/${queryArg.ref}`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    gitGetRef: build.query<GitGetRefApiResponse, GitGetRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/ref/${queryArg.ref}`,\n      }),\n    }),\n    gitCreateRef: build.mutation<GitCreateRefApiResponse, GitCreateRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/refs`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Refs']\n    }),\n    gitUpdateRef: build.mutation<GitUpdateRefApiResponse, GitUpdateRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/refs/${queryArg.ref}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Refs']\n    }),\n    gitDeleteRef: build.mutation<GitDeleteRefApiResponse, GitDeleteRefApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/refs/${queryArg.ref}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: ['Refs']\n    }),\n    gitCreateTag: build.mutation<GitCreateTagApiResponse, GitCreateTagApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/tags`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetTag: build.query<GitGetTagApiResponse, GitGetTagApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/tags/${queryArg.tagSha}`,\n      }),\n    }),\n    gitCreateTree: build.mutation<\n      GitCreateTreeApiResponse,\n      GitCreateTreeApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/trees`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    gitGetTree: build.query<GitGetTreeApiResponse, GitGetTreeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/git/trees/${queryArg.treeSha}`,\n        params: { recursive: queryArg.recursive },\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\nexport { injectedRtkApi as githubApi };\nexport type GitignoreGetAllTemplatesApiResponse =\n  /** status 200 Response */ string[];\nexport type GitignoreGetAllTemplatesApiArg = void;\nexport type GitignoreGetTemplateApiResponse =\n  /** status 200 Response */ GitignoreTemplate;\nexport type GitignoreGetTemplateApiArg = {\n  name: string;\n};\nexport type GitCreateBlobApiResponse = /** status 201 Response */ ShortBlob;\nexport type GitCreateBlobApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    content: string;\n    encoding?: string;\n  };\n};\nexport type GitGetBlobApiResponse = /** status 200 Response */ Blob;\nexport type GitGetBlobApiArg = {\n  owner: string;\n  repo: string;\n  fileSha: string;\n};\nexport type GitCreateCommitApiResponse = /** status 201 Response */ GitCommit;\nexport type GitCreateCommitApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    message: string;\n    tree: string;\n    parents?: string[];\n    author?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n    committer?: {\n      name?: string;\n      email?: string;\n      date?: string;\n    };\n    signature?: string;\n  };\n};\nexport type GitGetCommitApiResponse = /** status 200 Response */ GitCommit;\nexport type GitGetCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n};\nexport type GitListMatchingRefsApiResponse =\n  /** status 200 Response */ GitReference[];\nexport type GitListMatchingRefsApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type GitGetRefApiResponse = /** status 200 Response */ GitReference;\nexport type GitGetRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n};\nexport type GitCreateRefApiResponse = /** status 201 Response */ GitReference;\nexport type GitCreateRefApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    ref: string;\n    sha: string;\n    key?: string;\n  };\n};\nexport type GitUpdateRefApiResponse = /** status 200 Response */ GitReference;\nexport type GitUpdateRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  body: {\n    sha: string;\n    force?: boolean;\n  };\n};\nexport type GitDeleteRefApiResponse = /** status 204 Response */ undefined;\nexport type GitDeleteRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n};\nexport type GitCreateTagApiResponse = /** status 201 Response */ GitTag;\nexport type GitCreateTagApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tag: string;\n    message: string;\n    object: string;\n    type: \"commit\" | \"tree\" | \"blob\";\n    tagger?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n  };\n};\nexport type GitGetTagApiResponse = /** status 200 Response */ GitTag;\nexport type GitGetTagApiArg = {\n  owner: string;\n  repo: string;\n  tagSha: string;\n};\nexport type GitCreateTreeApiResponse = /** status 201 Response */ GitTree;\nexport type GitCreateTreeApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tree: {\n      path?: string;\n      mode?: \"100644\" | \"100755\" | \"040000\" | \"160000\" | \"120000\";\n      type?: \"blob\" | \"tree\" | \"commit\";\n      sha?: string | null;\n      content?: string;\n    }[];\n    base_tree?: string;\n  };\n};\nexport type GitGetTreeApiResponse = /** status 200 Response */ GitTree;\nexport type GitGetTreeApiArg = {\n  owner: string;\n  repo: string;\n  treeSha: string;\n  /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n  recursive?: string;\n};\nexport type GitignoreTemplate = {\n  name: string;\n  source: string;\n};\nexport type ShortBlob = {\n  url: string;\n  sha: string;\n};\nexport type BasicError = {\n  message?: string;\n  documentation_url?: string;\n  url?: string;\n  status?: string;\n};\nexport type ValidationError = {\n  message: string;\n  documentation_url: string;\n  errors?: {\n    resource?: string;\n    field?: string;\n    message?: string;\n    code: string;\n    index?: number;\n    value?: (string | null) | (number | null) | (string[] | null);\n  }[];\n};\nexport type Blob = {\n  content: string;\n  encoding: string;\n  url: string;\n  sha: string;\n  size: number | null;\n  node_id: string;\n  highlighted_content?: string;\n};\nexport type GitCommit = {\n  sha: string;\n  node_id: string;\n  url: string;\n  author: {\n    date: string;\n    email: string;\n    name: string;\n  };\n  committer: {\n    date: string;\n    email: string;\n    name: string;\n  };\n  message: string;\n  tree: {\n    sha: string;\n    url: string;\n  };\n  parents: {\n    sha: string;\n    url: string;\n    html_url: string;\n  }[];\n  verification: {\n    verified: boolean;\n    reason: string;\n    signature: string | null;\n    payload: string | null;\n  };\n  html_url: string;\n};\nexport type GitReference = {\n  ref: string;\n  node_id: string;\n  url: string;\n  object: {\n    type: string;\n    sha: string;\n    url: string;\n  };\n};\nexport type Verification = {\n  verified: boolean;\n  reason: string;\n  payload: string | null;\n  signature: string | null;\n};\nexport type GitTag = {\n  node_id: string;\n  tag: string;\n  sha: string;\n  url: string;\n  message: string;\n  tagger: {\n    date: string;\n    email: string;\n    name: string;\n  };\n  object: {\n    sha: string;\n    type: string;\n    url: string;\n  };\n  verification?: Verification;\n};\nexport type GitTree = {\n  sha: string;\n  url: string;\n  truncated: boolean;\n  tree: {\n    path?: string;\n    mode?: string;\n    type?: string;\n    sha?: string;\n    size?: number;\n    url?: string;\n  }[];\n};\nexport const {\n  useGitignoreGetAllTemplatesQuery,\n  useGitignoreGetTemplateQuery,\n  useGitCreateBlobMutation,\n  useGitGetBlobQuery,\n  useGitCreateCommitMutation,\n  useGitGetCommitQuery,\n  useGitListMatchingRefsQuery,\n  useGitGetRefQuery,\n  useGitCreateRefMutation,\n  useGitUpdateRefMutation,\n  useGitDeleteRefMutation,\n  useGitCreateTagMutation,\n  useGitGetTagQuery,\n  useGitCreateTreeMutation,\n  useGitGetTreeQuery,\n} = injectedRtkApi;\n","import { githubApi as api } from \"../baseApi\";\nconst injectedRtkApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    pullsList: build.query<PullsListApiResponse, PullsListApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls`,\n        params: {\n          state: queryArg.state,\n          head: queryArg.head,\n          base: queryArg.base,\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      providesTags: ['Pulls']\n    }),\n    pullsListWH: build.query<{response: PullsListApiResponse, headers: {[key: string]: string}}, PullsListApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls`,\n        params: {\n          state: queryArg.state,\n          head: queryArg.head,\n          base: queryArg.base,\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      transformResponse(apiResponse, meta) {\n        let headers: {[key: string]: string} = {};\n        meta?.response?.headers.forEach((value, key) => headers[key] = value);\n        return {response: apiResponse as PullsListApiResponse, headers}\n      },\n      providesTags: ['Pulls']\n    }),\n    pullsCreate: build.mutation<PullsCreateApiResponse, PullsCreateApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Pulls']\n    }),\n    pullsListReviewCommentsForRepo: build.query<\n      PullsListReviewCommentsForRepoApiResponse,\n      PullsListReviewCommentsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments`,\n        params: {\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          since: queryArg.since,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    pullsGetReviewComment: build.query<\n      PullsGetReviewCommentApiResponse,\n      PullsGetReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments/${queryArg.commentId}`,\n      }),\n    }),\n    pullsUpdateReviewComment: build.mutation<\n      PullsUpdateReviewCommentApiResponse,\n      PullsUpdateReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments/${queryArg.commentId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsDeleteReviewComment: build.mutation<\n      PullsDeleteReviewCommentApiResponse,\n      PullsDeleteReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/comments/${queryArg.commentId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    pullsGet: build.query<PullsGetApiResponse, PullsGetApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}`,\n      }),\n    }),\n    pullsUpdate: build.mutation<PullsUpdateApiResponse, PullsUpdateApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsListReviewComments: build.query<\n      PullsListReviewCommentsApiResponse,\n      PullsListReviewCommentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/comments`,\n        params: {\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          since: queryArg.since,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    pullsCreateReviewComment: build.mutation<\n      PullsCreateReviewCommentApiResponse,\n      PullsCreateReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/comments`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsCreateReplyForReviewComment: build.mutation<\n      PullsCreateReplyForReviewCommentApiResponse,\n      PullsCreateReplyForReviewCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/comments/${queryArg.commentId}/replies`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsListCommits: build.query<\n      PullsListCommitsApiResponse,\n      PullsListCommitsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/commits`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsListFiles: build.query<\n      PullsListFilesApiResponse,\n      PullsListFilesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/files`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsCheckIfMerged: build.query<\n      PullsCheckIfMergedApiResponse,\n      PullsCheckIfMergedApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/merge`,\n      }),\n    }),\n    pullsMerge: build.mutation<PullsMergeApiResponse, PullsMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/merge`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n      invalidatesTags: ['Files', 'Pulls'],  // workbook file changes after merge \n    }),\n    pullsListRequestedReviewers: build.query<\n      PullsListRequestedReviewersApiResponse,\n      PullsListRequestedReviewersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/requested_reviewers`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsRequestReviewers: build.mutation<\n      PullsRequestReviewersApiResponse,\n      PullsRequestReviewersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/requested_reviewers`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsRemoveRequestedReviewers: build.mutation<\n      PullsRemoveRequestedReviewersApiResponse,\n      PullsRemoveRequestedReviewersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/requested_reviewers`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsListReviews: build.query<\n      PullsListReviewsApiResponse,\n      PullsListReviewsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsCreateReview: build.mutation<\n      PullsCreateReviewApiResponse,\n      PullsCreateReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsGetReview: build.query<\n      PullsGetReviewApiResponse,\n      PullsGetReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}`,\n      }),\n    }),\n    pullsUpdateReview: build.mutation<\n      PullsUpdateReviewApiResponse,\n      PullsUpdateReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsDeletePendingReview: build.mutation<\n      PullsDeletePendingReviewApiResponse,\n      PullsDeletePendingReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    pullsListCommentsForReview: build.query<\n      PullsListCommentsForReviewApiResponse,\n      PullsListCommentsForReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}/comments`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    pullsDismissReview: build.mutation<\n      PullsDismissReviewApiResponse,\n      PullsDismissReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}/dismissals`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsSubmitReview: build.mutation<\n      PullsSubmitReviewApiResponse,\n      PullsSubmitReviewApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/reviews/${queryArg.reviewId}/events`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    pullsUpdateBranch: build.mutation<\n      PullsUpdateBranchApiResponse,\n      PullsUpdateBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pulls/${queryArg.pullNumber}/update-branch`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\nexport { injectedRtkApi as githubApi };\nexport type PullsListApiResponse =\n  /** status 200 Response */ PullRequestSimple[];\nexport type PullsListApiArg = {\n  owner: string;\n  repo: string;\n  /** Either `open`, `closed`, or `all` to filter by state. */\n  state?: \"open\" | \"closed\" | \"all\";\n  /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n  head?: string;\n  /** Filter pulls by base branch name. Example: `gh-pages`. */\n  base?: string;\n  /** What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month). */\n  sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\";\n  /** The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCreateApiResponse = /** status 201 Response */ PullRequest;\nexport type PullsCreateApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    title?: string;\n    head: string;\n    base: string;\n    body?: string;\n    maintainer_can_modify?: boolean;\n    draft?: boolean;\n    issue?: number;\n  };\n};\nexport type PullsListReviewCommentsForRepoApiResponse =\n  /** status 200 Response */ PullRequestReviewComment[];\nexport type PullsListReviewCommentsForRepoApiArg = {\n  owner: string;\n  repo: string;\n  sort?: \"created\" | \"updated\" | \"created_at\";\n  /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */\n  direction?: \"asc\" | \"desc\";\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsGetReviewCommentApiResponse =\n  /** status 200 Response */ PullRequestReviewComment;\nexport type PullsGetReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type PullsUpdateReviewCommentApiResponse =\n  /** status 200 Response */ PullRequestReviewComment;\nexport type PullsUpdateReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n  body: {\n    body: string;\n  };\n};\nexport type PullsDeleteReviewCommentApiResponse =\n  /** status 204 Response */ undefined;\nexport type PullsDeleteReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type PullsGetApiResponse =\n  /** status 200 Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. */ PullRequest;\nexport type PullsGetApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n};\nexport type PullsUpdateApiResponse = /** status 200 Response */ PullRequest;\nexport type PullsUpdateApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    title?: string;\n    body?: string;\n    state?: \"open\" | \"closed\";\n    base?: string;\n    maintainer_can_modify?: boolean;\n  };\n};\nexport type PullsListReviewCommentsApiResponse =\n  /** status 200 Response */ PullRequestReviewComment[];\nexport type PullsListReviewCommentsApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n  sort?: \"created\" | \"updated\";\n  /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */\n  direction?: \"asc\" | \"desc\";\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCreateReviewCommentApiResponse =\n  /** status 201 Response */ PullRequestReviewComment;\nexport type PullsCreateReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    body: string;\n    commit_id?: string;\n    path?: string;\n    position?: number;\n    side?: \"LEFT\" | \"RIGHT\";\n    line?: number;\n    start_line?: number;\n    start_side?: \"LEFT\" | \"RIGHT\" | \"side\";\n    in_reply_to?: number;\n  };\n};\nexport type PullsCreateReplyForReviewCommentApiResponse =\n  /** status 201 Response */ PullRequestReviewComment;\nexport type PullsCreateReplyForReviewCommentApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** comment_id parameter */\n  commentId: number;\n  body: {\n    body: string;\n  };\n};\nexport type PullsListCommitsApiResponse = /** status 200 Response */ Commit[];\nexport type PullsListCommitsApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsListFilesApiResponse = /** status 200 Response */ DiffEntry[];\nexport type PullsListFilesApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCheckIfMergedApiResponse = unknown;\nexport type PullsCheckIfMergedApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n};\nexport type PullsMergeApiResponse =\n  /** status 200 if merge was successful */ PullRequestMergeResult;\nexport type PullsMergeApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    commit_title?: string;\n    commit_message?: string;\n    sha?: string;\n    merge_method?: \"merge\" | \"squash\" | \"rebase\";\n  } | null;\n};\nexport type PullsListRequestedReviewersApiResponse =\n  /** status 200 Response */ PullRequestReviewRequest;\nexport type PullsListRequestedReviewersApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsRequestReviewersApiResponse =\n  /** status 201 Response */ PullRequestSimple;\nexport type PullsRequestReviewersApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: any | any;\n};\nexport type PullsRemoveRequestedReviewersApiResponse =\n  /** status 200 Response */ PullRequestSimple;\nexport type PullsRemoveRequestedReviewersApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    reviewers: string[];\n    team_reviewers?: string[];\n  };\n};\nexport type PullsListReviewsApiResponse =\n  /** status 200 The list of reviews returns in chronological order. */ PullRequestReview[];\nexport type PullsListReviewsApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsCreateReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsCreateReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    commit_id?: string;\n    body?: string;\n    event?: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\";\n    comments?: {\n      path: string;\n      position?: number;\n      body: string;\n      line?: number;\n      side?: string;\n      start_line?: number;\n      start_side?: string;\n    }[];\n  };\n};\nexport type PullsGetReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsGetReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n};\nexport type PullsUpdateReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsUpdateReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  body: {\n    body: string;\n  };\n};\nexport type PullsDeletePendingReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsDeletePendingReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n};\nexport type PullsListCommentsForReviewApiResponse =\n  /** status 200 Response */ LegacyReviewComment[];\nexport type PullsListCommentsForReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type PullsDismissReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsDismissReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  body: {\n    message: string;\n    event?: string;\n  };\n};\nexport type PullsSubmitReviewApiResponse =\n  /** status 200 Response */ PullRequestReview;\nexport type PullsSubmitReviewApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  /** review_id parameter */\n  reviewId: number;\n  body: {\n    body?: string;\n    event: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\";\n  };\n};\nexport type PullsUpdateBranchApiResponse = /** status 202 Response */ {\n  message?: string;\n  url?: string;\n};\nexport type PullsUpdateBranchApiArg = {\n  owner: string;\n  repo: string;\n  pullNumber: number;\n  body: {\n    expected_head_sha?: string;\n  } | null;\n};\nexport type SimpleUser = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n} | null;\nexport type Milestone = {\n  url: string;\n  html_url: string;\n  labels_url: string;\n  id: number;\n  node_id: string;\n  number: number;\n  state: \"open\" | \"closed\";\n  title: string;\n  description: string | null;\n  creator: SimpleUser;\n  open_issues: number;\n  closed_issues: number;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  due_on: string | null;\n} | null;\nexport type SimpleUser2 = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n};\nexport type TeamSimple = {\n  id: number;\n  node_id: string;\n  url: string;\n  members_url: string;\n  name: string;\n  description: string | null;\n  permission: string;\n  privacy?: string;\n  html_url: string;\n  repositories_url: string;\n  slug: string;\n  ldap_dn?: string;\n} | null;\nexport type Team = {\n  id: number;\n  node_id: string;\n  name: string;\n  slug: string;\n  description: string | null;\n  privacy?: string;\n  permission: string;\n  permissions?: {\n    pull: boolean;\n    triage: boolean;\n    push: boolean;\n    maintain: boolean;\n    admin: boolean;\n  };\n  url: string;\n  html_url: string;\n  members_url: string;\n  repositories_url: string;\n  parent: TeamSimple;\n};\nexport type LicenseSimple = {\n  key: string;\n  name: string;\n  url: string | null;\n  spdx_id: string | null;\n  node_id: string;\n  html_url?: string;\n} | null;\nexport type Repository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: LicenseSimple;\n  organization?: SimpleUser;\n  forks: number;\n  permissions?: {\n    admin: boolean;\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n  };\n  owner: SimpleUser2;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  allow_rebase_merge?: boolean;\n  template_repository?: {\n    id?: number;\n    node_id?: string;\n    name?: string;\n    full_name?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      avatar_url?: string;\n      gravatar_id?: string;\n      url?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      repos_url?: string;\n      events_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    private?: boolean;\n    html_url?: string;\n    description?: string;\n    fork?: boolean;\n    url?: string;\n    archive_url?: string;\n    assignees_url?: string;\n    blobs_url?: string;\n    branches_url?: string;\n    collaborators_url?: string;\n    comments_url?: string;\n    commits_url?: string;\n    compare_url?: string;\n    contents_url?: string;\n    contributors_url?: string;\n    deployments_url?: string;\n    downloads_url?: string;\n    events_url?: string;\n    forks_url?: string;\n    git_commits_url?: string;\n    git_refs_url?: string;\n    git_tags_url?: string;\n    git_url?: string;\n    issue_comment_url?: string;\n    issue_events_url?: string;\n    issues_url?: string;\n    keys_url?: string;\n    labels_url?: string;\n    languages_url?: string;\n    merges_url?: string;\n    milestones_url?: string;\n    notifications_url?: string;\n    pulls_url?: string;\n    releases_url?: string;\n    ssh_url?: string;\n    stargazers_url?: string;\n    statuses_url?: string;\n    subscribers_url?: string;\n    subscription_url?: string;\n    tags_url?: string;\n    teams_url?: string;\n    trees_url?: string;\n    clone_url?: string;\n    mirror_url?: string;\n    hooks_url?: string;\n    svn_url?: string;\n    homepage?: string;\n    language?: string;\n    forks_count?: number;\n    stargazers_count?: number;\n    watchers_count?: number;\n    size?: number;\n    default_branch?: string;\n    open_issues_count?: number;\n    is_template?: boolean;\n    topics?: string[];\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    has_pages?: boolean;\n    has_downloads?: boolean;\n    archived?: boolean;\n    disabled?: boolean;\n    visibility?: string;\n    pushed_at?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      admin?: boolean;\n      maintain?: boolean;\n      push?: boolean;\n      triage?: boolean;\n      pull?: boolean;\n    };\n    allow_rebase_merge?: boolean;\n    temp_clone_token?: string;\n    allow_squash_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    allow_update_branch?: boolean;\n    allow_merge_commit?: boolean;\n    subscribers_count?: number;\n    network_count?: number;\n  } | null;\n  temp_clone_token?: string;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  open_issues: number;\n  watchers: number;\n  master_branch?: string;\n  starred_at?: string;\n};\nexport type Link = {\n  href: string;\n};\nexport type AuthorAssociation =\n  | \"COLLABORATOR\"\n  | \"CONTRIBUTOR\"\n  | \"FIRST_TIMER\"\n  | \"FIRST_TIME_CONTRIBUTOR\"\n  | \"MANNEQUIN\"\n  | \"MEMBER\"\n  | \"NONE\"\n  | \"OWNER\";\nexport type AutoMerge = {\n  enabled_by: SimpleUser2;\n  merge_method: \"merge\" | \"squash\" | \"rebase\";\n  commit_title: string;\n  commit_message: string;\n} | null;\nexport type PullRequestSimple = {\n  url: string;\n  id: number;\n  node_id: string;\n  html_url: string;\n  diff_url: string;\n  patch_url: string;\n  issue_url: string;\n  commits_url: string;\n  review_comments_url: string;\n  review_comment_url: string;\n  comments_url: string;\n  statuses_url: string;\n  number: number;\n  state: string;\n  locked: boolean;\n  title: string;\n  user: SimpleUser;\n  body: string | null;\n  labels: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string;\n    color: string;\n    default: boolean;\n  }[];\n  milestone: Milestone;\n  active_lock_reason?: string | null;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  merged_at: string | null;\n  merge_commit_sha: string | null;\n  assignee: SimpleUser;\n  assignees?: SimpleUser2[] | null;\n  requested_reviewers?: SimpleUser2[] | null;\n  requested_teams?: Team[] | null;\n  head: {\n    label: string;\n    ref: string;\n    repo: Repository;\n    sha: string;\n    user: SimpleUser;\n  };\n  base: {\n    label: string;\n    ref: string;\n    repo: Repository;\n    sha: string;\n    user: SimpleUser;\n  };\n  _links: {\n    comments: Link;\n    commits: Link;\n    statuses: Link;\n    html: Link;\n    issue: Link;\n    review_comments: Link;\n    review_comment: Link;\n    self: Link;\n  };\n  author_association: AuthorAssociation;\n  auto_merge: AutoMerge;\n  draft?: boolean;\n};\nexport type ValidationError = {\n  message: string;\n  documentation_url: string;\n  errors?: {\n    resource?: string;\n    field?: string;\n    message?: string;\n    code: string;\n    index?: number;\n    value?: (string | null) | (number | null) | (string[] | null);\n  }[];\n};\nexport type TeamSimple2 = {\n  id: number;\n  node_id: string;\n  url: string;\n  members_url: string;\n  name: string;\n  description: string | null;\n  permission: string;\n  privacy?: string;\n  html_url: string;\n  repositories_url: string;\n  slug: string;\n  ldap_dn?: string;\n};\nexport type PullRequest = {\n  url: string;\n  id: number;\n  node_id: string;\n  html_url: string;\n  diff_url: string;\n  patch_url: string;\n  issue_url: string;\n  commits_url: string;\n  review_comments_url: string;\n  review_comment_url: string;\n  comments_url: string;\n  statuses_url: string;\n  number: number;\n  state: \"open\" | \"closed\";\n  locked: boolean;\n  title: string;\n  user: SimpleUser;\n  body: string | null;\n  labels: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string | null;\n    color: string;\n    default: boolean;\n  }[];\n  milestone: Milestone;\n  active_lock_reason?: string | null;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  merged_at: string | null;\n  merge_commit_sha: string | null;\n  assignee: SimpleUser;\n  assignees?: SimpleUser2[] | null;\n  requested_reviewers?: SimpleUser2[] | null;\n  requested_teams?: TeamSimple2[] | null;\n  head: {\n    label: string;\n    ref: string;\n    repo: {\n      archive_url: string;\n      assignees_url: string;\n      blobs_url: string;\n      branches_url: string;\n      collaborators_url: string;\n      comments_url: string;\n      commits_url: string;\n      compare_url: string;\n      contents_url: string;\n      contributors_url: string;\n      deployments_url: string;\n      description: string | null;\n      downloads_url: string;\n      events_url: string;\n      fork: boolean;\n      forks_url: string;\n      full_name: string;\n      git_commits_url: string;\n      git_refs_url: string;\n      git_tags_url: string;\n      hooks_url: string;\n      html_url: string;\n      id: number;\n      node_id: string;\n      issue_comment_url: string;\n      issue_events_url: string;\n      issues_url: string;\n      keys_url: string;\n      labels_url: string;\n      languages_url: string;\n      merges_url: string;\n      milestones_url: string;\n      name: string;\n      notifications_url: string;\n      owner: {\n        avatar_url: string;\n        events_url: string;\n        followers_url: string;\n        following_url: string;\n        gists_url: string;\n        gravatar_id: string | null;\n        html_url: string;\n        id: number;\n        node_id: string;\n        login: string;\n        organizations_url: string;\n        received_events_url: string;\n        repos_url: string;\n        site_admin: boolean;\n        starred_url: string;\n        subscriptions_url: string;\n        type: string;\n        url: string;\n      };\n      private: boolean;\n      pulls_url: string;\n      releases_url: string;\n      stargazers_url: string;\n      statuses_url: string;\n      subscribers_url: string;\n      subscription_url: string;\n      tags_url: string;\n      teams_url: string;\n      trees_url: string;\n      url: string;\n      clone_url: string;\n      default_branch: string;\n      forks: number;\n      forks_count: number;\n      git_url: string;\n      has_downloads: boolean;\n      has_issues: boolean;\n      has_projects: boolean;\n      has_wiki: boolean;\n      has_pages: boolean;\n      homepage: string | null;\n      language: string | null;\n      master_branch?: string;\n      archived: boolean;\n      disabled: boolean;\n      visibility?: string;\n      mirror_url: string | null;\n      open_issues: number;\n      open_issues_count: number;\n      permissions?: {\n        admin: boolean;\n        maintain?: boolean;\n        push: boolean;\n        triage?: boolean;\n        pull: boolean;\n      };\n      temp_clone_token?: string;\n      allow_merge_commit?: boolean;\n      allow_squash_merge?: boolean;\n      allow_rebase_merge?: boolean;\n      license: {\n        key: string;\n        name: string;\n        url: string | null;\n        spdx_id: string | null;\n        node_id: string;\n      } | null;\n      pushed_at: string;\n      size: number;\n      ssh_url: string;\n      stargazers_count: number;\n      svn_url: string;\n      topics?: string[];\n      watchers: number;\n      watchers_count: number;\n      created_at: string;\n      updated_at: string;\n      allow_forking?: boolean;\n      is_template?: boolean;\n    } | null;\n    sha: string;\n    user: {\n      avatar_url: string;\n      events_url: string;\n      followers_url: string;\n      following_url: string;\n      gists_url: string;\n      gravatar_id: string | null;\n      html_url: string;\n      id: number;\n      node_id: string;\n      login: string;\n      organizations_url: string;\n      received_events_url: string;\n      repos_url: string;\n      site_admin: boolean;\n      starred_url: string;\n      subscriptions_url: string;\n      type: string;\n      url: string;\n    };\n  };\n  base: {\n    label: string;\n    ref: string;\n    repo: {\n      archive_url: string;\n      assignees_url: string;\n      blobs_url: string;\n      branches_url: string;\n      collaborators_url: string;\n      comments_url: string;\n      commits_url: string;\n      compare_url: string;\n      contents_url: string;\n      contributors_url: string;\n      deployments_url: string;\n      description: string | null;\n      downloads_url: string;\n      events_url: string;\n      fork: boolean;\n      forks_url: string;\n      full_name: string;\n      git_commits_url: string;\n      git_refs_url: string;\n      git_tags_url: string;\n      hooks_url: string;\n      html_url: string;\n      id: number;\n      is_template?: boolean;\n      node_id: string;\n      issue_comment_url: string;\n      issue_events_url: string;\n      issues_url: string;\n      keys_url: string;\n      labels_url: string;\n      languages_url: string;\n      merges_url: string;\n      milestones_url: string;\n      name: string;\n      notifications_url: string;\n      owner: {\n        avatar_url: string;\n        events_url: string;\n        followers_url: string;\n        following_url: string;\n        gists_url: string;\n        gravatar_id: string | null;\n        html_url: string;\n        id: number;\n        node_id: string;\n        login: string;\n        organizations_url: string;\n        received_events_url: string;\n        repos_url: string;\n        site_admin: boolean;\n        starred_url: string;\n        subscriptions_url: string;\n        type: string;\n        url: string;\n      };\n      private: boolean;\n      pulls_url: string;\n      releases_url: string;\n      stargazers_url: string;\n      statuses_url: string;\n      subscribers_url: string;\n      subscription_url: string;\n      tags_url: string;\n      teams_url: string;\n      trees_url: string;\n      url: string;\n      clone_url: string;\n      default_branch: string;\n      forks: number;\n      forks_count: number;\n      git_url: string;\n      has_downloads: boolean;\n      has_issues: boolean;\n      has_projects: boolean;\n      has_wiki: boolean;\n      has_pages: boolean;\n      homepage: string | null;\n      language: string | null;\n      master_branch?: string;\n      archived: boolean;\n      disabled: boolean;\n      visibility?: string;\n      mirror_url: string | null;\n      open_issues: number;\n      open_issues_count: number;\n      permissions?: {\n        admin: boolean;\n        maintain?: boolean;\n        push: boolean;\n        triage?: boolean;\n        pull: boolean;\n      };\n      temp_clone_token?: string;\n      allow_merge_commit?: boolean;\n      allow_squash_merge?: boolean;\n      allow_rebase_merge?: boolean;\n      license: LicenseSimple;\n      pushed_at: string;\n      size: number;\n      ssh_url: string;\n      stargazers_count: number;\n      svn_url: string;\n      topics?: string[];\n      watchers: number;\n      watchers_count: number;\n      created_at: string;\n      updated_at: string;\n      allow_forking?: boolean;\n    };\n    sha: string;\n    user: {\n      avatar_url: string;\n      events_url: string;\n      followers_url: string;\n      following_url: string;\n      gists_url: string;\n      gravatar_id: string | null;\n      html_url: string;\n      id: number;\n      node_id: string;\n      login: string;\n      organizations_url: string;\n      received_events_url: string;\n      repos_url: string;\n      site_admin: boolean;\n      starred_url: string;\n      subscriptions_url: string;\n      type: string;\n      url: string;\n    };\n  };\n  _links: {\n    comments: Link;\n    commits: Link;\n    statuses: Link;\n    html: Link;\n    issue: Link;\n    review_comments: Link;\n    review_comment: Link;\n    self: Link;\n  };\n  author_association: AuthorAssociation;\n  auto_merge: AutoMerge;\n  draft?: boolean;\n  merged: boolean;\n  mergeable: boolean | null;\n  rebaseable?: boolean | null;\n  mergeable_state: string;\n  merged_by: SimpleUser;\n  comments: number;\n  review_comments: number;\n  maintainer_can_modify: boolean;\n  commits: number;\n  additions: number;\n  deletions: number;\n  changed_files: number;\n};\nexport type BasicError = {\n  message?: string;\n  documentation_url?: string;\n  url?: string;\n  status?: string;\n};\nexport type ReactionRollup = {\n  url: string;\n  total_count: number;\n  \"+1\": number;\n  \"-1\": number;\n  laugh: number;\n  confused: number;\n  heart: number;\n  hooray: number;\n  eyes: number;\n  rocket: number;\n};\nexport type PullRequestReviewComment = {\n  url: string;\n  pull_request_review_id: number | null;\n  id: number;\n  node_id: string;\n  diff_hunk: string;\n  path: string;\n  position: number;\n  original_position: number;\n  commit_id: string;\n  original_commit_id: string;\n  in_reply_to_id?: number;\n  user: SimpleUser2;\n  body: string;\n  created_at: string;\n  updated_at: string;\n  html_url: string;\n  pull_request_url: string;\n  author_association: AuthorAssociation;\n  _links: {\n    self: {\n      href: string;\n    };\n    html: {\n      href: string;\n    };\n    pull_request: {\n      href: string;\n    };\n  };\n  start_line?: number | null;\n  original_start_line?: number | null;\n  start_side?: (\"LEFT\" | \"RIGHT\") | null;\n  line?: number;\n  original_line?: number;\n  side?: \"LEFT\" | \"RIGHT\";\n  reactions?: ReactionRollup;\n  body_html?: string;\n  body_text?: string;\n};\nexport type GitUser = {\n  name?: string;\n  email?: string;\n  date?: string;\n} | null;\nexport type Verification = {\n  verified: boolean;\n  reason: string;\n  payload: string | null;\n  signature: string | null;\n};\nexport type DiffEntry = {\n  sha: string;\n  filename: string;\n  status:\n    | \"added\"\n    | \"removed\"\n    | \"modified\"\n    | \"renamed\"\n    | \"copied\"\n    | \"changed\"\n    | \"unchanged\";\n  additions: number;\n  deletions: number;\n  changes: number;\n  blob_url: string;\n  raw_url: string;\n  contents_url: string;\n  patch?: string;\n  previous_filename?: string;\n};\nexport type Commit = {\n  url: string;\n  sha: string;\n  node_id: string;\n  html_url: string;\n  comments_url: string;\n  commit: {\n    url: string;\n    author: GitUser;\n    committer: GitUser;\n    message: string;\n    comment_count: number;\n    tree: {\n      sha: string;\n      url: string;\n    };\n    verification?: Verification;\n  };\n  author: SimpleUser;\n  committer: SimpleUser;\n  parents: {\n    sha: string;\n    url: string;\n    html_url?: string;\n  }[];\n  stats?: {\n    additions?: number;\n    deletions?: number;\n    total?: number;\n  };\n  files?: DiffEntry[];\n};\nexport type PullRequestMergeResult = {\n  sha: string;\n  merged: boolean;\n  message: string;\n};\nexport type PullRequestReviewRequest = {\n  users: SimpleUser2[];\n  teams: Team[];\n};\nexport type PullRequestReview = {\n  id: number;\n  node_id: string;\n  user: SimpleUser;\n  body: string;\n  state: string;\n  html_url: string;\n  pull_request_url: string;\n  _links: {\n    html: {\n      href: string;\n    };\n    pull_request: {\n      href: string;\n    };\n  };\n  submitted_at?: string;\n  commit_id: string;\n  body_html?: string;\n  body_text?: string;\n  author_association: AuthorAssociation;\n};\nexport type ValidationErrorSimple = {\n  message: string;\n  documentation_url: string;\n  errors?: string[];\n};\nexport type LegacyReviewComment = {\n  url: string;\n  pull_request_review_id: number | null;\n  id: number;\n  node_id: string;\n  diff_hunk: string;\n  path: string;\n  position: number | null;\n  original_position: number;\n  commit_id: string;\n  original_commit_id: string;\n  in_reply_to_id?: number;\n  user: SimpleUser;\n  body: string;\n  created_at: string;\n  updated_at: string;\n  html_url: string;\n  pull_request_url: string;\n  author_association: AuthorAssociation;\n  _links: {\n    self: Link;\n    html: Link;\n    pull_request: Link;\n  };\n  body_text?: string;\n  body_html?: string;\n  reactions?: ReactionRollup;\n  side?: \"LEFT\" | \"RIGHT\";\n  start_side?: (\"LEFT\" | \"RIGHT\") | null;\n  line?: number;\n  original_line?: number;\n  start_line?: number | null;\n  original_start_line?: number | null;\n};\nexport const {\n  usePullsListQuery,\n  usePullsCreateMutation,\n  usePullsListReviewCommentsForRepoQuery,\n  usePullsGetReviewCommentQuery,\n  usePullsUpdateReviewCommentMutation,\n  usePullsDeleteReviewCommentMutation,\n  usePullsGetQuery,\n  usePullsUpdateMutation,\n  usePullsListReviewCommentsQuery,\n  usePullsCreateReviewCommentMutation,\n  usePullsCreateReplyForReviewCommentMutation,\n  usePullsListCommitsQuery,\n  usePullsListFilesQuery,\n  usePullsCheckIfMergedQuery,\n  usePullsMergeMutation,\n  usePullsListRequestedReviewersQuery,\n  usePullsRequestReviewersMutation,\n  usePullsRemoveRequestedReviewersMutation,\n  usePullsListReviewsQuery,\n  usePullsCreateReviewMutation,\n  usePullsGetReviewQuery,\n  usePullsUpdateReviewMutation,\n  usePullsDeletePendingReviewMutation,\n  usePullsListCommentsForReviewQuery,\n  usePullsDismissReviewMutation,\n  usePullsSubmitReviewMutation,\n  usePullsUpdateBranchMutation,\n} = injectedRtkApi;\n","import { githubApi as api } from \"../baseApi\";\nconst injectedRtkApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    reposListForOrg: build.query<\n      ReposListForOrgApiResponse,\n      ReposListForOrgApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/orgs/${queryArg.org}/repos`,\n        params: {\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCreateInOrg: build.mutation<\n      ReposCreateInOrgApiResponse,\n      ReposCreateInOrgApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/orgs/${queryArg.org}/repos`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGet: build.query<ReposGetApiResponse, ReposGetApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}`,\n        cache: 'reload'\n      }),\n    }),\n    reposUpdate: build.mutation<ReposUpdateApiResponse, ReposUpdateApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDelete: build.mutation<ReposDeleteApiResponse, ReposDeleteApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListAutolinks: build.query<\n      ReposListAutolinksApiResponse,\n      ReposListAutolinksApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks`,\n        params: { page: queryArg.page },\n      }),\n    }),\n    reposCreateAutolink: build.mutation<\n      ReposCreateAutolinkApiResponse,\n      ReposCreateAutolinkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetAutolink: build.query<\n      ReposGetAutolinkApiResponse,\n      ReposGetAutolinkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks/${queryArg.autolinkId}`,\n      }),\n    }),\n    reposDeleteAutolink: build.mutation<\n      ReposDeleteAutolinkApiResponse,\n      ReposDeleteAutolinkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/autolinks/${queryArg.autolinkId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposEnableAutomatedSecurityFixes: build.mutation<\n      ReposEnableAutomatedSecurityFixesApiResponse,\n      ReposEnableAutomatedSecurityFixesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/automated-security-fixes`,\n        method: \"PUT\",\n      }),\n    }),\n    reposDisableAutomatedSecurityFixes: build.mutation<\n      ReposDisableAutomatedSecurityFixesApiResponse,\n      ReposDisableAutomatedSecurityFixesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/automated-security-fixes`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListBranches: build.query<\n      ReposListBranchesApiResponse,\n      ReposListBranchesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches`,\n        params: {\n          protected: queryArg[\"protected\"],\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n      providesTags: ['Refs']\n    }),\n    reposGetBranch: build.query<\n      ReposGetBranchApiResponse,\n      ReposGetBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}`,\n      }),\n    }),\n    reposGetBranchProtection: build.query<\n      ReposGetBranchProtectionApiResponse,\n      ReposGetBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection`,\n      }),\n    }),\n    reposUpdateBranchProtection: build.mutation<\n      ReposUpdateBranchProtectionApiResponse,\n      ReposUpdateBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteBranchProtection: build.mutation<\n      ReposDeleteBranchProtectionApiResponse,\n      ReposDeleteBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetAdminBranchProtection: build.query<\n      ReposGetAdminBranchProtectionApiResponse,\n      ReposGetAdminBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/enforce_admins`,\n      }),\n    }),\n    reposSetAdminBranchProtection: build.mutation<\n      ReposSetAdminBranchProtectionApiResponse,\n      ReposSetAdminBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/enforce_admins`,\n        method: \"POST\",\n      }),\n    }),\n    reposDeleteAdminBranchProtection: build.mutation<\n      ReposDeleteAdminBranchProtectionApiResponse,\n      ReposDeleteAdminBranchProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/enforce_admins`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetPullRequestReviewProtection: build.query<\n      ReposGetPullRequestReviewProtectionApiResponse,\n      ReposGetPullRequestReviewProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_pull_request_reviews`,\n      }),\n    }),\n    reposUpdatePullRequestReviewProtection: build.mutation<\n      ReposUpdatePullRequestReviewProtectionApiResponse,\n      ReposUpdatePullRequestReviewProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_pull_request_reviews`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeletePullRequestReviewProtection: build.mutation<\n      ReposDeletePullRequestReviewProtectionApiResponse,\n      ReposDeletePullRequestReviewProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_pull_request_reviews`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetCommitSignatureProtection: build.query<\n      ReposGetCommitSignatureProtectionApiResponse,\n      ReposGetCommitSignatureProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_signatures`,\n      }),\n    }),\n    reposCreateCommitSignatureProtection: build.mutation<\n      ReposCreateCommitSignatureProtectionApiResponse,\n      ReposCreateCommitSignatureProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_signatures`,\n        method: \"POST\",\n      }),\n    }),\n    reposDeleteCommitSignatureProtection: build.mutation<\n      ReposDeleteCommitSignatureProtectionApiResponse,\n      ReposDeleteCommitSignatureProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_signatures`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetStatusChecksProtection: build.query<\n      ReposGetStatusChecksProtectionApiResponse,\n      ReposGetStatusChecksProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks`,\n      }),\n    }),\n    reposUpdateStatusCheckProtection: build.mutation<\n      ReposUpdateStatusCheckProtectionApiResponse,\n      ReposUpdateStatusCheckProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveStatusCheckProtection: build.mutation<\n      ReposRemoveStatusCheckProtectionApiResponse,\n      ReposRemoveStatusCheckProtectionApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetAllStatusCheckContexts: build.query<\n      ReposGetAllStatusCheckContextsApiResponse,\n      ReposGetAllStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n      }),\n    }),\n    reposAddStatusCheckContexts: build.mutation<\n      ReposAddStatusCheckContextsApiResponse,\n      ReposAddStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetStatusCheckContexts: build.mutation<\n      ReposSetStatusCheckContextsApiResponse,\n      ReposSetStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveStatusCheckContexts: build.mutation<\n      ReposRemoveStatusCheckContextsApiResponse,\n      ReposRemoveStatusCheckContextsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/required_status_checks/contexts`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetAccessRestrictions: build.query<\n      ReposGetAccessRestrictionsApiResponse,\n      ReposGetAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions`,\n      }),\n    }),\n    reposDeleteAccessRestrictions: build.mutation<\n      ReposDeleteAccessRestrictionsApiResponse,\n      ReposDeleteAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetAppsWithAccessToProtectedBranch: build.query<\n      ReposGetAppsWithAccessToProtectedBranchApiResponse,\n      ReposGetAppsWithAccessToProtectedBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n      }),\n    }),\n    reposAddAppAccessRestrictions: build.mutation<\n      ReposAddAppAccessRestrictionsApiResponse,\n      ReposAddAppAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetAppAccessRestrictions: build.mutation<\n      ReposSetAppAccessRestrictionsApiResponse,\n      ReposSetAppAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveAppAccessRestrictions: build.mutation<\n      ReposRemoveAppAccessRestrictionsApiResponse,\n      ReposRemoveAppAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/apps`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetTeamsWithAccessToProtectedBranch: build.query<\n      ReposGetTeamsWithAccessToProtectedBranchApiResponse,\n      ReposGetTeamsWithAccessToProtectedBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n      }),\n    }),\n    reposAddTeamAccessRestrictions: build.mutation<\n      ReposAddTeamAccessRestrictionsApiResponse,\n      ReposAddTeamAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetTeamAccessRestrictions: build.mutation<\n      ReposSetTeamAccessRestrictionsApiResponse,\n      ReposSetTeamAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveTeamAccessRestrictions: build.mutation<\n      ReposRemoveTeamAccessRestrictionsApiResponse,\n      ReposRemoveTeamAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/teams`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetUsersWithAccessToProtectedBranch: build.query<\n      ReposGetUsersWithAccessToProtectedBranchApiResponse,\n      ReposGetUsersWithAccessToProtectedBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n      }),\n    }),\n    reposAddUserAccessRestrictions: build.mutation<\n      ReposAddUserAccessRestrictionsApiResponse,\n      ReposAddUserAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposSetUserAccessRestrictions: build.mutation<\n      ReposSetUserAccessRestrictionsApiResponse,\n      ReposSetUserAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveUserAccessRestrictions: build.mutation<\n      ReposRemoveUserAccessRestrictionsApiResponse,\n      ReposRemoveUserAccessRestrictionsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/protection/restrictions/users`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRenameBranch: build.mutation<\n      ReposRenameBranchApiResponse,\n      ReposRenameBranchApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/branches/${queryArg.branch}/rename`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposCodeownersErrors: build.query<\n      ReposCodeownersErrorsApiResponse,\n      ReposCodeownersErrorsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/codeowners/errors`,\n        params: { ref: queryArg.ref },\n      }),\n    }),\n    reposListCollaborators: build.query<\n      ReposListCollaboratorsApiResponse,\n      ReposListCollaboratorsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators`,\n        params: {\n          affiliation: queryArg.affiliation,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCheckCollaborator: build.query<\n      ReposCheckCollaboratorApiResponse,\n      ReposCheckCollaboratorApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}`,\n      }),\n    }),\n    reposAddCollaborator: build.mutation<\n      ReposAddCollaboratorApiResponse,\n      ReposAddCollaboratorApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposRemoveCollaborator: build.mutation<\n      ReposRemoveCollaboratorApiResponse,\n      ReposRemoveCollaboratorApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetCollaboratorPermissionLevel: build.query<\n      ReposGetCollaboratorPermissionLevelApiResponse,\n      ReposGetCollaboratorPermissionLevelApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/collaborators/${queryArg.username}/permission`,\n      }),\n    }),\n    reposListCommitCommentsForRepo: build.query<\n      ReposListCommitCommentsForRepoApiResponse,\n      ReposListCommitCommentsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetCommitComment: build.query<\n      ReposGetCommitCommentApiResponse,\n      ReposGetCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments/${queryArg.commentId}`,\n      }),\n    }),\n    reposUpdateCommitComment: build.mutation<\n      ReposUpdateCommitCommentApiResponse,\n      ReposUpdateCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments/${queryArg.commentId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteCommitComment: build.mutation<\n      ReposDeleteCommitCommentApiResponse,\n      ReposDeleteCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/comments/${queryArg.commentId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListCommits: build.query<\n      ReposListCommitsApiResponse,\n      ReposListCommitsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits`,\n        params: {\n          sha: queryArg.sha,\n          path: queryArg.path,\n          author: queryArg.author,\n          since: queryArg.since,\n          until: queryArg.until,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposListBranchesForHeadCommit: build.query<\n      ReposListBranchesForHeadCommitApiResponse,\n      ReposListBranchesForHeadCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/branches-where-head`,\n      }),\n    }),\n    reposListCommentsForCommit: build.query<\n      ReposListCommentsForCommitApiResponse,\n      ReposListCommentsForCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/comments`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateCommitComment: build.mutation<\n      ReposCreateCommitCommentApiResponse,\n      ReposCreateCommitCommentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/comments`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListPullRequestsAssociatedWithCommit: build.query<\n      ReposListPullRequestsAssociatedWithCommitApiResponse,\n      ReposListPullRequestsAssociatedWithCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.commitSha}/pulls`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetCommit: build.query<\n      ReposGetCommitApiResponse,\n      ReposGetCommitApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.ref}`,\n        params: { page: queryArg.page, per_page: queryArg.perPage },\n      }),\n    }),\n    reposGetCombinedStatusForRef: build.query<\n      ReposGetCombinedStatusForRefApiResponse,\n      ReposGetCombinedStatusForRefApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.ref}/status`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposListCommitStatusesForRef: build.query<\n      ReposListCommitStatusesForRefApiResponse,\n      ReposListCommitStatusesForRefApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/commits/${queryArg.ref}/statuses`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetCommunityProfileMetrics: build.query<\n      ReposGetCommunityProfileMetricsApiResponse,\n      ReposGetCommunityProfileMetricsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/community/profile`,\n      }),\n    }),\n    reposCompareCommits: build.query<\n      ReposCompareCommitsApiResponse,\n      ReposCompareCommitsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/compare/${queryArg.basehead}`,\n        params: { page: queryArg.page, per_page: queryArg.perPage },\n      }),\n    }),\n    reposGetContent: build.query<\n      ReposGetContentApiResponse,\n      ReposGetContentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contents/${queryArg.path}`,\n        params: { ref: queryArg.ref },\n      }),\n      providesTags: ['Files']\n    }),\n    reposCreateOrUpdateFileContents: build.mutation<\n      ReposCreateOrUpdateFileContentsApiResponse,\n      ReposCreateOrUpdateFileContentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contents/${queryArg.path}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n      extraOptions: {maxRetries: 0},\n      invalidatesTags: ['Files', 'Refs']\n    }),\n    reposDeleteFile: build.mutation<\n      ReposDeleteFileApiResponse,\n      ReposDeleteFileApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contents/${queryArg.path}`,\n        method: \"DELETE\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListContributors: build.query<\n      ReposListContributorsApiResponse,\n      ReposListContributorsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/contributors`,\n        params: {\n          anon: queryArg.anon,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposListDeployments: build.query<\n      ReposListDeploymentsApiResponse,\n      ReposListDeploymentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments`,\n        params: {\n          sha: queryArg.sha,\n          ref: queryArg.ref,\n          task: queryArg.task,\n          environment: queryArg.environment,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCreateDeployment: build.mutation<\n      ReposCreateDeploymentApiResponse,\n      ReposCreateDeploymentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetDeployment: build.query<\n      ReposGetDeploymentApiResponse,\n      ReposGetDeploymentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}`,\n      }),\n    }),\n    reposDeleteDeployment: build.mutation<\n      ReposDeleteDeploymentApiResponse,\n      ReposDeleteDeploymentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListDeploymentStatuses: build.query<\n      ReposListDeploymentStatusesApiResponse,\n      ReposListDeploymentStatusesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}/statuses`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateDeploymentStatus: build.mutation<\n      ReposCreateDeploymentStatusApiResponse,\n      ReposCreateDeploymentStatusApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}/statuses`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetDeploymentStatus: build.query<\n      ReposGetDeploymentStatusApiResponse,\n      ReposGetDeploymentStatusApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/deployments/${queryArg.deploymentId}/statuses/${queryArg.statusId}`,\n      }),\n    }),\n    reposCreateDispatchEvent: build.mutation<\n      ReposCreateDispatchEventApiResponse,\n      ReposCreateDispatchEventApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/dispatches`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetAllEnvironments: build.query<\n      ReposGetAllEnvironmentsApiResponse,\n      ReposGetAllEnvironmentsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments`,\n      }),\n    }),\n    reposGetEnvironment: build.query<\n      ReposGetEnvironmentApiResponse,\n      ReposGetEnvironmentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments/${queryArg.environmentName}`,\n      }),\n    }),\n    reposCreateOrUpdateEnvironment: build.mutation<\n      ReposCreateOrUpdateEnvironmentApiResponse,\n      ReposCreateOrUpdateEnvironmentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments/${queryArg.environmentName}`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteAnEnvironment: build.mutation<\n      ReposDeleteAnEnvironmentApiResponse,\n      ReposDeleteAnEnvironmentApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/environments/${queryArg.environmentName}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListForks: build.query<\n      ReposListForksApiResponse,\n      ReposListForksApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/forks`,\n        params: {\n          sort: queryArg.sort,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n    reposCreateFork: build.mutation<\n      ReposCreateForkApiResponse,\n      ReposCreateForkApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/forks`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListWebhooks: build.query<\n      ReposListWebhooksApiResponse,\n      ReposListWebhooksApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateWebhook: build.mutation<\n      ReposCreateWebhookApiResponse,\n      ReposCreateWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetWebhook: build.query<\n      ReposGetWebhookApiResponse,\n      ReposGetWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}`,\n      }),\n    }),\n    reposUpdateWebhook: build.mutation<\n      ReposUpdateWebhookApiResponse,\n      ReposUpdateWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteWebhook: build.mutation<\n      ReposDeleteWebhookApiResponse,\n      ReposDeleteWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGetWebhookConfigForRepo: build.query<\n      ReposGetWebhookConfigForRepoApiResponse,\n      ReposGetWebhookConfigForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/config`,\n      }),\n    }),\n    reposUpdateWebhookConfigForRepo: build.mutation<\n      ReposUpdateWebhookConfigForRepoApiResponse,\n      ReposUpdateWebhookConfigForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/config`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListWebhookDeliveries: build.query<\n      ReposListWebhookDeliveriesApiResponse,\n      ReposListWebhookDeliveriesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/deliveries`,\n        params: { per_page: queryArg.perPage, cursor: queryArg.cursor },\n      }),\n    }),\n    reposGetWebhookDelivery: build.query<\n      ReposGetWebhookDeliveryApiResponse,\n      ReposGetWebhookDeliveryApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/deliveries/${queryArg.deliveryId}`,\n      }),\n    }),\n    reposRedeliverWebhookDelivery: build.mutation<\n      ReposRedeliverWebhookDeliveryApiResponse,\n      ReposRedeliverWebhookDeliveryApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/deliveries/${queryArg.deliveryId}/attempts`,\n        method: \"POST\",\n      }),\n    }),\n    reposPingWebhook: build.mutation<\n      ReposPingWebhookApiResponse,\n      ReposPingWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/pings`,\n        method: \"POST\",\n      }),\n    }),\n    reposTestPushWebhook: build.mutation<\n      ReposTestPushWebhookApiResponse,\n      ReposTestPushWebhookApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/hooks/${queryArg.hookId}/tests`,\n        method: \"POST\",\n      }),\n    }),\n    reposListInvitations: build.query<\n      ReposListInvitationsApiResponse,\n      ReposListInvitationsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/invitations`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposUpdateInvitation: build.mutation<\n      ReposUpdateInvitationApiResponse,\n      ReposUpdateInvitationApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/invitations/${queryArg.invitationId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteInvitation: build.mutation<\n      ReposDeleteInvitationApiResponse,\n      ReposDeleteInvitationApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/invitations/${queryArg.invitationId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListDeployKeys: build.query<\n      ReposListDeployKeysApiResponse,\n      ReposListDeployKeysApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateDeployKey: build.mutation<\n      ReposCreateDeployKeyApiResponse,\n      ReposCreateDeployKeyApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetDeployKey: build.query<\n      ReposGetDeployKeyApiResponse,\n      ReposGetDeployKeyApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys/${queryArg.keyId}`,\n      }),\n    }),\n    reposDeleteDeployKey: build.mutation<\n      ReposDeleteDeployKeyApiResponse,\n      ReposDeleteDeployKeyApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/keys/${queryArg.keyId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListLanguages: build.query<\n      ReposListLanguagesApiResponse,\n      ReposListLanguagesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/languages`,\n      }),\n    }),\n    reposEnableLfsForRepo: build.mutation<\n      ReposEnableLfsForRepoApiResponse,\n      ReposEnableLfsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/lfs`,\n        method: \"PUT\",\n      }),\n    }),\n    reposDisableLfsForRepo: build.mutation<\n      ReposDisableLfsForRepoApiResponse,\n      ReposDisableLfsForRepoApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/lfs`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposMergeUpstream: build.mutation<\n      ReposMergeUpstreamApiResponse,\n      ReposMergeUpstreamApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merge-upstream`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposMerge: build.mutation<ReposMergeApiResponse, ReposMergeApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/merges`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetPages: build.query<ReposGetPagesApiResponse, ReposGetPagesApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n      }),\n    }),\n    reposCreatePagesSite: build.mutation<\n      ReposCreatePagesSiteApiResponse,\n      ReposCreatePagesSiteApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposUpdateInformationAboutPagesSite: build.mutation<\n      ReposUpdateInformationAboutPagesSiteApiResponse,\n      ReposUpdateInformationAboutPagesSiteApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeletePagesSite: build.mutation<\n      ReposDeletePagesSiteApiResponse,\n      ReposDeletePagesSiteApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListPagesBuilds: build.query<\n      ReposListPagesBuildsApiResponse,\n      ReposListPagesBuildsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposRequestPagesBuild: build.mutation<\n      ReposRequestPagesBuildApiResponse,\n      ReposRequestPagesBuildApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds`,\n        method: \"POST\",\n      }),\n    }),\n    reposGetLatestPagesBuild: build.query<\n      ReposGetLatestPagesBuildApiResponse,\n      ReposGetLatestPagesBuildApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds/latest`,\n      }),\n    }),\n    reposGetPagesBuild: build.query<\n      ReposGetPagesBuildApiResponse,\n      ReposGetPagesBuildApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/builds/${queryArg.buildId}`,\n      }),\n    }),\n    reposGetPagesHealthCheck: build.query<\n      ReposGetPagesHealthCheckApiResponse,\n      ReposGetPagesHealthCheckApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/pages/health`,\n      }),\n    }),\n    reposGetReadme: build.query<\n      ReposGetReadmeApiResponse,\n      ReposGetReadmeApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/readme`,\n        params: { ref: queryArg.ref },\n      }),\n    }),\n    reposGetReadmeInDirectory: build.query<\n      ReposGetReadmeInDirectoryApiResponse,\n      ReposGetReadmeInDirectoryApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/readme/${queryArg.dir}`,\n        params: { ref: queryArg.ref },\n      }),\n    }),\n    reposListReleases: build.query<\n      ReposListReleasesApiResponse,\n      ReposListReleasesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposCreateRelease: build.mutation<\n      ReposCreateReleaseApiResponse,\n      ReposCreateReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetReleaseAsset: build.query<\n      ReposGetReleaseAssetApiResponse,\n      ReposGetReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/assets/${queryArg.assetId}`,\n      }),\n    }),\n    reposUpdateReleaseAsset: build.mutation<\n      ReposUpdateReleaseAssetApiResponse,\n      ReposUpdateReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/assets/${queryArg.assetId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteReleaseAsset: build.mutation<\n      ReposDeleteReleaseAssetApiResponse,\n      ReposDeleteReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/assets/${queryArg.assetId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposGenerateReleaseNotes: build.mutation<\n      ReposGenerateReleaseNotesApiResponse,\n      ReposGenerateReleaseNotesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/generate-notes`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetLatestRelease: build.query<\n      ReposGetLatestReleaseApiResponse,\n      ReposGetLatestReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/latest`,\n      }),\n    }),\n    reposGetReleaseByTag: build.query<\n      ReposGetReleaseByTagApiResponse,\n      ReposGetReleaseByTagApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/tags/${queryArg.tag}`,\n      }),\n    }),\n    reposGetRelease: build.query<\n      ReposGetReleaseApiResponse,\n      ReposGetReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}`,\n      }),\n    }),\n    reposUpdateRelease: build.mutation<\n      ReposUpdateReleaseApiResponse,\n      ReposUpdateReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}`,\n        method: \"PATCH\",\n        body: queryArg.body,\n      }),\n    }),\n    reposDeleteRelease: build.mutation<\n      ReposDeleteReleaseApiResponse,\n      ReposDeleteReleaseApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListReleaseAssets: build.query<\n      ReposListReleaseAssetsApiResponse,\n      ReposListReleaseAssetsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}/assets`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposUploadReleaseAsset: build.mutation<\n      ReposUploadReleaseAssetApiResponse,\n      ReposUploadReleaseAssetApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/releases/${queryArg.releaseId}/assets`,\n        method: \"POST\",\n        body: queryArg.body,\n        params: { name: queryArg.name, label: queryArg.label },\n      }),\n    }),\n    reposGetCodeFrequencyStats: build.query<\n      ReposGetCodeFrequencyStatsApiResponse,\n      ReposGetCodeFrequencyStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/code_frequency`,\n      }),\n    }),\n    reposGetCommitActivityStats: build.query<\n      ReposGetCommitActivityStatsApiResponse,\n      ReposGetCommitActivityStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/commit_activity`,\n      }),\n    }),\n    reposGetContributorsStats: build.query<\n      ReposGetContributorsStatsApiResponse,\n      ReposGetContributorsStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/contributors`,\n      }),\n    }),\n    reposGetParticipationStats: build.query<\n      ReposGetParticipationStatsApiResponse,\n      ReposGetParticipationStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/participation`,\n      }),\n    }),\n    reposGetPunchCardStats: build.query<\n      ReposGetPunchCardStatsApiResponse,\n      ReposGetPunchCardStatsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/stats/punch_card`,\n      }),\n    }),\n    reposCreateCommitStatus: build.mutation<\n      ReposCreateCommitStatusApiResponse,\n      ReposCreateCommitStatusApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/statuses/${queryArg.sha}`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListTags: build.query<ReposListTagsApiResponse, ReposListTagsApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/tags`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposDownloadTarballArchive: build.query<\n      ReposDownloadTarballArchiveApiResponse,\n      ReposDownloadTarballArchiveApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/tarball/${queryArg.ref}`,\n      }),\n    }),\n    reposListTeams: build.query<\n      ReposListTeamsApiResponse,\n      ReposListTeamsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/teams`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposGetAllTopics: build.query<\n      ReposGetAllTopicsApiResponse,\n      ReposGetAllTopicsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/topics`,\n        params: { page: queryArg.page, per_page: queryArg.perPage },\n      }),\n    }),\n    reposReplaceAllTopics: build.mutation<\n      ReposReplaceAllTopicsApiResponse,\n      ReposReplaceAllTopicsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/topics`,\n        method: \"PUT\",\n        body: queryArg.body,\n      }),\n    }),\n    reposGetClones: build.query<\n      ReposGetClonesApiResponse,\n      ReposGetClonesApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/clones`,\n        params: { per: queryArg.per },\n      }),\n    }),\n    reposGetTopPaths: build.query<\n      ReposGetTopPathsApiResponse,\n      ReposGetTopPathsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/popular/paths`,\n      }),\n    }),\n    reposGetTopReferrers: build.query<\n      ReposGetTopReferrersApiResponse,\n      ReposGetTopReferrersApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/popular/referrers`,\n      }),\n    }),\n    reposGetViews: build.query<ReposGetViewsApiResponse, ReposGetViewsApiArg>({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/traffic/views`,\n        params: { per: queryArg.per },\n      }),\n    }),\n    reposTransfer: build.mutation<\n      ReposTransferApiResponse,\n      ReposTransferApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/transfer`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposCheckVulnerabilityAlerts: build.query<\n      ReposCheckVulnerabilityAlertsApiResponse,\n      ReposCheckVulnerabilityAlertsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/vulnerability-alerts`,\n      }),\n    }),\n    reposEnableVulnerabilityAlerts: build.mutation<\n      ReposEnableVulnerabilityAlertsApiResponse,\n      ReposEnableVulnerabilityAlertsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/vulnerability-alerts`,\n        method: \"PUT\",\n      }),\n    }),\n    reposDisableVulnerabilityAlerts: build.mutation<\n      ReposDisableVulnerabilityAlertsApiResponse,\n      ReposDisableVulnerabilityAlertsApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/vulnerability-alerts`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposDownloadZipballArchive: build.query<\n      ReposDownloadZipballArchiveApiResponse,\n      ReposDownloadZipballArchiveApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.owner}/${queryArg.repo}/zipball/${queryArg.ref}`,\n      }),\n    }),\n    reposCreateUsingTemplate: build.mutation<\n      ReposCreateUsingTemplateApiResponse,\n      ReposCreateUsingTemplateApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repos/${queryArg.templateOwner}/${queryArg.templateRepo}/generate`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListPublic: build.query<\n      ReposListPublicApiResponse,\n      ReposListPublicApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/repositories`,\n        params: { since: queryArg.since },\n      }),\n    }),\n    reposListForAuthenticatedUser: build.query<\n      ReposListForAuthenticatedUserApiResponse,\n      ReposListForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repos`,\n        params: {\n          visibility: queryArg.visibility,\n          affiliation: queryArg.affiliation,\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n          since: queryArg.since,\n          before: queryArg.before,\n        },\n      }),\n    }),\n    reposCreateForAuthenticatedUser: build.mutation<\n      ReposCreateForAuthenticatedUserApiResponse,\n      ReposCreateForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repos`,\n        method: \"POST\",\n        body: queryArg.body,\n      }),\n    }),\n    reposListInvitationsForAuthenticatedUser: build.query<\n      ReposListInvitationsForAuthenticatedUserApiResponse,\n      ReposListInvitationsForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repository_invitations`,\n        params: { per_page: queryArg.perPage, page: queryArg.page },\n      }),\n    }),\n    reposAcceptInvitationForAuthenticatedUser: build.mutation<\n      ReposAcceptInvitationForAuthenticatedUserApiResponse,\n      ReposAcceptInvitationForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repository_invitations/${queryArg.invitationId}`,\n        method: \"PATCH\",\n      }),\n    }),\n    reposDeclineInvitationForAuthenticatedUser: build.mutation<\n      ReposDeclineInvitationForAuthenticatedUserApiResponse,\n      ReposDeclineInvitationForAuthenticatedUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/user/repository_invitations/${queryArg.invitationId}`,\n        method: \"DELETE\",\n      }),\n    }),\n    reposListForUser: build.query<\n      ReposListForUserApiResponse,\n      ReposListForUserApiArg\n    >({\n      query: (queryArg) => ({\n        url: `/users/${queryArg.username}/repos`,\n        params: {\n          type: queryArg[\"type\"],\n          sort: queryArg.sort,\n          direction: queryArg.direction,\n          per_page: queryArg.perPage,\n          page: queryArg.page,\n        },\n      }),\n    }),\n  }),\n  overrideExisting: false,\n});\nexport { injectedRtkApi as githubApi };\nexport type ReposListForOrgApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListForOrgApiArg = {\n  org: string;\n  /** Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token. */\n  type?:\n    | \"all\"\n    | \"public\"\n    | \"private\"\n    | \"forks\"\n    | \"sources\"\n    | \"member\"\n    | \"internal\";\n  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n  sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n  /** Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc` */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateInOrgApiResponse =\n  /** status 201 Response */ Repository2;\nexport type ReposCreateInOrgApiArg = {\n  org: string;\n  body: {\n    name: string;\n    description?: string;\n    homepage?: string;\n    private?: boolean;\n    visibility?: \"public\" | \"private\" | \"internal\";\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    is_template?: boolean;\n    team_id?: number;\n    auto_init?: boolean;\n    gitignore_template?: string;\n    license_template?: string;\n    allow_squash_merge?: boolean;\n    allow_merge_commit?: boolean;\n    allow_rebase_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n  };\n};\nexport type ReposGetApiResponse = /** status 200 Response */ FullRepository;\nexport type ReposGetApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposUpdateApiResponse = /** status 200 Response */ FullRepository;\nexport type ReposUpdateApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    name?: string;\n    description?: string;\n    homepage?: string;\n    private?: boolean;\n    visibility?: \"public\" | \"private\" | \"internal\";\n    security_and_analysis?: {\n      advanced_security?: {\n        status?: string;\n      };\n      secret_scanning?: {\n        status?: string;\n      };\n    } | null;\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    is_template?: boolean;\n    default_branch?: string;\n    allow_squash_merge?: boolean;\n    allow_merge_commit?: boolean;\n    allow_rebase_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    archived?: boolean;\n    allow_forking?: boolean;\n  };\n};\nexport type ReposDeleteApiResponse = /** status 204 Response */ undefined;\nexport type ReposDeleteApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposListAutolinksApiResponse =\n  /** status 200 Response */ AutolinkReference[];\nexport type ReposListAutolinksApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateAutolinkApiResponse =\n  /** status 201 response */ AutolinkReference;\nexport type ReposCreateAutolinkApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    key_prefix: string;\n    url_template: string;\n  };\n};\nexport type ReposGetAutolinkApiResponse =\n  /** status 200 Response */ AutolinkReference;\nexport type ReposGetAutolinkApiArg = {\n  owner: string;\n  repo: string;\n  /** autolink_id parameter */\n  autolinkId: number;\n};\nexport type ReposDeleteAutolinkApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteAutolinkApiArg = {\n  owner: string;\n  repo: string;\n  /** autolink_id parameter */\n  autolinkId: number;\n};\nexport type ReposEnableAutomatedSecurityFixesApiResponse = unknown;\nexport type ReposEnableAutomatedSecurityFixesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDisableAutomatedSecurityFixesApiResponse = unknown;\nexport type ReposDisableAutomatedSecurityFixesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposListBranchesApiResponse =\n  /** status 200 Response */ ShortBranch[];\nexport type ReposListBranchesApiArg = {\n  owner: string;\n  repo: string;\n  /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n  protected?: boolean;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetBranchApiResponse =\n  /** status 200 Response */ BranchWithProtection;\nexport type ReposGetBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetBranchProtectionApiResponse =\n  /** status 200 Response */ BranchProtection;\nexport type ReposGetBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposUpdateBranchProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranch;\nexport type ReposUpdateBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    required_status_checks: {\n      strict: boolean;\n      contexts: string[];\n      checks?: {\n        context: string;\n        app_id?: number;\n      }[];\n    } | null;\n    enforce_admins: boolean | null;\n    required_pull_request_reviews: {\n      dismissal_restrictions?: {\n        users?: string[];\n        teams?: string[];\n      };\n      dismiss_stale_reviews?: boolean;\n      require_code_owner_reviews?: boolean;\n      required_approving_review_count?: number;\n      bypass_pull_request_allowances?: {\n        users?: string[];\n        teams?: string[];\n      } | null;\n    } | null;\n    restrictions: {\n      users: string[];\n      teams: string[];\n      apps?: string[];\n    } | null;\n    required_linear_history?: boolean;\n    allow_force_pushes?: boolean | null;\n    allow_deletions?: boolean;\n    required_conversation_resolution?: boolean;\n  };\n};\nexport type ReposDeleteBranchProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetAdminBranchProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposGetAdminBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposSetAdminBranchProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposSetAdminBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposDeleteAdminBranchProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteAdminBranchProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetPullRequestReviewProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchPullRequestReview;\nexport type ReposGetPullRequestReviewProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposUpdatePullRequestReviewProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchPullRequestReview;\nexport type ReposUpdatePullRequestReviewProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    dismissal_restrictions?: {\n      users?: string[];\n      teams?: string[];\n    };\n    dismiss_stale_reviews?: boolean;\n    require_code_owner_reviews?: boolean;\n    required_approving_review_count?: number;\n    bypass_pull_request_allowances?: {\n      users?: string[];\n      teams?: string[];\n    } | null;\n  };\n};\nexport type ReposDeletePullRequestReviewProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeletePullRequestReviewProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetCommitSignatureProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposGetCommitSignatureProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposCreateCommitSignatureProtectionApiResponse =\n  /** status 200 Response */ ProtectedBranchAdminEnforced;\nexport type ReposCreateCommitSignatureProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposDeleteCommitSignatureProtectionApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteCommitSignatureProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetStatusChecksProtectionApiResponse =\n  /** status 200 Response */ StatusCheckPolicy;\nexport type ReposGetStatusChecksProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposUpdateStatusCheckProtectionApiResponse =\n  /** status 200 Response */ StatusCheckPolicy;\nexport type ReposUpdateStatusCheckProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    strict?: boolean;\n    contexts?: string[];\n    checks?: {\n      context: string;\n      app_id?: number;\n    }[];\n  };\n};\nexport type ReposRemoveStatusCheckProtectionApiResponse = unknown;\nexport type ReposRemoveStatusCheckProtectionApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetAllStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposGetAllStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposAddStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        contexts: string[];\n      }\n    | string[];\n};\nexport type ReposSetStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposSetStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        contexts: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveStatusCheckContextsApiResponse =\n  /** status 200 Response */ string[];\nexport type ReposRemoveStatusCheckContextsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        contexts: string[];\n      }\n    | string[];\n};\nexport type ReposGetAccessRestrictionsApiResponse =\n  /** status 200 Response */ BranchRestrictionPolicy;\nexport type ReposGetAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposDeleteAccessRestrictionsApiResponse = unknown;\nexport type ReposDeleteAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposGetAppsWithAccessToProtectedBranchApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposGetAppsWithAccessToProtectedBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddAppAccessRestrictionsApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposAddAppAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        apps: string[];\n      }\n    | string[];\n};\nexport type ReposSetAppAccessRestrictionsApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposSetAppAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        apps: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveAppAccessRestrictionsApiResponse =\n  /** status 200 Response */ GitHubApp[];\nexport type ReposRemoveAppAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        apps: string[];\n      }\n    | string[];\n};\nexport type ReposGetTeamsWithAccessToProtectedBranchApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposGetTeamsWithAccessToProtectedBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddTeamAccessRestrictionsApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposAddTeamAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        teams: string[];\n      }\n    | string[];\n};\nexport type ReposSetTeamAccessRestrictionsApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposSetTeamAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        teams: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveTeamAccessRestrictionsApiResponse =\n  /** status 200 Response */ Team[];\nexport type ReposRemoveTeamAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        teams: string[];\n      }\n    | string[];\n};\nexport type ReposGetUsersWithAccessToProtectedBranchApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposGetUsersWithAccessToProtectedBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n};\nexport type ReposAddUserAccessRestrictionsApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposAddUserAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        users: string[];\n      }\n    | string[];\n};\nexport type ReposSetUserAccessRestrictionsApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposSetUserAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        users: string[];\n      }\n    | string[];\n};\nexport type ReposRemoveUserAccessRestrictionsApiResponse =\n  /** status 200 Response */ SimpleUser[];\nexport type ReposRemoveUserAccessRestrictionsApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body:\n    | {\n        users: string[];\n      }\n    | string[];\n};\nexport type ReposRenameBranchApiResponse =\n  /** status 201 Response */ BranchWithProtection;\nexport type ReposRenameBranchApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the branch. */\n  branch: string;\n  body: {\n    new_name: string;\n  };\n};\nexport type ReposCodeownersErrorsApiResponse =\n  /** status 200 Response */ CodeownersErrors;\nexport type ReposCodeownersErrorsApiArg = {\n  owner: string;\n  repo: string;\n  /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */\n  ref?: string;\n};\nexport type ReposListCollaboratorsApiResponse =\n  /** status 200 Response */ Collaborator[];\nexport type ReposListCollaboratorsApiArg = {\n  owner: string;\n  repo: string;\n  /** Filter collaborators returned by their affiliation. Can be one of:\n    \\* `outside`: All outside collaborators of an organization-owned repository.\n    \\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.\n    \\* `all`: All collaborators the authenticated user can see. */\n  affiliation?: \"outside\" | \"direct\" | \"all\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCheckCollaboratorApiResponse = unknown;\nexport type ReposCheckCollaboratorApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n};\nexport type ReposAddCollaboratorApiResponse =\n  /** status 201 Response when a new invitation is created */\n    | RepositoryInvitation\n    | /** status 204 Response when person is already a collaborator */ undefined;\nexport type ReposAddCollaboratorApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n  body: {\n    permission?: \"pull\" | \"push\" | \"admin\" | \"maintain\" | \"triage\";\n    permissions?: string;\n  };\n};\nexport type ReposRemoveCollaboratorApiResponse = unknown;\nexport type ReposRemoveCollaboratorApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n};\nexport type ReposGetCollaboratorPermissionLevelApiResponse =\n  /** status 200 if user has admin permissions */ RepositoryCollaboratorPermission;\nexport type ReposGetCollaboratorPermissionLevelApiArg = {\n  owner: string;\n  repo: string;\n  username: string;\n};\nexport type ReposListCommitCommentsForRepoApiResponse =\n  /** status 200 Response */ CommitComment[];\nexport type ReposListCommitCommentsForRepoApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetCommitCommentApiResponse =\n  /** status 200 Response */ CommitComment;\nexport type ReposGetCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type ReposUpdateCommitCommentApiResponse =\n  /** status 200 Response */ CommitComment;\nexport type ReposUpdateCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n  body: {\n    body: string;\n  };\n};\nexport type ReposDeleteCommitCommentApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** comment_id parameter */\n  commentId: number;\n};\nexport type ReposListCommitsApiResponse = /** status 200 Response */ Commit[];\nexport type ReposListCommitsApiArg = {\n  owner: string;\n  repo: string;\n  /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */\n  sha?: string;\n  /** Only commits containing this file path will be returned. */\n  path?: string;\n  /** GitHub login or email address by which to filter by commit author. */\n  author?: string;\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  until?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposListBranchesForHeadCommitApiResponse =\n  /** status 200 Response */ BranchShort[];\nexport type ReposListBranchesForHeadCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n};\nexport type ReposListCommentsForCommitApiResponse =\n  /** status 200 Response */ CommitComment[];\nexport type ReposListCommentsForCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateCommitCommentApiResponse =\n  /** status 201 Response */ CommitComment;\nexport type ReposCreateCommitCommentApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n  body: {\n    body: string;\n    path?: string;\n    position?: number;\n    line?: number;\n  };\n};\nexport type ReposListPullRequestsAssociatedWithCommitApiResponse =\n  /** status 200 Response */ PullRequestSimple[];\nexport type ReposListPullRequestsAssociatedWithCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** commit_sha parameter */\n  commitSha: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetCommitApiResponse = /** status 200 Response */ Commit;\nexport type ReposGetCommitApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** ref parameter */\n  ref: string;\n};\nexport type ReposGetCombinedStatusForRefApiResponse =\n  /** status 200 Response */ CombinedCommitStatus;\nexport type ReposGetCombinedStatusForRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposListCommitStatusesForRefApiResponse =\n  /** status 200 Response */ Status[];\nexport type ReposListCommitStatusesForRefApiArg = {\n  owner: string;\n  repo: string;\n  /** ref parameter */\n  ref: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetCommunityProfileMetricsApiResponse =\n  /** status 200 Response */ CommunityProfile;\nexport type ReposGetCommunityProfileMetricsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposCompareCommitsApiResponse =\n  /** status 200 Response */ CommitComparison;\nexport type ReposCompareCommitsApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** The base branch and head branch to compare. This parameter expects the format `{base}...{head}`. */\n  basehead: string;\n};\nexport type ReposGetContentApiResponse = /** status 200 Response */\n  | ContentDirectory\n  | ContentFile\n  | SymlinkContent\n  | SymlinkContent2;\nexport type ReposGetContentApiArg = {\n  owner: string;\n  repo: string;\n  /** path parameter */\n  path: string;\n  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n  ref?: string;\n};\nexport type ReposCreateOrUpdateFileContentsApiResponse =\n  /** status 200 Response */ FileCommit | /** status 201 Response */ FileCommit;\nexport type ReposCreateOrUpdateFileContentsApiArg = {\n  owner: string;\n  repo: string;\n  /** path parameter */\n  path: string;\n  body: {\n    message: string;\n    content: string;\n    sha?: string;\n    branch?: string;\n    committer?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n    author?: {\n      name: string;\n      email: string;\n      date?: string;\n    };\n  };\n};\nexport type ReposDeleteFileApiResponse = /** status 200 Response */ FileCommit;\nexport type ReposDeleteFileApiArg = {\n  owner: string;\n  repo: string;\n  /** path parameter */\n  path: string;\n  body: {\n    message: string;\n    sha: string;\n    branch?: string;\n    committer?: {\n      name?: string;\n      email?: string;\n    };\n    author?: {\n      name?: string;\n      email?: string;\n    };\n  };\n};\nexport type ReposListContributorsApiResponse =\n  /** status 200 if repository contains content */\n    | Contributor[]\n    | /** status 204 Response if repository is empty */ undefined;\nexport type ReposListContributorsApiArg = {\n  owner: string;\n  repo: string;\n  /** Set to `1` or `true` to include anonymous contributors in results. */\n  anon?: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposListDeploymentsApiResponse =\n  /** status 200 Response */ Deployment[];\nexport type ReposListDeploymentsApiArg = {\n  owner: string;\n  repo: string;\n  /** The SHA recorded at creation time. */\n  sha?: string;\n  /** The name of the ref. This can be a branch, tag, or SHA. */\n  ref?: string;\n  /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n  task?: string;\n  /** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n  environment?: string | null;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateDeploymentApiResponse = /** status 201 Response */\n  | Deployment\n  | /** status 202 Merged branch response */ {\n      message?: string;\n    };\nexport type ReposCreateDeploymentApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    ref: string;\n    task?: string;\n    auto_merge?: boolean;\n    required_contexts?: string[];\n    payload?:\n      | {\n          [key: string]: any;\n        }\n      | string;\n    environment?: string;\n    description?: string | null;\n    transient_environment?: boolean;\n    production_environment?: boolean;\n  };\n};\nexport type ReposGetDeploymentApiResponse =\n  /** status 200 Response */ Deployment;\nexport type ReposGetDeploymentApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n};\nexport type ReposDeleteDeploymentApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteDeploymentApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n};\nexport type ReposListDeploymentStatusesApiResponse =\n  /** status 200 Response */ DeploymentStatus[];\nexport type ReposListDeploymentStatusesApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateDeploymentStatusApiResponse =\n  /** status 201 Response */ DeploymentStatus;\nexport type ReposCreateDeploymentStatusApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n  body: {\n    state:\n      | \"error\"\n      | \"failure\"\n      | \"inactive\"\n      | \"in_progress\"\n      | \"queued\"\n      | \"pending\"\n      | \"success\";\n    target_url?: string;\n    log_url?: string;\n    description?: string;\n    environment?: \"production\" | \"staging\" | \"qa\";\n    environment_url?: string;\n    auto_inactive?: boolean;\n  };\n};\nexport type ReposGetDeploymentStatusApiResponse =\n  /** status 200 Response */ DeploymentStatus;\nexport type ReposGetDeploymentStatusApiArg = {\n  owner: string;\n  repo: string;\n  /** deployment_id parameter */\n  deploymentId: number;\n  statusId: number;\n};\nexport type ReposCreateDispatchEventApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposCreateDispatchEventApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    event_type: string;\n    client_payload?: {\n      [key: string]: any;\n    };\n  };\n};\nexport type ReposGetAllEnvironmentsApiResponse = /** status 200 Response */ {\n  total_count?: number;\n  environments?: Environment[];\n};\nexport type ReposGetAllEnvironmentsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetEnvironmentApiResponse =\n  /** status 200 Response */ Environment;\nexport type ReposGetEnvironmentApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the environment */\n  environmentName: string;\n};\nexport type ReposCreateOrUpdateEnvironmentApiResponse =\n  /** status 200 Response */ Environment;\nexport type ReposCreateOrUpdateEnvironmentApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the environment */\n  environmentName: string;\n  body: {\n    wait_timer?: WaitTimer;\n    reviewers?:\n      | {\n          type?: DeploymentReviewerType;\n          id?: number;\n        }[]\n      | null;\n    deployment_branch_policy?: DeploymentBranchPolicy;\n  } | null;\n};\nexport type ReposDeleteAnEnvironmentApiResponse = unknown;\nexport type ReposDeleteAnEnvironmentApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the environment */\n  environmentName: string;\n};\nexport type ReposListForksApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListForksApiArg = {\n  owner: string;\n  repo: string;\n  /** The sort order. Can be either `newest`, `oldest`, or `stargazers`. */\n  sort?: \"newest\" | \"oldest\" | \"stargazers\" | \"watchers\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateForkApiResponse =\n  /** status 202 Response */ FullRepository;\nexport type ReposCreateForkApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    organization?: string;\n  } | null;\n};\nexport type ReposListWebhooksApiResponse = /** status 200 Response */ Webhook[];\nexport type ReposListWebhooksApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateWebhookApiResponse = /** status 201 Response */ Webhook;\nexport type ReposCreateWebhookApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    name?: string;\n    config?: {\n      url?: WebhookConfigUrl;\n      content_type?: WebhookConfigContentType;\n      secret?: WebhookConfigSecret;\n      insecure_ssl?: WebhookConfigInsecureSsl;\n      token?: string;\n      digest?: string;\n    };\n    events?: string[];\n    active?: boolean;\n  } | null;\n};\nexport type ReposGetWebhookApiResponse = /** status 200 Response */ Webhook;\nexport type ReposGetWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposUpdateWebhookApiResponse = /** status 200 Response */ Webhook;\nexport type ReposUpdateWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  body: {\n    config?: {\n      url: WebhookConfigUrl;\n      content_type?: WebhookConfigContentType;\n      secret?: WebhookConfigSecret;\n      insecure_ssl?: WebhookConfigInsecureSsl;\n      address?: string;\n      room?: string;\n    };\n    events?: string[];\n    add_events?: string[];\n    remove_events?: string[];\n    active?: boolean;\n  };\n};\nexport type ReposDeleteWebhookApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeleteWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposGetWebhookConfigForRepoApiResponse =\n  /** status 200 Response */ WebhookConfiguration;\nexport type ReposGetWebhookConfigForRepoApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposUpdateWebhookConfigForRepoApiResponse =\n  /** status 200 Response */ WebhookConfiguration;\nexport type ReposUpdateWebhookConfigForRepoApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  body: {\n    url?: WebhookConfigUrl;\n    content_type?: WebhookConfigContentType;\n    secret?: WebhookConfigSecret;\n    insecure_ssl?: WebhookConfigInsecureSsl;\n  };\n};\nexport type ReposListWebhookDeliveriesApiResponse =\n  /** status 200 Response */ SimpleWebhookDelivery[];\nexport type ReposListWebhookDeliveriesApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n  cursor?: string;\n};\nexport type ReposGetWebhookDeliveryApiResponse =\n  /** status 200 Response */ WebhookDelivery;\nexport type ReposGetWebhookDeliveryApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  deliveryId: number;\n};\nexport type ReposRedeliverWebhookDeliveryApiResponse =\n  /** status 202 Accepted */ object;\nexport type ReposRedeliverWebhookDeliveryApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n  deliveryId: number;\n};\nexport type ReposPingWebhookApiResponse = /** status 204 Response */ undefined;\nexport type ReposPingWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposTestPushWebhookApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposTestPushWebhookApiArg = {\n  owner: string;\n  repo: string;\n  hookId: number;\n};\nexport type ReposListInvitationsApiResponse =\n  /** status 200 Response */ RepositoryInvitation[];\nexport type ReposListInvitationsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposUpdateInvitationApiResponse =\n  /** status 200 Response */ RepositoryInvitation;\nexport type ReposUpdateInvitationApiArg = {\n  owner: string;\n  repo: string;\n  /** invitation_id parameter */\n  invitationId: number;\n  body: {\n    permissions?: \"read\" | \"write\" | \"maintain\" | \"triage\" | \"admin\";\n  };\n};\nexport type ReposDeleteInvitationApiResponse = unknown;\nexport type ReposDeleteInvitationApiArg = {\n  owner: string;\n  repo: string;\n  /** invitation_id parameter */\n  invitationId: number;\n};\nexport type ReposListDeployKeysApiResponse =\n  /** status 200 Response */ DeployKey[];\nexport type ReposListDeployKeysApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateDeployKeyApiResponse =\n  /** status 201 Response */ DeployKey;\nexport type ReposCreateDeployKeyApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    title?: string;\n    key: string;\n    read_only?: boolean;\n  };\n};\nexport type ReposGetDeployKeyApiResponse = /** status 200 Response */ DeployKey;\nexport type ReposGetDeployKeyApiArg = {\n  owner: string;\n  repo: string;\n  /** key_id parameter */\n  keyId: number;\n};\nexport type ReposDeleteDeployKeyApiResponse = unknown;\nexport type ReposDeleteDeployKeyApiArg = {\n  owner: string;\n  repo: string;\n  /** key_id parameter */\n  keyId: number;\n};\nexport type ReposListLanguagesApiResponse = /** status 200 Response */ Language;\nexport type ReposListLanguagesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposEnableLfsForRepoApiResponse =\n  /** status 202 Accepted */ object;\nexport type ReposEnableLfsForRepoApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDisableLfsForRepoApiResponse = unknown;\nexport type ReposDisableLfsForRepoApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposMergeUpstreamApiResponse =\n  /** status 200 The branch has been successfully synced with the upstream repository */ MergedUpstream;\nexport type ReposMergeUpstreamApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    branch: string;\n  };\n};\nexport type ReposMergeApiResponse =\n  /** status 201 Successful Response (The resulting merge commit) */\n    | Commit\n    | /** status 204 Response when already merged */ undefined;\nexport type ReposMergeApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    base: string;\n    head: string;\n    commit_message?: string;\n  };\n};\nexport type ReposGetPagesApiResponse = /** status 200 Response */ GitHubPages;\nexport type ReposGetPagesApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposCreatePagesSiteApiResponse =\n  /** status 201 Response */ GitHubPages;\nexport type ReposCreatePagesSiteApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    source: {\n      branch: string;\n      path?: \"/\" | \"/docs\";\n    };\n  } | null;\n};\nexport type ReposUpdateInformationAboutPagesSiteApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposUpdateInformationAboutPagesSiteApiArg = {\n  owner: string;\n  repo: string;\n  body: any | any | any | any;\n};\nexport type ReposDeletePagesSiteApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeletePagesSiteApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposListPagesBuildsApiResponse =\n  /** status 200 Response */ PageBuild[];\nexport type ReposListPagesBuildsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposRequestPagesBuildApiResponse =\n  /** status 201 Response */ PageBuildStatus;\nexport type ReposRequestPagesBuildApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetLatestPagesBuildApiResponse =\n  /** status 200 Response */ PageBuild;\nexport type ReposGetLatestPagesBuildApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetPagesBuildApiResponse =\n  /** status 200 Response */ PageBuild;\nexport type ReposGetPagesBuildApiArg = {\n  owner: string;\n  repo: string;\n  buildId: number;\n};\nexport type ReposGetPagesHealthCheckApiResponse = /** status 200 Response */\n  | PagesHealthCheckStatus\n  | /** status 202 Empty response */ EmptyObject;\nexport type ReposGetPagesHealthCheckApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetReadmeApiResponse = /** status 200 Response */ ContentFile;\nexport type ReposGetReadmeApiArg = {\n  owner: string;\n  repo: string;\n  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n  ref?: string;\n};\nexport type ReposGetReadmeInDirectoryApiResponse =\n  /** status 200 Response */ ContentFile;\nexport type ReposGetReadmeInDirectoryApiArg = {\n  owner: string;\n  repo: string;\n  /** The alternate path to look for a README file */\n  dir: string;\n  /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n  ref?: string;\n};\nexport type ReposListReleasesApiResponse = /** status 200 Response */ Release[];\nexport type ReposListReleasesApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposCreateReleaseApiResponse = /** status 201 Response */ Release;\nexport type ReposCreateReleaseApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tag_name: string;\n    target_commitish?: string;\n    name?: string;\n    body?: string;\n    draft?: boolean;\n    prerelease?: boolean;\n    discussion_category_name?: string;\n    generate_release_notes?: boolean;\n  };\n};\nexport type ReposGetReleaseAssetApiResponse =\n  /** status 200 To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */ ReleaseAsset;\nexport type ReposGetReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** asset_id parameter */\n  assetId: number;\n};\nexport type ReposUpdateReleaseAssetApiResponse =\n  /** status 200 Response */ ReleaseAsset;\nexport type ReposUpdateReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** asset_id parameter */\n  assetId: number;\n  body: {\n    name?: string;\n    label?: string;\n    state?: string;\n  };\n};\nexport type ReposDeleteReleaseAssetApiResponse = unknown;\nexport type ReposDeleteReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** asset_id parameter */\n  assetId: number;\n};\nexport type ReposGenerateReleaseNotesApiResponse =\n  /** status 200 Name and body of generated release notes */ GeneratedReleaseNotesContent;\nexport type ReposGenerateReleaseNotesApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    tag_name: string;\n    target_commitish?: string;\n    previous_tag_name?: string;\n    configuration_file_path?: string;\n  };\n};\nexport type ReposGetLatestReleaseApiResponse =\n  /** status 200 Response */ Release;\nexport type ReposGetLatestReleaseApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetReleaseByTagApiResponse =\n  /** status 200 Response */ Release;\nexport type ReposGetReleaseByTagApiArg = {\n  owner: string;\n  repo: string;\n  /** tag parameter */\n  tag: string;\n};\nexport type ReposGetReleaseApiResponse =\n  /** status 200 **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */ Release;\nexport type ReposGetReleaseApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n};\nexport type ReposUpdateReleaseApiResponse = /** status 200 Response */ Release;\nexport type ReposUpdateReleaseApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n  body: {\n    tag_name?: string;\n    target_commitish?: string;\n    name?: string;\n    body?: string;\n    draft?: boolean;\n    prerelease?: boolean;\n    discussion_category_name?: string;\n  };\n};\nexport type ReposDeleteReleaseApiResponse = unknown;\nexport type ReposDeleteReleaseApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n};\nexport type ReposListReleaseAssetsApiResponse =\n  /** status 200 Response */ ReleaseAsset[];\nexport type ReposListReleaseAssetsApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposUploadReleaseAssetApiResponse =\n  /** status 201 Response for successful upload */ ReleaseAsset;\nexport type ReposUploadReleaseAssetApiArg = {\n  owner: string;\n  repo: string;\n  /** release_id parameter */\n  releaseId: number;\n  name: string;\n  label?: string;\n  body: string;\n};\nexport type ReposGetCodeFrequencyStatsApiResponse =\n  /** status 200 Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */\n    | CodeFrequencyStat[]\n    | /** status 202 Accepted */ object\n    | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetCodeFrequencyStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetCommitActivityStatsApiResponse = /** status 200 Response */\n  | CommitActivity[]\n  | /** status 202 Accepted */ object\n  | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetCommitActivityStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetContributorsStatsApiResponse =\n  /** status 200 *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n   *   `a` - Number of additions\n   *   `d` - Number of deletions\n   *   `c` - Number of commits */\n    | ContributorActivity[]\n    | /** status 202 Accepted */ object\n    | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetContributorsStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetParticipationStatsApiResponse =\n  /** status 200 The array order is oldest week (index 0) to most recent week. */ ParticipationStats;\nexport type ReposGetParticipationStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetPunchCardStatsApiResponse =\n  /** status 200 For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. */\n    | CodeFrequencyStat[]\n    | /** status 204 A header with no content is returned. */ undefined;\nexport type ReposGetPunchCardStatsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposCreateCommitStatusApiResponse =\n  /** status 201 Response */ Status;\nexport type ReposCreateCommitStatusApiArg = {\n  owner: string;\n  repo: string;\n  sha: string;\n  body: {\n    state: \"error\" | \"failure\" | \"pending\" | \"success\";\n    target_url?: string;\n    description?: string;\n    context?: string;\n  };\n};\nexport type ReposListTagsApiResponse = /** status 200 Response */ Tag[];\nexport type ReposListTagsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposDownloadTarballArchiveApiResponse = unknown;\nexport type ReposDownloadTarballArchiveApiArg = {\n  owner: string;\n  repo: string;\n  ref: string;\n};\nexport type ReposListTeamsApiResponse = /** status 200 Response */ Team[];\nexport type ReposListTeamsApiArg = {\n  owner: string;\n  repo: string;\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposGetAllTopicsApiResponse = /** status 200 Response */ Topic;\nexport type ReposGetAllTopicsApiArg = {\n  owner: string;\n  repo: string;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Results per page (max 100) */\n  perPage?: number;\n};\nexport type ReposReplaceAllTopicsApiResponse = /** status 200 Response */ Topic;\nexport type ReposReplaceAllTopicsApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    names: string[];\n  };\n};\nexport type ReposGetClonesApiResponse = /** status 200 Response */ CloneTraffic;\nexport type ReposGetClonesApiArg = {\n  owner: string;\n  repo: string;\n  /** Must be one of: `day`, `week`. */\n  per?: \"\" | \"day\" | \"week\";\n};\nexport type ReposGetTopPathsApiResponse =\n  /** status 200 Response */ ContentTraffic[];\nexport type ReposGetTopPathsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetTopReferrersApiResponse =\n  /** status 200 Response */ ReferrerTraffic[];\nexport type ReposGetTopReferrersApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposGetViewsApiResponse = /** status 200 Response */ ViewTraffic;\nexport type ReposGetViewsApiArg = {\n  owner: string;\n  repo: string;\n  /** Must be one of: `day`, `week`. */\n  per?: \"\" | \"day\" | \"week\";\n};\nexport type ReposTransferApiResponse =\n  /** status 202 Response */ MinimalRepository;\nexport type ReposTransferApiArg = {\n  owner: string;\n  repo: string;\n  body: {\n    new_owner: string;\n    team_ids?: number[];\n  };\n};\nexport type ReposCheckVulnerabilityAlertsApiResponse = unknown;\nexport type ReposCheckVulnerabilityAlertsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposEnableVulnerabilityAlertsApiResponse = unknown;\nexport type ReposEnableVulnerabilityAlertsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDisableVulnerabilityAlertsApiResponse = unknown;\nexport type ReposDisableVulnerabilityAlertsApiArg = {\n  owner: string;\n  repo: string;\n};\nexport type ReposDownloadZipballArchiveApiResponse = unknown;\nexport type ReposDownloadZipballArchiveApiArg = {\n  owner: string;\n  repo: string;\n  ref: string;\n};\nexport type ReposCreateUsingTemplateApiResponse =\n  /** status 201 Response */ Repository2;\nexport type ReposCreateUsingTemplateApiArg = {\n  templateOwner: string;\n  templateRepo: string;\n  body: {\n    owner?: string;\n    name: string;\n    description?: string;\n    include_all_branches?: boolean;\n    private?: boolean;\n  };\n};\nexport type ReposListPublicApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListPublicApiArg = {\n  /** A repository ID. Only return repositories with an ID greater than this ID. */\n  since?: number;\n};\nexport type ReposListForAuthenticatedUserApiResponse =\n  /** status 200 Response */ Repository2[];\nexport type ReposListForAuthenticatedUserApiArg = {\n  /** Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`. */\n  visibility?: \"all\" | \"public\" | \"private\";\n  /** Comma-separated list of values. Can include:\n    \\* `owner`: Repositories that are owned by the authenticated user.\n    \\* `collaborator`: Repositories that the user has been added to as a collaborator.\n    \\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n  affiliation?: string;\n  /** Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`\n      \n    Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */\n  type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\";\n  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n  sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n  /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n  /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  since?: string;\n  /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n  before?: string;\n};\nexport type ReposCreateForAuthenticatedUserApiResponse =\n  /** status 201 Response */ Repository2;\nexport type ReposCreateForAuthenticatedUserApiArg = {\n  body: {\n    name: string;\n    description?: string;\n    homepage?: string;\n    private?: boolean;\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    team_id?: number;\n    auto_init?: boolean;\n    gitignore_template?: string;\n    license_template?: string;\n    allow_squash_merge?: boolean;\n    allow_merge_commit?: boolean;\n    allow_rebase_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    has_downloads?: boolean;\n    is_template?: boolean;\n  };\n};\nexport type ReposListInvitationsForAuthenticatedUserApiResponse =\n  /** status 200 Response */ RepositoryInvitation[];\nexport type ReposListInvitationsForAuthenticatedUserApiArg = {\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type ReposAcceptInvitationForAuthenticatedUserApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposAcceptInvitationForAuthenticatedUserApiArg = {\n  /** invitation_id parameter */\n  invitationId: number;\n};\nexport type ReposDeclineInvitationForAuthenticatedUserApiResponse =\n  /** status 204 Response */ undefined;\nexport type ReposDeclineInvitationForAuthenticatedUserApiArg = {\n  /** invitation_id parameter */\n  invitationId: number;\n};\nexport type ReposListForUserApiResponse =\n  /** status 200 Response */ MinimalRepository[];\nexport type ReposListForUserApiArg = {\n  username: string;\n  /** Can be one of `all`, `owner`, `member`. */\n  type?: \"all\" | \"owner\" | \"member\";\n  /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n  sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n  /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */\n  direction?: \"asc\" | \"desc\";\n  /** Results per page (max 100) */\n  perPage?: number;\n  /** Page number of the results to fetch. */\n  page?: number;\n};\nexport type SimpleUser = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n};\nexport type LicenseSimple = {\n  key: string;\n  name: string;\n  url: string | null;\n  spdx_id: string | null;\n  node_id: string;\n  html_url?: string;\n} | null;\nexport type SimpleUser2 = {\n  name?: string | null;\n  email?: string | null;\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  starred_at?: string;\n} | null;\nexport type Repository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: LicenseSimple;\n  organization?: SimpleUser2;\n  forks: number;\n  permissions?: {\n    admin: boolean;\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n  };\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  allow_rebase_merge?: boolean;\n  template_repository?: {\n    id?: number;\n    node_id?: string;\n    name?: string;\n    full_name?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      avatar_url?: string;\n      gravatar_id?: string;\n      url?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      repos_url?: string;\n      events_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    private?: boolean;\n    html_url?: string;\n    description?: string;\n    fork?: boolean;\n    url?: string;\n    archive_url?: string;\n    assignees_url?: string;\n    blobs_url?: string;\n    branches_url?: string;\n    collaborators_url?: string;\n    comments_url?: string;\n    commits_url?: string;\n    compare_url?: string;\n    contents_url?: string;\n    contributors_url?: string;\n    deployments_url?: string;\n    downloads_url?: string;\n    events_url?: string;\n    forks_url?: string;\n    git_commits_url?: string;\n    git_refs_url?: string;\n    git_tags_url?: string;\n    git_url?: string;\n    issue_comment_url?: string;\n    issue_events_url?: string;\n    issues_url?: string;\n    keys_url?: string;\n    labels_url?: string;\n    languages_url?: string;\n    merges_url?: string;\n    milestones_url?: string;\n    notifications_url?: string;\n    pulls_url?: string;\n    releases_url?: string;\n    ssh_url?: string;\n    stargazers_url?: string;\n    statuses_url?: string;\n    subscribers_url?: string;\n    subscription_url?: string;\n    tags_url?: string;\n    teams_url?: string;\n    trees_url?: string;\n    clone_url?: string;\n    mirror_url?: string;\n    hooks_url?: string;\n    svn_url?: string;\n    homepage?: string;\n    language?: string;\n    forks_count?: number;\n    stargazers_count?: number;\n    watchers_count?: number;\n    size?: number;\n    default_branch?: string;\n    open_issues_count?: number;\n    is_template?: boolean;\n    topics?: string[];\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    has_pages?: boolean;\n    has_downloads?: boolean;\n    archived?: boolean;\n    disabled?: boolean;\n    visibility?: string;\n    pushed_at?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      admin?: boolean;\n      maintain?: boolean;\n      push?: boolean;\n      triage?: boolean;\n      pull?: boolean;\n    };\n    allow_rebase_merge?: boolean;\n    temp_clone_token?: string;\n    allow_squash_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    allow_update_branch?: boolean;\n    allow_merge_commit?: boolean;\n    subscribers_count?: number;\n    network_count?: number;\n  } | null;\n  temp_clone_token?: string;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  open_issues: number;\n  watchers: number;\n  master_branch?: string;\n  starred_at?: string;\n} | null;\nexport type CodeOfConduct = {\n  key: string;\n  name: string;\n  url: string;\n  body?: string;\n  html_url: string | null;\n};\nexport type MinimalRepository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url?: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url?: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url?: string;\n  mirror_url?: string | null;\n  hooks_url: string;\n  svn_url?: string;\n  homepage?: string | null;\n  language?: string | null;\n  forks_count?: number;\n  stargazers_count?: number;\n  watchers_count?: number;\n  size?: number;\n  default_branch?: string;\n  open_issues_count?: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues?: boolean;\n  has_projects?: boolean;\n  has_wiki?: boolean;\n  has_pages?: boolean;\n  has_downloads?: boolean;\n  archived?: boolean;\n  disabled?: boolean;\n  visibility?: string;\n  pushed_at?: string | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  permissions?: {\n    admin?: boolean;\n    maintain?: boolean;\n    push?: boolean;\n    triage?: boolean;\n    pull?: boolean;\n  };\n  role_name?: string;\n  template_repository?: Repository;\n  temp_clone_token?: string;\n  delete_branch_on_merge?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  code_of_conduct?: CodeOfConduct;\n  license?: {\n    key?: string;\n    name?: string;\n    spdx_id?: string;\n    url?: string;\n    node_id?: string;\n  } | null;\n  forks?: number;\n  open_issues?: number;\n  watchers?: number;\n  allow_forking?: boolean;\n};\nexport type Repository2 = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: LicenseSimple;\n  organization?: SimpleUser2;\n  forks: number;\n  permissions?: {\n    admin: boolean;\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n  };\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  allow_rebase_merge?: boolean;\n  template_repository?: {\n    id?: number;\n    node_id?: string;\n    name?: string;\n    full_name?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      avatar_url?: string;\n      gravatar_id?: string;\n      url?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      repos_url?: string;\n      events_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    private?: boolean;\n    html_url?: string;\n    description?: string;\n    fork?: boolean;\n    url?: string;\n    archive_url?: string;\n    assignees_url?: string;\n    blobs_url?: string;\n    branches_url?: string;\n    collaborators_url?: string;\n    comments_url?: string;\n    commits_url?: string;\n    compare_url?: string;\n    contents_url?: string;\n    contributors_url?: string;\n    deployments_url?: string;\n    downloads_url?: string;\n    events_url?: string;\n    forks_url?: string;\n    git_commits_url?: string;\n    git_refs_url?: string;\n    git_tags_url?: string;\n    git_url?: string;\n    issue_comment_url?: string;\n    issue_events_url?: string;\n    issues_url?: string;\n    keys_url?: string;\n    labels_url?: string;\n    languages_url?: string;\n    merges_url?: string;\n    milestones_url?: string;\n    notifications_url?: string;\n    pulls_url?: string;\n    releases_url?: string;\n    ssh_url?: string;\n    stargazers_url?: string;\n    statuses_url?: string;\n    subscribers_url?: string;\n    subscription_url?: string;\n    tags_url?: string;\n    teams_url?: string;\n    trees_url?: string;\n    clone_url?: string;\n    mirror_url?: string;\n    hooks_url?: string;\n    svn_url?: string;\n    homepage?: string;\n    language?: string;\n    forks_count?: number;\n    stargazers_count?: number;\n    watchers_count?: number;\n    size?: number;\n    default_branch?: string;\n    open_issues_count?: number;\n    is_template?: boolean;\n    topics?: string[];\n    has_issues?: boolean;\n    has_projects?: boolean;\n    has_wiki?: boolean;\n    has_pages?: boolean;\n    has_downloads?: boolean;\n    archived?: boolean;\n    disabled?: boolean;\n    visibility?: string;\n    pushed_at?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      admin?: boolean;\n      maintain?: boolean;\n      push?: boolean;\n      triage?: boolean;\n      pull?: boolean;\n    };\n    allow_rebase_merge?: boolean;\n    temp_clone_token?: string;\n    allow_squash_merge?: boolean;\n    allow_auto_merge?: boolean;\n    delete_branch_on_merge?: boolean;\n    allow_update_branch?: boolean;\n    allow_merge_commit?: boolean;\n    subscribers_count?: number;\n    network_count?: number;\n  } | null;\n  temp_clone_token?: string;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count?: number;\n  network_count?: number;\n  open_issues: number;\n  watchers: number;\n  master_branch?: string;\n  starred_at?: string;\n};\nexport type BasicError = {\n  message?: string;\n  documentation_url?: string;\n  url?: string;\n  status?: string;\n};\nexport type ValidationError = {\n  message: string;\n  documentation_url: string;\n  errors?: {\n    resource?: string;\n    field?: string;\n    message?: string;\n    code: string;\n    index?: number;\n    value?: (string | null) | (number | null) | (string[] | null);\n  }[];\n};\nexport type CodeOfConductSimple = {\n  url: string;\n  key: string;\n  name: string;\n  html_url: string | null;\n};\nexport type FullRepository = {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  owner: SimpleUser;\n  private: boolean;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  archive_url: string;\n  assignees_url: string;\n  blobs_url: string;\n  branches_url: string;\n  collaborators_url: string;\n  comments_url: string;\n  commits_url: string;\n  compare_url: string;\n  contents_url: string;\n  contributors_url: string;\n  deployments_url: string;\n  downloads_url: string;\n  events_url: string;\n  forks_url: string;\n  git_commits_url: string;\n  git_refs_url: string;\n  git_tags_url: string;\n  git_url: string;\n  issue_comment_url: string;\n  issue_events_url: string;\n  issues_url: string;\n  keys_url: string;\n  labels_url: string;\n  languages_url: string;\n  merges_url: string;\n  milestones_url: string;\n  notifications_url: string;\n  pulls_url: string;\n  releases_url: string;\n  ssh_url: string;\n  stargazers_url: string;\n  statuses_url: string;\n  subscribers_url: string;\n  subscription_url: string;\n  tags_url: string;\n  teams_url: string;\n  trees_url: string;\n  clone_url: string;\n  mirror_url: string | null;\n  hooks_url: string;\n  svn_url: string;\n  homepage: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  watchers_count: number;\n  size: number;\n  default_branch: string;\n  open_issues_count: number;\n  is_template?: boolean;\n  topics?: string[];\n  has_issues: boolean;\n  has_projects: boolean;\n  has_wiki: boolean;\n  has_pages: boolean;\n  has_downloads: boolean;\n  archived: boolean;\n  disabled: boolean;\n  visibility?: string;\n  pushed_at: string;\n  created_at: string;\n  updated_at: string;\n  permissions?: {\n    admin: boolean;\n    maintain?: boolean;\n    push: boolean;\n    triage?: boolean;\n    pull: boolean;\n  };\n  allow_rebase_merge?: boolean;\n  template_repository?: Repository;\n  temp_clone_token?: string | null;\n  allow_squash_merge?: boolean;\n  allow_auto_merge?: boolean;\n  delete_branch_on_merge?: boolean;\n  allow_merge_commit?: boolean;\n  allow_forking?: boolean;\n  subscribers_count: number;\n  network_count: number;\n  license: LicenseSimple;\n  organization?: SimpleUser2;\n  parent?: Repository2;\n  source?: Repository2;\n  forks: number;\n  master_branch?: string;\n  open_issues: number;\n  watchers: number;\n  anonymous_access_enabled?: boolean;\n  code_of_conduct?: CodeOfConductSimple;\n  security_and_analysis?: {\n    advanced_security?: {\n      status?: \"enabled\" | \"disabled\";\n    };\n    secret_scanning?: {\n      status?: \"enabled\" | \"disabled\";\n    };\n  } | null;\n};\nexport type AutolinkReference = {\n  id: number;\n  key_prefix: string;\n  url_template: string;\n};\nexport type ProtectedBranchRequiredStatusCheck = {\n  url?: string;\n  enforcement_level?: string;\n  contexts: string[];\n  checks: {\n    context: string;\n    app_id: number | null;\n  }[];\n  contexts_url?: string;\n  strict?: boolean;\n};\nexport type ProtectedBranchAdminEnforced = {\n  url: string;\n  enabled: boolean;\n};\nexport type TeamSimple = {\n  id: number;\n  node_id: string;\n  url: string;\n  members_url: string;\n  name: string;\n  description: string | null;\n  permission: string;\n  privacy?: string;\n  html_url: string;\n  repositories_url: string;\n  slug: string;\n  ldap_dn?: string;\n} | null;\nexport type Team = {\n  id: number;\n  node_id: string;\n  name: string;\n  slug: string;\n  description: string | null;\n  privacy?: string;\n  permission: string;\n  permissions?: {\n    pull: boolean;\n    triage: boolean;\n    push: boolean;\n    maintain: boolean;\n    admin: boolean;\n  };\n  url: string;\n  html_url: string;\n  members_url: string;\n  repositories_url: string;\n  parent: TeamSimple;\n};\nexport type ProtectedBranchPullRequestReview = {\n  url?: string;\n  dismissal_restrictions?: {\n    users?: SimpleUser[];\n    teams?: Team[];\n    url?: string;\n    users_url?: string;\n    teams_url?: string;\n  };\n  bypass_pull_request_allowances?: {\n    users?: SimpleUser[];\n    teams?: Team[];\n  } | null;\n  dismiss_stale_reviews: boolean;\n  require_code_owner_reviews: boolean;\n  required_approving_review_count?: number;\n};\nexport type BranchRestrictionPolicy = {\n  url: string;\n  users_url: string;\n  teams_url: string;\n  apps_url: string;\n  users: {\n    login?: string;\n    id?: number;\n    node_id?: string;\n    avatar_url?: string;\n    gravatar_id?: string;\n    url?: string;\n    html_url?: string;\n    followers_url?: string;\n    following_url?: string;\n    gists_url?: string;\n    starred_url?: string;\n    subscriptions_url?: string;\n    organizations_url?: string;\n    repos_url?: string;\n    events_url?: string;\n    received_events_url?: string;\n    type?: string;\n    site_admin?: boolean;\n  }[];\n  teams: {\n    id?: number;\n    node_id?: string;\n    url?: string;\n    html_url?: string;\n    name?: string;\n    slug?: string;\n    description?: string | null;\n    privacy?: string;\n    permission?: string;\n    members_url?: string;\n    repositories_url?: string;\n    parent?: string | null;\n  }[];\n  apps: {\n    id?: number;\n    slug?: string;\n    node_id?: string;\n    owner?: {\n      login?: string;\n      id?: number;\n      node_id?: string;\n      url?: string;\n      repos_url?: string;\n      events_url?: string;\n      hooks_url?: string;\n      issues_url?: string;\n      members_url?: string;\n      public_members_url?: string;\n      avatar_url?: string;\n      description?: string;\n      gravatar_id?: string;\n      html_url?: string;\n      followers_url?: string;\n      following_url?: string;\n      gists_url?: string;\n      starred_url?: string;\n      subscriptions_url?: string;\n      organizations_url?: string;\n      received_events_url?: string;\n      type?: string;\n      site_admin?: boolean;\n    };\n    name?: string;\n    description?: string;\n    external_url?: string;\n    html_url?: string;\n    created_at?: string;\n    updated_at?: string;\n    permissions?: {\n      metadata?: string;\n      contents?: string;\n      issues?: string;\n      single_file?: string;\n    };\n    events?: string[];\n  }[];\n};\nexport type BranchProtection = {\n  url?: string;\n  enabled?: boolean;\n  required_status_checks?: ProtectedBranchRequiredStatusCheck;\n  enforce_admins?: ProtectedBranchAdminEnforced;\n  required_pull_request_reviews?: ProtectedBranchPullRequestReview;\n  restrictions?: BranchRestrictionPolicy;\n  required_linear_history?: {\n    enabled?: boolean;\n  };\n  allow_force_pushes?: {\n    enabled?: boolean;\n  };\n  allow_deletions?: {\n    enabled?: boolean;\n  };\n  required_conversation_resolution?: {\n    enabled?: boolean;\n  };\n  name?: string;\n  protection_url?: string;\n  required_signatures?: {\n    url: string;\n    enabled: boolean;\n  };\n};\nexport type ShortBranch = {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  protected: boolean;\n  protection?: BranchProtection;\n  protection_url?: string;\n};\nexport type GitUser = {\n  name?: string;\n  email?: string;\n  date?: string;\n} | null;\nexport type Verification = {\n  verified: boolean;\n  reason: string;\n  payload: string | null;\n  signature: string | null;\n};\nexport type DiffEntry = {\n  sha: string;\n  filename: string;\n  status:\n    | \"added\"\n    | \"removed\"\n    | \"modified\"\n    | \"renamed\"\n    | \"copied\"\n    | \"changed\"\n    | \"unchanged\";\n  additions: number;\n  deletions: number;\n  changes: number;\n  blob_url: string;\n  raw_url: string;\n  contents_url: string;\n  patch?: string;\n  previous_filename?: string;\n};\nexport type Commit = {\n  url: string;\n  sha: string;\n  node_id: string;\n  html_url: string;\n  comments_url: string;\n  commit: {\n    url: string;\n    author: GitUser;\n    committer: GitUser;\n    message: string;\n    comment_count: number;\n    tree: {\n      sha: string;\n      url: string;\n    };\n    verification?: Verification;\n  };\n  author: SimpleUser2;\n  committer: SimpleUser2;\n  parents: {\n    sha: string;\n    url: string;\n    html_url?: string;\n  }[];\n  stats?: {\n    additions?: number;\n    deletions?: number;\n    total?: number;\n  };\n  files?: DiffEntry[];\n};\nexport type BranchWithProtection = {\n  name: string;\n  commit: Commit;\n  _links: {\n    html: string;\n    self: string;\n  };\n  protected: boolean;\n  protection: BranchProtection;\n  protection_url: string;\n  pattern?: string;\n  required_approving_review_count?: number;\n};\nexport type StatusCheckPolicy = {\n  url: string;\n  strict: boolean;\n  contexts: string[];\n  checks: {\n    context: string;\n    app_id: number | null;\n  }[];\n  contexts_url: string;\n};\nexport type ProtectedBranch = {\n  url: string;\n  required_status_checks?: StatusCheckPolicy;\n  required_pull_request_reviews?: {\n    url: string;\n    dismiss_stale_reviews?: boolean;\n    require_code_owner_reviews?: boolean;\n    required_approving_review_count?: number;\n    dismissal_restrictions?: {\n      url: string;\n      users_url: string;\n      teams_url: string;\n      users: SimpleUser[];\n      teams: Team[];\n    };\n    bypass_pull_request_allowances?: {\n      users: SimpleUser[];\n      teams: Team[];\n    };\n  };\n  required_signatures?: {\n    url: string;\n    enabled: boolean;\n  };\n  enforce_admins?: {\n    url: string;\n    enabled: boolean;\n  };\n  required_linear_history?: {\n    enabled: boolean;\n  };\n  allow_force_pushes?: {\n    enabled: boolean;\n  };\n  allow_deletions?: {\n    enabled: boolean;\n  };\n  restrictions?: BranchRestrictionPolicy;\n  required_conversation_resolution?: {\n    enabled?: boolean;\n  };\n};\nexport type ValidationErrorSimple = {\n  message: string;\n  documentation_url: string;\n  errors?: string[];\n};\nexport type GitHubApp = {\n  id: number;\n  slug?: string;\n  node_id: string;\n  owner: SimpleUser2;\n  name: string;\n  description: string | null;\n  external_url: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  permissions: {\n    issues?: string;\n    checks?: string;\n    metadata?: string;\n    contents?: string;\n    deployments?: string;\n  } & {\n    [key: string]: string;\n  };\n  events: string[];\n  installations_count?: number;\n  client_id?: string;\n  client_secret?: string;\n  webhook_secret?: string | null;\n  pem?: string;\n};\nexport type CodeownersErrors = {\n  errors: {\n    line: number;\n    column: number;\n    source?: string;\n    kind: string;\n    suggestion?: string | null;\n    message: string;\n    path: string;\n  }[];\n};\nexport type Collaborator = {\n  login: string;\n  id: number;\n  email?: string | null;\n  name?: string | null;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  permissions?: {\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n    admin: boolean;\n  };\n  role_name: string;\n};\nexport type RepositoryInvitation = {\n  id: number;\n  repository: MinimalRepository;\n  invitee: SimpleUser2;\n  inviter: SimpleUser2;\n  permissions: \"read\" | \"write\" | \"admin\" | \"triage\" | \"maintain\";\n  created_at: string;\n  expired?: boolean;\n  url: string;\n  html_url: string;\n  node_id: string;\n};\nexport type Collaborator2 = {\n  login: string;\n  id: number;\n  email?: string | null;\n  name?: string | null;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string | null;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  permissions?: {\n    pull: boolean;\n    triage?: boolean;\n    push: boolean;\n    maintain?: boolean;\n    admin: boolean;\n  };\n  role_name: string;\n} | null;\nexport type RepositoryCollaboratorPermission = {\n  permission: string;\n  role_name: string;\n  user: Collaborator2;\n};\nexport type AuthorAssociation =\n  | \"COLLABORATOR\"\n  | \"CONTRIBUTOR\"\n  | \"FIRST_TIMER\"\n  | \"FIRST_TIME_CONTRIBUTOR\"\n  | \"MANNEQUIN\"\n  | \"MEMBER\"\n  | \"NONE\"\n  | \"OWNER\";\nexport type ReactionRollup = {\n  url: string;\n  total_count: number;\n  \"+1\": number;\n  \"-1\": number;\n  laugh: number;\n  confused: number;\n  heart: number;\n  hooray: number;\n  eyes: number;\n  rocket: number;\n};\nexport type CommitComment = {\n  html_url: string;\n  url: string;\n  id: number;\n  node_id: string;\n  body: string;\n  path: string | null;\n  position: number | null;\n  line: number | null;\n  commit_id: string;\n  user: SimpleUser2;\n  created_at: string;\n  updated_at: string;\n  author_association: AuthorAssociation;\n  reactions?: ReactionRollup;\n};\nexport type BranchShort = {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  protected: boolean;\n};\nexport type Milestone = {\n  url: string;\n  html_url: string;\n  labels_url: string;\n  id: number;\n  node_id: string;\n  number: number;\n  state: \"open\" | \"closed\";\n  title: string;\n  description: string | null;\n  creator: SimpleUser2;\n  open_issues: number;\n  closed_issues: number;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  due_on: string | null;\n} | null;\nexport type Link = {\n  href: string;\n};\nexport type AutoMerge = {\n  enabled_by: SimpleUser;\n  merge_method: \"merge\" | \"squash\" | \"rebase\";\n  commit_title: string;\n  commit_message: string;\n} | null;\nexport type PullRequestSimple = {\n  url: string;\n  id: number;\n  node_id: string;\n  html_url: string;\n  diff_url: string;\n  patch_url: string;\n  issue_url: string;\n  commits_url: string;\n  review_comments_url: string;\n  review_comment_url: string;\n  comments_url: string;\n  statuses_url: string;\n  number: number;\n  state: string;\n  locked: boolean;\n  title: string;\n  user: SimpleUser2;\n  body: string | null;\n  labels: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string;\n    color: string;\n    default: boolean;\n  }[];\n  milestone: Milestone;\n  active_lock_reason?: string | null;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  merged_at: string | null;\n  merge_commit_sha: string | null;\n  assignee: SimpleUser2;\n  assignees?: SimpleUser[] | null;\n  requested_reviewers?: SimpleUser[] | null;\n  requested_teams?: Team[] | null;\n  head: {\n    label: string;\n    ref: string;\n    repo: Repository2;\n    sha: string;\n    user: SimpleUser2;\n  };\n  base: {\n    label: string;\n    ref: string;\n    repo: Repository2;\n    sha: string;\n    user: SimpleUser2;\n  };\n  _links: {\n    comments: Link;\n    commits: Link;\n    statuses: Link;\n    html: Link;\n    issue: Link;\n    review_comments: Link;\n    review_comment: Link;\n    self: Link;\n  };\n  author_association: AuthorAssociation;\n  auto_merge: AutoMerge;\n  draft?: boolean;\n};\nexport type SimpleCommitStatus = {\n  description: string | null;\n  id: number;\n  node_id: string;\n  state: string;\n  context: string;\n  target_url: string;\n  required?: boolean | null;\n  avatar_url: string | null;\n  url: string;\n  created_at: string;\n  updated_at: string;\n};\nexport type CombinedCommitStatus = {\n  state: string;\n  statuses: SimpleCommitStatus[];\n  sha: string;\n  total_count: number;\n  repository: MinimalRepository;\n  commit_url: string;\n  url: string;\n};\nexport type Status = {\n  url: string;\n  avatar_url: string | null;\n  id: number;\n  node_id: string;\n  state: string;\n  description: string;\n  target_url: string;\n  context: string;\n  created_at: string;\n  updated_at: string;\n  creator: SimpleUser2;\n};\nexport type CodeOfConductSimple2 = {\n  url: string;\n  key: string;\n  name: string;\n  html_url: string | null;\n} | null;\nexport type CommunityHealthFile = {\n  url: string;\n  html_url: string;\n} | null;\nexport type CommunityProfile = {\n  health_percentage: number;\n  description: string | null;\n  documentation: string | null;\n  files: {\n    code_of_conduct: CodeOfConductSimple2;\n    code_of_conduct_file: CommunityHealthFile;\n    license: LicenseSimple;\n    contributing: CommunityHealthFile;\n    readme: CommunityHealthFile;\n    issue_template: CommunityHealthFile;\n    pull_request_template: CommunityHealthFile;\n  };\n  updated_at: string | null;\n  content_reports_enabled?: boolean;\n};\nexport type CommitComparison = {\n  url: string;\n  html_url: string;\n  permalink_url: string;\n  diff_url: string;\n  patch_url: string;\n  base_commit: Commit;\n  merge_base_commit: Commit;\n  status: \"diverged\" | \"ahead\" | \"behind\" | \"identical\";\n  ahead_by: number;\n  behind_by: number;\n  total_commits: number;\n  commits: Commit[];\n  files?: DiffEntry[];\n};\nexport type ContentDirectory = {\n  type: string;\n  size: number;\n  name: string;\n  path: string;\n  content?: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n}[];\nexport type ContentFile = {\n  type: string;\n  encoding: string;\n  size: number;\n  name: string;\n  path: string;\n  content: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n  target?: string;\n  submodule_git_url?: string;\n};\nexport type SymlinkContent = {\n  type: string;\n  target: string;\n  size: number;\n  name: string;\n  path: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n};\nexport type SymlinkContent2 = {\n  type: string;\n  submodule_git_url: string;\n  size: number;\n  name: string;\n  path: string;\n  sha: string;\n  url: string;\n  git_url: string | null;\n  html_url: string | null;\n  download_url: string | null;\n  _links: {\n    git: string | null;\n    html: string | null;\n    self: string;\n  };\n};\nexport type FileCommit = {\n  content: {\n    name?: string;\n    path?: string;\n    sha?: string;\n    size?: number;\n    url?: string;\n    html_url?: string;\n    git_url?: string;\n    download_url?: string;\n    type?: string;\n    _links?: {\n      self?: string;\n      git?: string;\n      html?: string;\n    };\n  } | null;\n  commit: {\n    sha?: string;\n    node_id?: string;\n    url?: string;\n    html_url?: string;\n    author?: {\n      date?: string;\n      name?: string;\n      email?: string;\n    };\n    committer?: {\n      date?: string;\n      name?: string;\n      email?: string;\n    };\n    message?: string;\n    tree?: {\n      url?: string;\n      sha?: string;\n    };\n    parents?: {\n      url?: string;\n      html_url?: string;\n      sha?: string;\n    }[];\n    verification?: {\n      verified?: boolean;\n      reason?: string;\n      signature?: string | null;\n      payload?: string | null;\n    };\n  };\n};\nexport type Contributor = {\n  login?: string;\n  id?: number;\n  node_id?: string;\n  avatar_url?: string;\n  gravatar_id?: string | null;\n  url?: string;\n  html_url?: string;\n  followers_url?: string;\n  following_url?: string;\n  gists_url?: string;\n  starred_url?: string;\n  subscriptions_url?: string;\n  organizations_url?: string;\n  repos_url?: string;\n  events_url?: string;\n  received_events_url?: string;\n  type: string;\n  site_admin?: boolean;\n  contributions: number;\n  email?: string;\n  name?: string;\n};\nexport type GitHubApp2 = {\n  id: number;\n  slug?: string;\n  node_id: string;\n  owner: SimpleUser2;\n  name: string;\n  description: string | null;\n  external_url: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  permissions: {\n    issues?: string;\n    checks?: string;\n    metadata?: string;\n    contents?: string;\n    deployments?: string;\n  } & {\n    [key: string]: string;\n  };\n  events: string[];\n  installations_count?: number;\n  client_id?: string;\n  client_secret?: string;\n  webhook_secret?: string | null;\n  pem?: string;\n} | null;\nexport type Deployment = {\n  url: string;\n  id: number;\n  node_id: string;\n  sha: string;\n  ref: string;\n  task: string;\n  payload:\n    | {\n        [key: string]: any;\n      }\n    | string;\n  original_environment?: string;\n  environment: string;\n  description: string | null;\n  creator: SimpleUser2;\n  created_at: string;\n  updated_at: string;\n  statuses_url: string;\n  repository_url: string;\n  transient_environment?: boolean;\n  production_environment?: boolean;\n  performed_via_github_app?: GitHubApp2;\n};\nexport type DeploymentStatus = {\n  url: string;\n  id: number;\n  node_id: string;\n  state:\n    | \"error\"\n    | \"failure\"\n    | \"inactive\"\n    | \"pending\"\n    | \"success\"\n    | \"queued\"\n    | \"in_progress\";\n  creator: SimpleUser2;\n  description: string;\n  environment?: string;\n  target_url: string;\n  created_at: string;\n  updated_at: string;\n  deployment_url: string;\n  repository_url: string;\n  environment_url?: string;\n  log_url?: string;\n  performed_via_github_app?: GitHubApp2;\n};\nexport type WaitTimer = number;\nexport type DeploymentReviewerType = \"User\" | \"Team\";\nexport type DeploymentBranchPolicy = {\n  protected_branches: boolean;\n  custom_branch_policies: boolean;\n} | null;\nexport type Environment = {\n  id: number;\n  node_id: string;\n  name: string;\n  url: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  protection_rules?: (\n    | {\n        id: number;\n        node_id: string;\n        type: string;\n        wait_timer?: WaitTimer;\n      }\n    | {\n        id: number;\n        node_id: string;\n        type: string;\n        reviewers?: {\n          type?: DeploymentReviewerType;\n          reviewer?: SimpleUser | Team;\n        }[];\n      }\n    | {\n        id: number;\n        node_id: string;\n        type: string;\n      }\n  )[];\n  deployment_branch_policy?: DeploymentBranchPolicy;\n};\nexport type WebhookConfigUrl = string;\nexport type WebhookConfigInsecureSsl = string | number;\nexport type WebhookConfigContentType = string;\nexport type WebhookConfigSecret = string;\nexport type HookResponse = {\n  code: number | null;\n  status: string | null;\n  message: string | null;\n};\nexport type Webhook = {\n  type: string;\n  id: number;\n  name: string;\n  active: boolean;\n  events: string[];\n  config: {\n    email?: string;\n    password?: string;\n    room?: string;\n    subdomain?: string;\n    url?: WebhookConfigUrl;\n    insecure_ssl?: WebhookConfigInsecureSsl;\n    content_type?: WebhookConfigContentType;\n    digest?: string;\n    secret?: WebhookConfigSecret;\n    token?: string;\n  };\n  updated_at: string;\n  created_at: string;\n  url: string;\n  test_url: string;\n  ping_url: string;\n  deliveries_url?: string;\n  last_response: HookResponse;\n};\nexport type WebhookConfiguration = {\n  url?: WebhookConfigUrl;\n  content_type?: WebhookConfigContentType;\n  secret?: WebhookConfigSecret;\n  insecure_ssl?: WebhookConfigInsecureSsl;\n};\nexport type SimpleWebhookDelivery = {\n  id: number;\n  guid: string;\n  delivered_at: string;\n  redelivery: boolean;\n  duration: number;\n  status: string;\n  status_code: number;\n  event: string;\n  action: string | null;\n  installation_id: number | null;\n  repository_id: number | null;\n};\nexport type WebhookDelivery = {\n  id: number;\n  guid: string;\n  delivered_at: string;\n  redelivery: boolean;\n  duration: number;\n  status: string;\n  status_code: number;\n  event: string;\n  action: string | null;\n  installation_id: number | null;\n  repository_id: number | null;\n  url?: string;\n  request: {\n    headers: {\n      [key: string]: any;\n    } | null;\n    payload: {\n      [key: string]: any;\n    } | null;\n  };\n  response: {\n    headers: {\n      [key: string]: any;\n    } | null;\n    payload: {\n      [key: string]: any;\n    } | null;\n  };\n};\nexport type DeployKey = {\n  id: number;\n  key: string;\n  url: string;\n  title: string;\n  verified: boolean;\n  created_at: string;\n  read_only: boolean;\n};\nexport type Language = {\n  [key: string]: number;\n};\nexport type MergedUpstream = {\n  message?: string;\n  merge_type?: \"merge\" | \"fast-forward\" | \"none\";\n  base_branch?: string;\n};\nexport type PagesSourceHash = {\n  branch: string;\n  path: string;\n};\nexport type PagesHttpsCertificate = {\n  state:\n    | \"new\"\n    | \"authorization_created\"\n    | \"authorization_pending\"\n    | \"authorized\"\n    | \"authorization_revoked\"\n    | \"issued\"\n    | \"uploaded\"\n    | \"approved\"\n    | \"errored\"\n    | \"bad_authz\"\n    | \"destroy_pending\"\n    | \"dns_changed\";\n  description: string;\n  domains: string[];\n  expires_at?: string;\n};\nexport type GitHubPages = {\n  url: string;\n  status: (\"built\" | \"building\" | \"errored\") | null;\n  cname: string | null;\n  protected_domain_state?: (\"pending\" | \"verified\" | \"unverified\") | null;\n  pending_domain_unverified_at?: string | null;\n  custom_404: boolean;\n  html_url?: string;\n  source?: PagesSourceHash;\n  public: boolean;\n  https_certificate?: PagesHttpsCertificate;\n  https_enforced?: boolean;\n};\nexport type PageBuild = {\n  url: string;\n  status: string;\n  error: {\n    message: string | null;\n  };\n  pusher: SimpleUser2;\n  commit: string;\n  duration: number;\n  created_at: string;\n  updated_at: string;\n};\nexport type PageBuildStatus = {\n  url: string;\n  status: string;\n};\nexport type PagesHealthCheckStatus = {\n  domain?: {\n    host?: string;\n    uri?: string;\n    nameservers?: string;\n    dns_resolves?: boolean;\n    is_proxied?: boolean | null;\n    is_cloudflare_ip?: boolean | null;\n    is_fastly_ip?: boolean | null;\n    is_old_ip_address?: boolean | null;\n    is_a_record?: boolean | null;\n    has_cname_record?: boolean | null;\n    has_mx_records_present?: boolean | null;\n    is_valid_domain?: boolean;\n    is_apex_domain?: boolean;\n    should_be_a_record?: boolean | null;\n    is_cname_to_github_user_domain?: boolean | null;\n    is_cname_to_pages_dot_github_dot_com?: boolean | null;\n    is_cname_to_fastly?: boolean | null;\n    is_pointed_to_github_pages_ip?: boolean | null;\n    is_non_github_pages_ip_present?: boolean | null;\n    is_pages_domain?: boolean;\n    is_served_by_pages?: boolean | null;\n    is_valid?: boolean;\n    reason?: string | null;\n    responds_to_https?: boolean;\n    enforces_https?: boolean;\n    https_error?: string | null;\n    is_https_eligible?: boolean | null;\n    caa_error?: string | null;\n  };\n  alt_domain?: {\n    host?: string;\n    uri?: string;\n    nameservers?: string;\n    dns_resolves?: boolean;\n    is_proxied?: boolean | null;\n    is_cloudflare_ip?: boolean | null;\n    is_fastly_ip?: boolean | null;\n    is_old_ip_address?: boolean | null;\n    is_a_record?: boolean | null;\n    has_cname_record?: boolean | null;\n    has_mx_records_present?: boolean | null;\n    is_valid_domain?: boolean;\n    is_apex_domain?: boolean;\n    should_be_a_record?: boolean | null;\n    is_cname_to_github_user_domain?: boolean | null;\n    is_cname_to_pages_dot_github_dot_com?: boolean | null;\n    is_cname_to_fastly?: boolean | null;\n    is_pointed_to_github_pages_ip?: boolean | null;\n    is_non_github_pages_ip_present?: boolean | null;\n    is_pages_domain?: boolean;\n    is_served_by_pages?: boolean | null;\n    is_valid?: boolean;\n    reason?: string | null;\n    responds_to_https?: boolean;\n    enforces_https?: boolean;\n    https_error?: string | null;\n    is_https_eligible?: boolean | null;\n    caa_error?: string | null;\n  } | null;\n};\nexport type EmptyObject = {};\nexport type ReleaseAsset = {\n  url: string;\n  browser_download_url: string;\n  id: number;\n  node_id: string;\n  name: string;\n  label: string | null;\n  state: \"uploaded\" | \"open\";\n  content_type: string;\n  size: number;\n  download_count: number;\n  created_at: string;\n  updated_at: string;\n  uploader: SimpleUser2;\n};\nexport type Release = {\n  url: string;\n  html_url: string;\n  assets_url: string;\n  upload_url: string;\n  tarball_url: string | null;\n  zipball_url: string | null;\n  id: number;\n  node_id: string;\n  tag_name: string;\n  target_commitish: string;\n  name: string | null;\n  body?: string | null;\n  draft: boolean;\n  prerelease: boolean;\n  created_at: string;\n  published_at: string | null;\n  author: SimpleUser;\n  assets: ReleaseAsset[];\n  body_html?: string;\n  body_text?: string;\n  mentions_count?: number;\n  discussion_url?: string;\n  reactions?: ReactionRollup;\n};\nexport type GeneratedReleaseNotesContent = {\n  name: string;\n  body: string;\n};\nexport type CodeFrequencyStat = number[];\nexport type CommitActivity = {\n  days: number[];\n  total: number;\n  week: number;\n};\nexport type ContributorActivity = {\n  author: SimpleUser2;\n  total: number;\n  weeks: {\n    w?: number;\n    a?: number;\n    d?: number;\n    c?: number;\n  }[];\n};\nexport type ParticipationStats = {\n  all: number[];\n  owner: number[];\n};\nexport type Tag = {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  zipball_url: string;\n  tarball_url: string;\n  node_id: string;\n};\nexport type Topic = {\n  names: string[];\n};\nexport type Traffic = {\n  timestamp: string;\n  uniques: number;\n  count: number;\n};\nexport type CloneTraffic = {\n  count: number;\n  uniques: number;\n  clones: Traffic[];\n};\nexport type ContentTraffic = {\n  path: string;\n  title: string;\n  count: number;\n  uniques: number;\n};\nexport type ReferrerTraffic = {\n  referrer: string;\n  count: number;\n  uniques: number;\n};\nexport type ViewTraffic = {\n  count: number;\n  uniques: number;\n  views: Traffic[];\n};\nexport const {\n  useReposListForOrgQuery,\n  useReposCreateInOrgMutation,\n  useReposGetQuery,\n  useReposUpdateMutation,\n  useReposDeleteMutation,\n  useReposListAutolinksQuery,\n  useReposCreateAutolinkMutation,\n  useReposGetAutolinkQuery,\n  useReposDeleteAutolinkMutation,\n  useReposEnableAutomatedSecurityFixesMutation,\n  useReposDisableAutomatedSecurityFixesMutation,\n  useReposListBranchesQuery,\n  useReposGetBranchQuery,\n  useReposGetBranchProtectionQuery,\n  useReposUpdateBranchProtectionMutation,\n  useReposDeleteBranchProtectionMutation,\n  useReposGetAdminBranchProtectionQuery,\n  useReposSetAdminBranchProtectionMutation,\n  useReposDeleteAdminBranchProtectionMutation,\n  useReposGetPullRequestReviewProtectionQuery,\n  useReposUpdatePullRequestReviewProtectionMutation,\n  useReposDeletePullRequestReviewProtectionMutation,\n  useReposGetCommitSignatureProtectionQuery,\n  useReposCreateCommitSignatureProtectionMutation,\n  useReposDeleteCommitSignatureProtectionMutation,\n  useReposGetStatusChecksProtectionQuery,\n  useReposUpdateStatusCheckProtectionMutation,\n  useReposRemoveStatusCheckProtectionMutation,\n  useReposGetAllStatusCheckContextsQuery,\n  useReposAddStatusCheckContextsMutation,\n  useReposSetStatusCheckContextsMutation,\n  useReposRemoveStatusCheckContextsMutation,\n  useReposGetAccessRestrictionsQuery,\n  useReposDeleteAccessRestrictionsMutation,\n  useReposGetAppsWithAccessToProtectedBranchQuery,\n  useReposAddAppAccessRestrictionsMutation,\n  useReposSetAppAccessRestrictionsMutation,\n  useReposRemoveAppAccessRestrictionsMutation,\n  useReposGetTeamsWithAccessToProtectedBranchQuery,\n  useReposAddTeamAccessRestrictionsMutation,\n  useReposSetTeamAccessRestrictionsMutation,\n  useReposRemoveTeamAccessRestrictionsMutation,\n  useReposGetUsersWithAccessToProtectedBranchQuery,\n  useReposAddUserAccessRestrictionsMutation,\n  useReposSetUserAccessRestrictionsMutation,\n  useReposRemoveUserAccessRestrictionsMutation,\n  useReposRenameBranchMutation,\n  useReposCodeownersErrorsQuery,\n  useReposListCollaboratorsQuery,\n  useReposCheckCollaboratorQuery,\n  useReposAddCollaboratorMutation,\n  useReposRemoveCollaboratorMutation,\n  useReposGetCollaboratorPermissionLevelQuery,\n  useReposListCommitCommentsForRepoQuery,\n  useReposGetCommitCommentQuery,\n  useReposUpdateCommitCommentMutation,\n  useReposDeleteCommitCommentMutation,\n  useReposListCommitsQuery,\n  useReposListBranchesForHeadCommitQuery,\n  useReposListCommentsForCommitQuery,\n  useReposCreateCommitCommentMutation,\n  useReposListPullRequestsAssociatedWithCommitQuery,\n  useReposGetCommitQuery,\n  useReposGetCombinedStatusForRefQuery,\n  useReposListCommitStatusesForRefQuery,\n  useReposGetCommunityProfileMetricsQuery,\n  useReposCompareCommitsQuery,\n  useReposGetContentQuery,\n  useReposCreateOrUpdateFileContentsMutation,\n  useReposDeleteFileMutation,\n  useReposListContributorsQuery,\n  useReposListDeploymentsQuery,\n  useReposCreateDeploymentMutation,\n  useReposGetDeploymentQuery,\n  useReposDeleteDeploymentMutation,\n  useReposListDeploymentStatusesQuery,\n  useReposCreateDeploymentStatusMutation,\n  useReposGetDeploymentStatusQuery,\n  useReposCreateDispatchEventMutation,\n  useReposGetAllEnvironmentsQuery,\n  useReposGetEnvironmentQuery,\n  useReposCreateOrUpdateEnvironmentMutation,\n  useReposDeleteAnEnvironmentMutation,\n  useReposListForksQuery,\n  useReposCreateForkMutation,\n  useReposListWebhooksQuery,\n  useReposCreateWebhookMutation,\n  useReposGetWebhookQuery,\n  useReposUpdateWebhookMutation,\n  useReposDeleteWebhookMutation,\n  useReposGetWebhookConfigForRepoQuery,\n  useReposUpdateWebhookConfigForRepoMutation,\n  useReposListWebhookDeliveriesQuery,\n  useReposGetWebhookDeliveryQuery,\n  useReposRedeliverWebhookDeliveryMutation,\n  useReposPingWebhookMutation,\n  useReposTestPushWebhookMutation,\n  useReposListInvitationsQuery,\n  useReposUpdateInvitationMutation,\n  useReposDeleteInvitationMutation,\n  useReposListDeployKeysQuery,\n  useReposCreateDeployKeyMutation,\n  useReposGetDeployKeyQuery,\n  useReposDeleteDeployKeyMutation,\n  useReposListLanguagesQuery,\n  useReposEnableLfsForRepoMutation,\n  useReposDisableLfsForRepoMutation,\n  useReposMergeUpstreamMutation,\n  useReposMergeMutation,\n  useReposGetPagesQuery,\n  useReposCreatePagesSiteMutation,\n  useReposUpdateInformationAboutPagesSiteMutation,\n  useReposDeletePagesSiteMutation,\n  useReposListPagesBuildsQuery,\n  useReposRequestPagesBuildMutation,\n  useReposGetLatestPagesBuildQuery,\n  useReposGetPagesBuildQuery,\n  useReposGetPagesHealthCheckQuery,\n  useReposGetReadmeQuery,\n  useReposGetReadmeInDirectoryQuery,\n  useReposListReleasesQuery,\n  useReposCreateReleaseMutation,\n  useReposGetReleaseAssetQuery,\n  useReposUpdateReleaseAssetMutation,\n  useReposDeleteReleaseAssetMutation,\n  useReposGenerateReleaseNotesMutation,\n  useReposGetLatestReleaseQuery,\n  useReposGetReleaseByTagQuery,\n  useReposGetReleaseQuery,\n  useReposUpdateReleaseMutation,\n  useReposDeleteReleaseMutation,\n  useReposListReleaseAssetsQuery,\n  useReposUploadReleaseAssetMutation,\n  useReposGetCodeFrequencyStatsQuery,\n  useReposGetCommitActivityStatsQuery,\n  useReposGetContributorsStatsQuery,\n  useReposGetParticipationStatsQuery,\n  useReposGetPunchCardStatsQuery,\n  useReposCreateCommitStatusMutation,\n  useReposListTagsQuery,\n  useReposDownloadTarballArchiveQuery,\n  useReposListTeamsQuery,\n  useReposGetAllTopicsQuery,\n  useReposReplaceAllTopicsMutation,\n  useReposGetClonesQuery,\n  useReposGetTopPathsQuery,\n  useReposGetTopReferrersQuery,\n  useReposGetViewsQuery,\n  useReposTransferMutation,\n  useReposCheckVulnerabilityAlertsQuery,\n  useReposEnableVulnerabilityAlertsMutation,\n  useReposDisableVulnerabilityAlertsMutation,\n  useReposDownloadZipballArchiveQuery,\n  useReposCreateUsingTemplateMutation,\n  useReposListPublicQuery,\n  useReposListForAuthenticatedUserQuery,\n  useReposCreateForAuthenticatedUserMutation,\n  useReposListInvitationsForAuthenticatedUserQuery,\n  useReposAcceptInvitationForAuthenticatedUserMutation,\n  useReposDeclineInvitationForAuthenticatedUserMutation,\n  useReposListForUserQuery,\n} = injectedRtkApi;\n","import { SerializedError } from \"@reduxjs/toolkit\";\nimport { FetchBaseQueryError } from \"@reduxjs/toolkit/dist/query\";\n\nexport interface GithubErrorResponse {\n  message: string,\n  documentation_url: string,\n}\n\nexport function isFetchBaseQueryError(obj: any): obj is FetchBaseQueryError {\n  return (\n    (obj !== null &&\n      typeof obj === \"object\" ||\n      typeof obj === \"function\") && (\n      (\n        typeof obj.status === \"number\" &&\n        'data' in obj\n      ) || (\n        obj.status === \"FETCH_ERROR\" &&\n        typeof obj.error === \"string\"\n      ) || (\n        obj.status === \"PARSING_ERROR\" &&\n        typeof obj.originalStatus === \"number\" &&\n        typeof obj.data === \"string\" &&\n        typeof obj.error === \"string\"\n      ) || (\n        obj.status === \"CUSTOM_ERROR\" &&\n        typeof obj.error === \"string\"\n      )\n    )\n  )\n}\n\nexport function isSerializedError(error: FetchBaseQueryError | SerializedError): error is SerializedError {\n  return !isFetchBaseQueryError(error);\n}\n\nexport function isGithubErrorResponse(obj: any): obj is GithubErrorResponse {\n  return (\n      (obj !== null &&\n          typeof obj === \"object\" ||\n          typeof obj === \"function\") &&\n      typeof obj.message === \"string\" &&\n      typeof obj.documentation_url === \"string\"\n  )\n}\n\nexport function githubApiErrorMessage(error: FetchBaseQueryError | SerializedError) {\n  if (isFetchBaseQueryError(error)) {\n    const err = error as FetchBaseQueryError;\n    const { status } = err;\n    if (status === 'FETCH_ERROR') {\n      return `Fetch error: ${err.error}`\n    } else if (status === 'PARSING_ERROR') {\n      return `Parsing error: ${err.error}`\n    } else if (status === 'CUSTOM_ERROR') {\n      return `Custom error: ${err.error}`\n    } else if (Number.isInteger(status)) {\n      if (isGithubErrorResponse(err.data)) {\n        const githubErr = err.data as GithubErrorResponse;\n        return `${err.status}: ${githubErr.message}`\n      } else {\n        return `${err.status}: Unknown error`\n      }\n    } else {\n      return `${err.status}: Unknown error`\n    }\n  } else if (isSerializedError(error)) {\n    return 'Serialized error'\n  } else {\n    return 'Unknown error'\n  }\n}","import { PayloadAction, configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport { githubApi } from \"./githubApi/baseApi\";\n\ninterface GhStorage {\n  ghToken?: string\n  status: string,\n  errorMessage?: string,\n  storageEngine?: { type: string, state: any }\n}\n\nconst initialState: GhStorage = {\n  status: 'not_initialized',\n}\n\nconst ghStorageSlice = createSlice({\n  name: 'githubStorage',\n  initialState,\n  reducers: {\n    setToken: (state, action: PayloadAction<string>) => {\n      state.ghToken = action.payload\n    },\n    processResult: (state, action: PayloadAction<{ errorMessage?: string, newEngineState?: any }>) => {\n      const { errorMessage, newEngineState } = action.payload;\n      if (errorMessage === undefined) {\n        state.status = 'task_finished';\n      } else {\n        state.errorMessage = errorMessage;\n        state.status = 'error';\n      }\n      if (newEngineState !== undefined) {\n        state.storageEngine!.state = newEngineState;\n      }\n    },\n    updateState: (state, action: PayloadAction<any>) => {\n      if (state.storageEngine !== undefined) {\n        state.storageEngine.state = action.payload;\n      } else {\n        console.error('SheetStorage: storage engine is not initialized');\n      }\n    },\n    init: (state, action: PayloadAction<{ type: string, initialState: any }>) => {\n      const { type, initialState } = action.payload;\n      state.storageEngine = {\n        type,\n        state: initialState\n      }\n    },\n  }\n});\n\nexport const storageActions = { ...ghStorageSlice.actions }\n\nexport const store = configureStore({\n  reducer: {\n    [githubApi.reducerPath]: githubApi.reducer,\n    sheetStorage: ghStorageSlice.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(githubApi.middleware),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;","import sha1 from \"sha1\";\n\nexport function pathURIEncode(path: string) {\n  return path.split('/').map(p => encodeURIComponent(p)).reduce((p, c) => `${p}/${c}`);\n}\n\nexport function getSessionBranchName(fileInfo: { owner: string, repo: string, path: string, ref: string }) {\n  const { path, ref } = fileInfo;\n  const getName = (p: string) => {\n    const f = p.split('/').pop()?.split('.');\n    let name = f ? (f.length === 1 ? f[0] : f.slice(0, -1).join('.')) : '';\n    // make the name comply with branch name specs (https://git-scm.com/docs/git-check-ref-format)\n    name = name.replace('..', '');\n    name = name.replace('@{', '');\n    name = name.replace('~', '');\n    name = name.replace('^', '');\n    name = name.replace(':', '');\n    name = name.replace('?', '');\n    name = name.replace('*', '');\n    name = name.replace('[', '');\n    name = name.replace(' ', '-');\n    return name;\n  }\n  return `${ref}_session_${getName(path)}_${sha1(path)}`;\n}\n\nexport function isSessionBranchName(name: string) {\n  return name.match(/_session_/) !== null && name.match(/_[a-z0-9]+$/) !== null;\n}","//import { AppDispatch, RootState, store } from \"../../../app/store\"\n//import { sheetActions } from \"../../sheet/slice/sheetSlice\"\n\nimport { githubApi as gitDbApi } from './githubApi/endpoints/git'\nimport { githubApi as pullsApi } from \"./githubApi/endpoints/pulls\"\nimport { githubApi as reposApi, PullRequestSimple, ReposCreateOrUpdateFileContentsApiArg } from \"./githubApi/endpoints/repos\"\n\nimport { ReposListBranchesApiResponse } from \"./githubApi/endpoints/repos\"\nimport githubApiParseLastPage from \"./githubApi/lastPage\";\nimport { githubApiErrorMessage, isFetchBaseQueryError, isGithubErrorResponse } from \"./githubApi/errorMessage\";\n\n//import { pathURIEncode } from \"../../repository/RepoExplorer\";\nimport sha1 from 'sha1';\nimport { Base64 } from 'js-base64';\n//mport { ActionCreators as UndoActionCreators } from 'redux-undo'\n//import { waitForStorageIdle } from \"../storageUtils\"\n\n//import { store, storageActions, StorageDispatch as AppDispatch, StorageState as RootState } from \"./store\"\n//import { UpdateRecord } from \"../../sheetStorage\"\nimport { AppDispatch, RootState, storageActions, store } from './store';\nimport { getSessionBranchName, pathURIEncode } from './utils';\nimport { GhMergeError, GhSaveError, GithubFileLocation } from './types';\n//import { AutosavePayload } from '../workerApi';\ninterface AutosavePayload {\n  message: string,\n  contentObj: object\n}\n\ntype MergeState = 'idle' | 'merge_waiting' | 'merging' | 'success' | 'error'\n\nexport interface GhStorageState {\n  mergeState: MergeState,\n  mergeError?: GhMergeError,\n  location: GithubFileLocation,\n  sha: string,\n  sessionBranch?: { name: string, commitSha: string },\n  baseBranch: string,\n  baseCommitSha: string,\n  saveError?: GhSaveError,\n}\n\nexport const ghStorageSelectors = {\n  ghState: (state: RootState) => state.sheetStorage.storageEngine !== undefined ? (state.sheetStorage.storageEngine.type === 'github' ? state.sheetStorage.storageEngine.state as GhStorageState : undefined) : undefined\n}\n\nfunction ghUpdateState(state: GhStorageState) {\n  return storageActions.updateState(state);\n}\n\nexport function ghClearSessionBranch() {\n  return (dispatch: AppDispatch, getState: () => RootState) => {\n    const ghState = ghStorageSelectors.ghState(getState());\n    if (ghState !== undefined) {\n      const newState: GhStorageState = {\n        ...ghState,\n        sessionBranch: undefined\n      }\n      dispatch(ghUpdateState(newState));\n    }\n  }\n}\n\nfunction listAllRepoBranches(owner: string, repo: string) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const perPage = 100;\n    const headers = await reposApi.endpoints.reposListBranchesHeaders.initiate({ owner, repo, perPage }, { forceRefetch: true })(dispatch, getState, null)\n    if (headers.isError) {\n      throw Error('unexpected response');\n    }\n    const lastPage = githubApiParseLastPage(headers.data?.link);\n    let branches: ReposListBranchesApiResponse = [];\n    for (let page = 1; page <= lastPage; page++) {\n      const response = await reposApi.endpoints.reposListBranches.initiate({ owner, repo, perPage, page }, { forceRefetch: true })(dispatch, getState, null)\n      if (response.data !== undefined) {\n        branches = branches.concat(response.data)\n      } else {\n        throw Error('unexpected response');\n      }\n    }\n    return branches;\n  }\n}\n\nfunction listAllPulls(owner: string, repo: string, state: \"all\" | \"open\" | \"closed\" | undefined, forceRefetch: boolean) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const perPage = 100;\n    let lastPage = 1;\n    let result: PullRequestSimple[] = []\n    for (let page = 1; page <= lastPage; page++) {\n      const r = await pullsApi.endpoints.pullsListWH.initiate({ owner, repo, state, perPage }, { forceRefetch })(dispatch, getState, null);\n      if (r.data === undefined) {\n        return { error: r.error! }\n      }\n\n      if (page === 1) {\n        lastPage = githubApiParseLastPage(r.data.headers['link']);\n      }\n\n      result = result.concat(r.data.response);\n    }\n    return { result };\n  }\n}\n\nfunction loadFile(fileInfo: { owner: string, repo: string, path: string, ref: string }) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    fileInfo.path = pathURIEncode(fileInfo.path);\n    const r = await reposApi.endpoints.reposGetContent.initiate(fileInfo, { forceRefetch: true })(dispatch, getState, null)\n    if (!r.isSuccess) {\n      return { error: r.error ? githubApiErrorMessage(r.error) : 'GitHub API call error while loading the worksheet' };\n    }\n    const { data } = r;\n    if (!('content' in data)) {\n      return { error: 'Worksheet path does not refer to a file.' };\n    }\n    try {\n      return { content: Base64.decode(data.content), sha: data.sha };\n    } catch (e) {\n      return { error: 'Base64 content decoding failed' };\n    }\n  }\n}\n\nexport function openSheet(location: GithubFileLocation) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const { owner, repo, ref } = location;\n\n    // TODO MOVE TO sheetStorage\n    //dispatch(sheetActions.startLoading());\n\n    // list all branches\n    let branches: ReposListBranchesApiResponse = [];\n    try {\n      branches = await listAllRepoBranches(owner, repo)(dispatch, getState);\n    } catch (e) {\n      console.log('branch listing error ', branches)\n      //dispatch(sheetActions.setErrorMessage({ message: `API call (listAllRepoBranches) failed, try again.`, newState: \"load_error\" }))\n      return { error: `API call (listAllRepoBranches) failed, try again.` };\n    }\n\n    // find base branch and session branch in branches list\n    const expectedSessionBranchName = getSessionBranchName(location);\n    const sheetBranch = branches.filter(b => b.name === ref)[0];\n    const sessionBranch = branches.filter(b => b.name === expectedSessionBranchName)[0];\n\n    if (sheetBranch === undefined) {\n      // given fileInfo that comes from URL is not valid\n      // Error 404 may be returned\n      // dispatch(sheetActions.setErrorMessage({ message: `The requested work sheet was not found in the repository. Check the file name, path, and branch.`, newState: \"load_error\" }))\n      return { error: `The requested work sheet was not found in the repository. Check the file name, path, and branch.` };\n    }\n\n    console.log('branches: ', branches)\n    console.log('expected session branch', expectedSessionBranchName)\n    console.log('session filter: ', branches.filter(b => b.name === expectedSessionBranchName))\n    console.log('sheetBranch is ', sheetBranch);\n    console.log('session branch is ', sessionBranch);\n\n    const sheetFileLocation = {\n      ...location,\n      ref: sessionBranch !== undefined ? sessionBranch.name : sheetBranch.name\n    }\n    const r1 = await loadFile(sheetFileLocation)(dispatch, getState);\n    if ('error' in r1) {\n      const { error } = r1;\n      //dispatch(sheetActions.setErrorMessage({ message: error, newState: \"load_error\" }))\n      return { error: error || 'Failed to load file' };\n    }\n    const { content, sha } = r1;\n\n    const engineState: GhStorageState = {\n      mergeState: 'idle',\n      location,\n      baseBranch: sheetBranch.name,\n      baseCommitSha: sheetBranch.commit.sha,\n      sha,\n    }\n\n    if (sessionBranch === undefined) {\n      // sessionless\n    } else {\n      // reusing existing session\n      console.log('reusing existing session');\n      engineState.sessionBranch = {\n        name: sessionBranch.name,\n        commitSha: sessionBranch.commit.sha\n      }\n    }\n\n    // init storage engine\n    dispatch(storageActions.init({ type: 'github', initialState: engineState }));\n    if (engineState.sessionBranch !== undefined) {\n      const merged = await isSessionBranchMerged()(dispatch, getState);\n      console.log('isSessionBranchMerged: ', merged);\n    }\n    const sheetId = sha1(JSON.stringify({ storageType: 'github', location }))\n    return { json: content, sheetId }\n  }\n}\n\nexport function mergeChanges() {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const getEngineState = () => getState().sheetStorage.storageEngine!.state as GhStorageState;\n    const { owner, repo, path } = getEngineState().location;\n    const filename = path.replace(/^([^/]*\\/)*([^/]+)\\.workbook$/, '$2');\n\n    if (getEngineState().sessionBranch === undefined) {\n      const mergeError: GhMergeError = {\n        type: 'no_session_branch',\n        message: 'There is no session branch therefore no changes to merge',\n      }\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }))\n      return false;\n    }\n\n    const sourceBranch = getEngineState().sessionBranch!;\n    const targetBranch = getEngineState().baseBranch;\n\n    dispatch(ghUpdateState({\n      ...getEngineState(),\n      mergeState: 'merge_waiting'\n    }));\n\n    dispatch(ghUpdateState({\n      ...getEngineState(),\n      mergeState: 'merging'\n    }));\n\n    const r1 = await pullsApi.endpoints.pullsList.initiate({ owner, repo, state: 'open', perPage: 100 }, { forceRefetch: true })(dispatch, getState, null);\n    if (!('data' in r1) || r1.data === undefined) {\n      // Listing pulls failed\n      const mergeError: GhMergeError = {\n        type: 'api_call_failed',\n        message: r1.error !== undefined ? githubApiErrorMessage(r1.error) : '',\n        call: 'pullsList'\n      }\n\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }))\n      return false;\n    }\n\n    const pullsList = r1.data;\n    console.log('Pulls list: ', pullsList);\n\n    const pr = pullsList.filter(pull => pull.base.ref === targetBranch && pull.head.ref === sourceBranch.name);\n    console.log('filtered pr: ', pr);\n\n    if (pr.length > 1) {\n      // this should not happen, github wont allow creation of same PR twice\n      const mergeError: GhMergeError = {\n        type: 'multiple_pulls',\n        message: 'The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch.',\n      }\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }))\n      return false;\n    }\n\n    let pullNumber;\n    let pullUrl;\n    if (pr.length === 1) {\n      console.log('PR already created');\n      pullNumber = pr[0].number;\n      pullUrl = pr[0].html_url;\n    } else {\n      const r2 = await pullsApi.endpoints.pullsCreate.initiate({\n        owner,\n        repo,\n        body: {\n          title: `${filename}: Worksheet session`,\n          head: `refs/heads/${sourceBranch.name}`,\n          base: `refs/heads/${targetBranch}`\n        }\n      })(dispatch, getState, null);\n      if (!('data' in r2)) {\n        // pull request creation failed\n        const mergeError: GhMergeError = {\n          type: 'api_call_failed',\n          message: githubApiErrorMessage(r2.error),\n          call: 'pullsCreate'\n        }\n        dispatch(ghUpdateState({\n          ...getEngineState(),\n          mergeState: 'error',\n          mergeError\n        }))\n        return false;\n      }\n\n      console.log('created PR: ', r2.data);\n      pullNumber = r2.data.number\n      pullUrl = r2.data.html_url;\n    }\n\n    const r3 = await pullsApi.endpoints.pullsMerge.initiate({\n      owner,\n      repo,\n      pullNumber,\n      body: {\n        commit_title: `${filename}: Worksheet session ${owner}/${repo}#${pullNumber}`,\n        commit_message: `See https://github.com/${owner}/${repo}/pull/${pullNumber}`,\n        merge_method: \"squash\"\n      }\n    })(dispatch, getState, null);\n    if (!('data' in r3)) {\n      // merging request failed\n      const { error } = r3;\n      let mergeError: GhMergeError;\n      if (isFetchBaseQueryError(error)\n        && typeof error.status === 'number'\n        && isGithubErrorResponse(error.data)\n        && error.status === 405\n        && error.data.message === 'Pull Request is not mergeable'\n      ) {\n        mergeError = {\n          type: 'not_mergable',\n          message: githubApiErrorMessage(r3.error),\n          url: pullUrl,\n        }\n      } else {\n        mergeError = {\n          type: 'api_call_failed',\n          message: githubApiErrorMessage(r3.error),\n          call: 'pullsMerge'\n        }\n      }\n      dispatch(ghUpdateState({\n        ...getEngineState(),\n        mergeState: 'error',\n        mergeError\n      }));\n      return false;\n    }\n\n    console.log('merge success', r3.data);\n\n    const r4 = await gitDbApi.endpoints.gitDeleteRef.initiate({ owner, repo, ref: `heads/${pathURIEncode(sourceBranch.name)}` })(dispatch, getState, null);\n    if (!('data' in r4)) {\n      // this error is ignored for now, it will be reported on next commit to this branch\n      console.log('Failed to delete old branch');\n    }\n    console.log('old branch delete success', r4);\n\n    dispatch(storageActions.updateState({\n      ...getEngineState(),\n      sessionBranch: undefined,\n      mergeState: 'success',\n      mergeError: undefined,\n      baseCommitSha: r3.data.sha,\n    }));\n    return r3.data;\n  }\n}\n\nfunction createSessionBranch() {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const engineState: GhStorageState = getState().sheetStorage.storageEngine!.state\n    const { location, baseCommitSha } = engineState;\n    const { owner, repo } = location;\n    const sessionBranchName = `refs/heads/${getSessionBranchName(location)}`;\n\n    const response = await gitDbApi.endpoints.gitCreateRef.initiate({ owner, repo, body: { ref: sessionBranchName, sha: baseCommitSha } })(dispatch, getState, null);\n    if ('data' in response) {\n      // success\n      return { response: response.data };\n    } else {\n      // process error\n      const { error } = response;\n      if (isFetchBaseQueryError(error)\n        && typeof error.status === 'number'\n        && isGithubErrorResponse(error.data)\n        && error.status === 422\n        && error.data.message === 'Reference already exists'\n      ) {\n        // session branch was already created probably by another workbook instance\n        // so file was modified\n        const saveError: GhSaveError = {\n          type: 'background_update',\n          message: error.data.message\n        }\n        return { saveError };\n      } else {\n        // unknown error \n        const saveError: GhSaveError = {\n          type: 'unknown_error',\n          message: githubApiErrorMessage(error)\n        }\n        return { saveError };\n      }\n    }\n  }\n}\n\nfunction isSessionBranchMerged() {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const ghState = ghStorageSelectors.ghState(getState());\n    console.log('testSessionBranch');\n    if (ghState === undefined || ghState.sessionBranch === undefined) {\n      throw Error('isSessionBranchMerged called on uninitialized ghStorage');\n    }\n    const { owner, repo } = ghState.location;\n    const { baseBranch, sessionBranch } = ghState;\n    const r = await listAllPulls(owner, repo, 'closed', true)(dispatch, getState)\n\n    if (r.error !== undefined) {\n      return { error: r.error }\n    }\n    const pulls = r.result;\n    console.log(`searching for pull from ${baseBranch} to ${sessionBranch.name} with sha ${sessionBranch.commitSha}`)\n    console.log('pulls: ', pulls)\n    for (let pull of pulls) {\n      if (pull.state === 'closed'\n        && pull.base.ref === baseBranch\n        && pull.head.ref === sessionBranch.name\n        && pull.head.sha === sessionBranch.commitSha\n      ) {\n        return { result: true };\n      }\n    }\n    return { result: false };\n  }\n}\n\nfunction commitRecord(record: AutosavePayload) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    const engineState: GhStorageState = getState().sheetStorage.storageEngine!.state\n    const { owner, repo, path } = engineState.location;\n    const { sessionBranch, sha } = engineState;\n    const updateArgs: ReposCreateOrUpdateFileContentsApiArg = {\n      owner, repo,\n      path: pathURIEncode(path),\n      body: {\n        message: record.message,\n        content: Base64.encode(JSON.stringify(record.contentObj, null, 2)),\n        sha,\n        branch: sessionBranch!.name,\n      }\n    }\n    const r = await reposApi.endpoints.reposCreateOrUpdateFileContents.initiate(updateArgs)(dispatch, getState, null);\n    if ('error' in r) {\n      // report save error\n      const { error } = r;\n\n      if (isFetchBaseQueryError(error)\n        && typeof error.status === 'number'\n        && isGithubErrorResponse(error.data)\n        && error.status === 409\n      ) {\n        // file was probably updated by another workbook instance or in github\n        const saveError: GhSaveError = {\n          type: 'background_update',\n          message: error.data.message\n        }\n        return { saveError };\n      } else {\n        // unknown error \n        const saveError: GhSaveError = {\n          type: 'unknown_error',\n          message: githubApiErrorMessage(error)\n        }\n        return { saveError };\n      }\n    }\n    return { response: r };\n  }\n}\n\nexport function onResume(state: GhStorageState) {\n  state.saveError = undefined;\n}\n\nfunction waitForMerge() {\n  return new Promise<void>((resolve, reject) => {\n    const processState = () => {\n      const state = (store.getState().sheetStorage.storageEngine!.state as GhStorageState).mergeState\n      if (state === 'idle' || state === 'success' || state === 'merge_waiting') {\n        resolve()\n        return true;\n      } else if (state === 'error') {\n        reject()\n        return true;\n      }\n      return false;\n    }\n    if (processState() === false) {\n      const unsubscribe = store.subscribe(() => {\n        if (processState()) {\n          unsubscribe()\n        }\n      })\n    }\n  })\n}\n\nexport function processRecord(record: AutosavePayload) {\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      await waitForMerge();\n    } catch (e) { }\n\n    const getEngineState = () => getState().sheetStorage.storageEngine!.state;\n    if (getEngineState().sessionBranch === undefined) {\n      const r = await createSessionBranch()(dispatch, getState);\n      if (r.saveError !== undefined) {\n        const newEngineState: GhStorageState = {\n          ...getEngineState(),\n          saveError: r.saveError\n        }\n        dispatch(storageActions.processResult({\n          //id: record.id,\n          errorMessage: `Creation of session branch failed: ${r.saveError.message}`,\n          newEngineState,\n        }));\n        return;\n      }\n\n      console.log('created session branch ', r.response);\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        sessionBranch: {\n          name: getSessionBranchName(getEngineState().location),\n          commitSha: r.response.object.sha\n        }\n      }\n      dispatch(storageActions.updateState(newEngineState));\n    }\n\n    const merged = await isSessionBranchMerged()(dispatch, getState);\n    if (merged.error !== undefined) {\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        saveError: {\n          type: 'unknown_error',\n          message: `API call failed: ${githubApiErrorMessage(merged.error)}`\n        }\n      }\n      dispatch(storageActions.processResult({\n        //id: record.id,\n        errorMessage: `API call failed: ${githubApiErrorMessage(merged.error)}`,\n        newEngineState,\n      }));\n      return;\n    }\n    if (merged.result === true) {\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        saveError: {\n          type: 'merged_session',\n          message: 'Merged session branch must be deleted'\n        }\n      }\n      dispatch(storageActions.processResult({\n        //id: record.id,\n        errorMessage: 'Merged session branch must be deleted',\n        newEngineState,\n      }));\n\n      return;\n    }\n    console.log('isSessionBranchMerged: ', merged);\n\n    const r = await commitRecord(record)(dispatch, getState);\n    if (r.saveError !== undefined) {\n      const newEngineState: GhStorageState = {\n        ...getEngineState(),\n        saveError: r.saveError\n      }\n      dispatch(storageActions.processResult({\n        //id: record.id,\n        errorMessage: `Commit failed: ${r.saveError.message}`,\n        newEngineState\n      }));\n    } else {\n      const engineState: GhStorageState = getState().sheetStorage.storageEngine!.state\n      const sha = r.response.data.content!.sha!;\n      const sessionBranch = {\n        ...engineState.sessionBranch!,\n        commitSha: r.response.data.commit.sha!\n      }\n      const newEngineState: GhStorageState = {\n        ...engineState,\n        sha,\n        sessionBranch,\n      }\n      dispatch(storageActions.processResult({ /*id: record.id,*/ newEngineState }));\n      //console.log('Commited record ' + record.id);\n    }\n  }\n}","/* eslint-disable no-restricted-globals */\n\nimport { initGithubEngine } from \"./githubStorage/engine\";\nimport { StorageEngine } from \"./storageEngine\";\nimport { AutoSavePayload, CustomCmdPayload, EngineCommand, InitPayload, LoadSheetPayload, ManualSavePayload } from \"./workerApi\";\n\ninterface InitCmd {\n  type: 'init',\n  payload: InitPayload,\n}\n\ninterface LoadSheetCmd {\n  type: 'load_sheet',\n  payload: LoadSheetPayload\n}\n\ninterface AutoSaveCmd {\n  type: 'auto_save',\n  payload: AutoSavePayload\n}\ninterface ManualSaveCmd {\n  type: 'manual_save',\n  payload: ManualSavePayload\n}\ninterface ResumeCmd {\n  type: 'resume',\n  payload: undefined,\n}\n\ninterface CustomCmd {\n  type: 'custom_cmd',\n  payload: CustomCmdPayload,\n}\n\nexport type StorageWorkerCmd = \n  InitCmd\n  | LoadSheetCmd\n  | AutoSaveCmd\n  | ManualSaveCmd\n  | ResumeCmd\n  | CustomCmd\n\n\nlet storageEngine: StorageEngine\n\nself.onmessage = async (e: MessageEvent<{cmd: StorageWorkerCmd, requestId: number}>) => {\n  const {cmd, requestId} = e.data;\n\n  console.log('worker got message', e.data)\n  switch(cmd.type) {\n    case 'init': {\n      console.log('Init cmd payload', cmd.payload)\n      if (cmd.payload.engineType === 'github') {\n        storageEngine = initGithubEngine(cmd.payload.initPayload);\n      } else {\n        throw new Error('Unknown storage engine type')\n      }\n      postMessage({requestId, result: true})\n      break\n    }\n    case 'load_sheet': {\n      console.log('Loading sheet...', cmd.payload)\n      const result = await storageEngine.loadSheet(cmd.payload)\n      //console.log('result: ', res)\n      postMessage({requestId, result})\n      break;\n    }\n    case 'auto_save': {\n      console.log('processing update', cmd)\n      const result = await storageEngine.autoSave(cmd.payload)\n      postMessage({result, requestId})\n      break\n    }\n    case 'manual_save': {\n      const result = await storageEngine.manualSave()\n      postMessage({result, requestId})\n      break\n    }\n    case 'resume': {\n      const result = await storageEngine.resume();\n      postMessage({result, requestId})\n      break\n    }\n    case 'custom_cmd': {\n      const result = await storageEngine.customCmd(cmd.payload);\n      postMessage({result, requestId})\n      break;\n    }\n  }\n}\n\n//export { StorageEngine };\n","import { StorageEngine } from \"../storageEngine\";\nimport { AutoSavePayload, CustomCmdPayload } from \"../workerApi\";\nimport { GhStorageState, ghClearSessionBranch, mergeChanges, openSheet, processRecord } from \"./githubStorage\";\nimport { storageActions, store } from \"./store\";\nimport { GhCustomManualSaveErrInfo, GithubFileLocation } from \"./types\";\n\nexport type GhCustomAutosaveErrInfo = Pick<GhStorageState,\n  'location'\n  | 'sessionBranch'\n  | 'baseBranch'\n  | 'saveError'\n>\n\nexport function initGithubEngine(initPayload: any): StorageEngine {\n  const dispatch = store.dispatch;\n  const getState = store.getState;\n\n  if (! ('ghToken' in initPayload)) {\n    throw new Error('Missing github access token in github engine initialization');\n  }\n  dispatch(storageActions.setToken(initPayload.ghToken));\n\n  return {\n    loadSheet: async (addr: GithubFileLocation) => {\n      const res = await openSheet(addr)(dispatch, getState)\n      if (res.error !== undefined) {\n        return { errMsg: res.error }\n      }\n      /*\n      try {\n        return {contentObj: JSON.parse(res.json)}\n      } catch (e) {\n        const syntaxErr = e as SyntaxError\n        return {errMsg: `JSON parse failed: ${syntaxErr.message}`};\n      }\n      */\n      return { json: res.json, sheetId: res.sheetId }\n    },\n    autoSave: async (record: AutoSavePayload) => {\n      await processRecord(record)(dispatch, getState);\n      const state = getState()\n      if (state.sheetStorage.status === 'task_finished') {\n        return true;\n      }\n\n      const cutstomErr: GhCustomAutosaveErrInfo = {\n        location: state.sheetStorage.storageEngine?.state.location,\n        sessionBranch: state.sheetStorage.storageEngine?.state.sessionBranch,\n        baseBranch: state.sheetStorage.storageEngine?.state.baseBranch,\n        saveError: state.sheetStorage.storageEngine?.state.saveError,\n      }\n\n      return {\n        errMsg: state.sheetStorage.errorMessage || 'err',\n        customErrObj: cutstomErr,\n      };\n    },\n    resume: async () => {\n      return true\n    },\n    manualSave: async () => {\n      const result = await mergeChanges()(dispatch, getState)\n      if (result === false) {\n        const state = getState().sheetStorage.storageEngine?.state\n        const {baseBranch, mergeState, mergeError, sessionBranch} = state;\n        const cutstomErr: GhCustomManualSaveErrInfo = {\n          baseBranch, mergeState, mergeError, sessionBranch,\n        }\n\n        return {errMsg: state.mergeError?.message || 'save error', customErrObj: cutstomErr}\n      } else {\n        return true;\n      }\n    },\n    customCmd: async (cmd: CustomCmdPayload) => {\n      if (cmd.type === 'clearSessionBranch') {\n        return ghClearSessionBranch()(dispatch, getState)\n      } else {\n        throw new Error('Unknown custom command')\n      }\n    }\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [511], function() { return __webpack_require__(86391); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"7efbe4f3\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/workbook/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t391: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkworkbook\"] = self[\"webpackChunkworkbook\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(511).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","accessToken","getState","sheetStorage","ghToken","append","cache","githubBaseQuery","args","api","extraOptions","result","githubApiParseLastPage","link","lastPage","split","forEach","item","parts","match","undefined","test","parseInt","githubApi","createApi","reducerPath","tagTypes","endpoints","build","reposListForUserHeaders","query","queryArg","url","username","method","params","type","sort","direction","per_page","perPage","page","transformResponse","apiResponse","meta","response","get","reposListForAuthenticatedUserHeaders","visibility","affiliation","since","before","searchReposHeaders","q","order","reposListBranchesHeaders","owner","repo","protected","reposListAllBranches","onQueryStarted","dispatch","queryFulfilled","updateCachedData","initiate","isSuccess","data","console","log","extraBranches","recipe","concat","reposMergeWithResponseCode","mutation","body","baseQueryReturnValue","arg","status","reposRenameBranchWithResponseCode","reponse","injectedRtkApi","useReposListForUserHeadersQuery","useReposListForAuthenticatedUserHeadersQuery","useSearchReposHeadersQuery","useReposListBranchesHeadersQuery","useReposListAllBranchesQuery","gitignoreGetAllTemplates","gitignoreGetTemplate","name","gitCreateBlob","gitGetBlob","fileSha","gitCreateCommit","gitGetCommit","commitSha","gitListMatchingRefs","ref","gitGetRef","gitCreateRef","invalidatesTags","gitUpdateRef","gitDeleteRef","gitCreateTag","gitGetTag","tagSha","gitCreateTree","gitGetTree","treeSha","recursive","overrideExisting","useGitignoreGetAllTemplatesQuery","useGitignoreGetTemplateQuery","useGitCreateBlobMutation","useGitGetBlobQuery","useGitCreateCommitMutation","useGitGetCommitQuery","useGitListMatchingRefsQuery","useGitGetRefQuery","useGitCreateRefMutation","useGitUpdateRefMutation","useGitDeleteRefMutation","useGitCreateTagMutation","useGitGetTagQuery","useGitCreateTreeMutation","useGitGetTreeQuery","pullsList","state","head","base","providesTags","pullsListWH","value","key","pullsCreate","pullsListReviewCommentsForRepo","pullsGetReviewComment","commentId","pullsUpdateReviewComment","pullsDeleteReviewComment","pullsGet","pullNumber","pullsUpdate","pullsListReviewComments","pullsCreateReviewComment","pullsCreateReplyForReviewComment","pullsListCommits","pullsListFiles","pullsCheckIfMerged","pullsMerge","pullsListRequestedReviewers","pullsRequestReviewers","pullsRemoveRequestedReviewers","pullsListReviews","pullsCreateReview","pullsGetReview","reviewId","pullsUpdateReview","pullsDeletePendingReview","pullsListCommentsForReview","pullsDismissReview","pullsSubmitReview","pullsUpdateBranch","usePullsListQuery","usePullsCreateMutation","usePullsListReviewCommentsForRepoQuery","usePullsGetReviewCommentQuery","usePullsUpdateReviewCommentMutation","usePullsDeleteReviewCommentMutation","usePullsGetQuery","usePullsUpdateMutation","usePullsListReviewCommentsQuery","usePullsCreateReviewCommentMutation","usePullsCreateReplyForReviewCommentMutation","usePullsListCommitsQuery","usePullsListFilesQuery","usePullsCheckIfMergedQuery","usePullsMergeMutation","usePullsListRequestedReviewersQuery","usePullsRequestReviewersMutation","usePullsRemoveRequestedReviewersMutation","usePullsListReviewsQuery","usePullsCreateReviewMutation","usePullsGetReviewQuery","usePullsUpdateReviewMutation","usePullsDeletePendingReviewMutation","usePullsListCommentsForReviewQuery","usePullsDismissReviewMutation","usePullsSubmitReviewMutation","usePullsUpdateBranchMutation","reposListForOrg","org","reposCreateInOrg","reposGet","reposUpdate","reposDelete","reposListAutolinks","reposCreateAutolink","reposGetAutolink","autolinkId","reposDeleteAutolink","reposEnableAutomatedSecurityFixes","reposDisableAutomatedSecurityFixes","reposListBranches","reposGetBranch","branch","reposGetBranchProtection","reposUpdateBranchProtection","reposDeleteBranchProtection","reposGetAdminBranchProtection","reposSetAdminBranchProtection","reposDeleteAdminBranchProtection","reposGetPullRequestReviewProtection","reposUpdatePullRequestReviewProtection","reposDeletePullRequestReviewProtection","reposGetCommitSignatureProtection","reposCreateCommitSignatureProtection","reposDeleteCommitSignatureProtection","reposGetStatusChecksProtection","reposUpdateStatusCheckProtection","reposRemoveStatusCheckProtection","reposGetAllStatusCheckContexts","reposAddStatusCheckContexts","reposSetStatusCheckContexts","reposRemoveStatusCheckContexts","reposGetAccessRestrictions","reposDeleteAccessRestrictions","reposGetAppsWithAccessToProtectedBranch","reposAddAppAccessRestrictions","reposSetAppAccessRestrictions","reposRemoveAppAccessRestrictions","reposGetTeamsWithAccessToProtectedBranch","reposAddTeamAccessRestrictions","reposSetTeamAccessRestrictions","reposRemoveTeamAccessRestrictions","reposGetUsersWithAccessToProtectedBranch","reposAddUserAccessRestrictions","reposSetUserAccessRestrictions","reposRemoveUserAccessRestrictions","reposRenameBranch","reposCodeownersErrors","reposListCollaborators","reposCheckCollaborator","reposAddCollaborator","reposRemoveCollaborator","reposGetCollaboratorPermissionLevel","reposListCommitCommentsForRepo","reposGetCommitComment","reposUpdateCommitComment","reposDeleteCommitComment","reposListCommits","sha","path","author","until","reposListBranchesForHeadCommit","reposListCommentsForCommit","reposCreateCommitComment","reposListPullRequestsAssociatedWithCommit","reposGetCommit","reposGetCombinedStatusForRef","reposListCommitStatusesForRef","reposGetCommunityProfileMetrics","reposCompareCommits","basehead","reposGetContent","reposCreateOrUpdateFileContents","maxRetries","reposDeleteFile","reposListContributors","anon","reposListDeployments","task","environment","reposCreateDeployment","reposGetDeployment","deploymentId","reposDeleteDeployment","reposListDeploymentStatuses","reposCreateDeploymentStatus","reposGetDeploymentStatus","statusId","reposCreateDispatchEvent","reposGetAllEnvironments","reposGetEnvironment","environmentName","reposCreateOrUpdateEnvironment","reposDeleteAnEnvironment","reposListForks","reposCreateFork","reposListWebhooks","reposCreateWebhook","reposGetWebhook","hookId","reposUpdateWebhook","reposDeleteWebhook","reposGetWebhookConfigForRepo","reposUpdateWebhookConfigForRepo","reposListWebhookDeliveries","cursor","reposGetWebhookDelivery","deliveryId","reposRedeliverWebhookDelivery","reposPingWebhook","reposTestPushWebhook","reposListInvitations","reposUpdateInvitation","invitationId","reposDeleteInvitation","reposListDeployKeys","reposCreateDeployKey","reposGetDeployKey","keyId","reposDeleteDeployKey","reposListLanguages","reposEnableLfsForRepo","reposDisableLfsForRepo","reposMergeUpstream","reposMerge","reposGetPages","reposCreatePagesSite","reposUpdateInformationAboutPagesSite","reposDeletePagesSite","reposListPagesBuilds","reposRequestPagesBuild","reposGetLatestPagesBuild","reposGetPagesBuild","buildId","reposGetPagesHealthCheck","reposGetReadme","reposGetReadmeInDirectory","dir","reposListReleases","reposCreateRelease","reposGetReleaseAsset","assetId","reposUpdateReleaseAsset","reposDeleteReleaseAsset","reposGenerateReleaseNotes","reposGetLatestRelease","reposGetReleaseByTag","tag","reposGetRelease","releaseId","reposUpdateRelease","reposDeleteRelease","reposListReleaseAssets","reposUploadReleaseAsset","label","reposGetCodeFrequencyStats","reposGetCommitActivityStats","reposGetContributorsStats","reposGetParticipationStats","reposGetPunchCardStats","reposCreateCommitStatus","reposListTags","reposDownloadTarballArchive","reposListTeams","reposGetAllTopics","reposReplaceAllTopics","reposGetClones","per","reposGetTopPaths","reposGetTopReferrers","reposGetViews","reposTransfer","reposCheckVulnerabilityAlerts","reposEnableVulnerabilityAlerts","reposDisableVulnerabilityAlerts","reposDownloadZipballArchive","reposCreateUsingTemplate","templateOwner","templateRepo","reposListPublic","reposListForAuthenticatedUser","reposCreateForAuthenticatedUser","reposListInvitationsForAuthenticatedUser","reposAcceptInvitationForAuthenticatedUser","reposDeclineInvitationForAuthenticatedUser","reposListForUser","useReposListForOrgQuery","useReposCreateInOrgMutation","useReposGetQuery","useReposUpdateMutation","useReposDeleteMutation","useReposListAutolinksQuery","useReposCreateAutolinkMutation","useReposGetAutolinkQuery","useReposDeleteAutolinkMutation","useReposEnableAutomatedSecurityFixesMutation","useReposDisableAutomatedSecurityFixesMutation","useReposListBranchesQuery","useReposGetBranchQuery","useReposGetBranchProtectionQuery","useReposUpdateBranchProtectionMutation","useReposDeleteBranchProtectionMutation","useReposGetAdminBranchProtectionQuery","useReposSetAdminBranchProtectionMutation","useReposDeleteAdminBranchProtectionMutation","useReposGetPullRequestReviewProtectionQuery","useReposUpdatePullRequestReviewProtectionMutation","useReposDeletePullRequestReviewProtectionMutation","useReposGetCommitSignatureProtectionQuery","useReposCreateCommitSignatureProtectionMutation","useReposDeleteCommitSignatureProtectionMutation","useReposGetStatusChecksProtectionQuery","useReposUpdateStatusCheckProtectionMutation","useReposRemoveStatusCheckProtectionMutation","useReposGetAllStatusCheckContextsQuery","useReposAddStatusCheckContextsMutation","useReposSetStatusCheckContextsMutation","useReposRemoveStatusCheckContextsMutation","useReposGetAccessRestrictionsQuery","useReposDeleteAccessRestrictionsMutation","useReposGetAppsWithAccessToProtectedBranchQuery","useReposAddAppAccessRestrictionsMutation","useReposSetAppAccessRestrictionsMutation","useReposRemoveAppAccessRestrictionsMutation","useReposGetTeamsWithAccessToProtectedBranchQuery","useReposAddTeamAccessRestrictionsMutation","useReposSetTeamAccessRestrictionsMutation","useReposRemoveTeamAccessRestrictionsMutation","useReposGetUsersWithAccessToProtectedBranchQuery","useReposAddUserAccessRestrictionsMutation","useReposSetUserAccessRestrictionsMutation","useReposRemoveUserAccessRestrictionsMutation","useReposRenameBranchMutation","useReposCodeownersErrorsQuery","useReposListCollaboratorsQuery","useReposCheckCollaboratorQuery","useReposAddCollaboratorMutation","useReposRemoveCollaboratorMutation","useReposGetCollaboratorPermissionLevelQuery","useReposListCommitCommentsForRepoQuery","useReposGetCommitCommentQuery","useReposUpdateCommitCommentMutation","useReposDeleteCommitCommentMutation","useReposListCommitsQuery","useReposListBranchesForHeadCommitQuery","useReposListCommentsForCommitQuery","useReposCreateCommitCommentMutation","useReposListPullRequestsAssociatedWithCommitQuery","useReposGetCommitQuery","useReposGetCombinedStatusForRefQuery","useReposListCommitStatusesForRefQuery","useReposGetCommunityProfileMetricsQuery","useReposCompareCommitsQuery","useReposGetContentQuery","useReposCreateOrUpdateFileContentsMutation","useReposDeleteFileMutation","useReposListContributorsQuery","useReposListDeploymentsQuery","useReposCreateDeploymentMutation","useReposGetDeploymentQuery","useReposDeleteDeploymentMutation","useReposListDeploymentStatusesQuery","useReposCreateDeploymentStatusMutation","useReposGetDeploymentStatusQuery","useReposCreateDispatchEventMutation","useReposGetAllEnvironmentsQuery","useReposGetEnvironmentQuery","useReposCreateOrUpdateEnvironmentMutation","useReposDeleteAnEnvironmentMutation","useReposListForksQuery","useReposCreateForkMutation","useReposListWebhooksQuery","useReposCreateWebhookMutation","useReposGetWebhookQuery","useReposUpdateWebhookMutation","useReposDeleteWebhookMutation","useReposGetWebhookConfigForRepoQuery","useReposUpdateWebhookConfigForRepoMutation","useReposListWebhookDeliveriesQuery","useReposGetWebhookDeliveryQuery","useReposRedeliverWebhookDeliveryMutation","useReposPingWebhookMutation","useReposTestPushWebhookMutation","useReposListInvitationsQuery","useReposUpdateInvitationMutation","useReposDeleteInvitationMutation","useReposListDeployKeysQuery","useReposCreateDeployKeyMutation","useReposGetDeployKeyQuery","useReposDeleteDeployKeyMutation","useReposListLanguagesQuery","useReposEnableLfsForRepoMutation","useReposDisableLfsForRepoMutation","useReposMergeUpstreamMutation","useReposMergeMutation","useReposGetPagesQuery","useReposCreatePagesSiteMutation","useReposUpdateInformationAboutPagesSiteMutation","useReposDeletePagesSiteMutation","useReposListPagesBuildsQuery","useReposRequestPagesBuildMutation","useReposGetLatestPagesBuildQuery","useReposGetPagesBuildQuery","useReposGetPagesHealthCheckQuery","useReposGetReadmeQuery","useReposGetReadmeInDirectoryQuery","useReposListReleasesQuery","useReposCreateReleaseMutation","useReposGetReleaseAssetQuery","useReposUpdateReleaseAssetMutation","useReposDeleteReleaseAssetMutation","useReposGenerateReleaseNotesMutation","useReposGetLatestReleaseQuery","useReposGetReleaseByTagQuery","useReposGetReleaseQuery","useReposUpdateReleaseMutation","useReposDeleteReleaseMutation","useReposListReleaseAssetsQuery","useReposUploadReleaseAssetMutation","useReposGetCodeFrequencyStatsQuery","useReposGetCommitActivityStatsQuery","useReposGetContributorsStatsQuery","useReposGetParticipationStatsQuery","useReposGetPunchCardStatsQuery","useReposCreateCommitStatusMutation","useReposListTagsQuery","useReposDownloadTarballArchiveQuery","useReposListTeamsQuery","useReposGetAllTopicsQuery","useReposReplaceAllTopicsMutation","useReposGetClonesQuery","useReposGetTopPathsQuery","useReposGetTopReferrersQuery","useReposGetViewsQuery","useReposTransferMutation","useReposCheckVulnerabilityAlertsQuery","useReposEnableVulnerabilityAlertsMutation","useReposDisableVulnerabilityAlertsMutation","useReposDownloadZipballArchiveQuery","useReposCreateUsingTemplateMutation","useReposListPublicQuery","useReposListForAuthenticatedUserQuery","useReposCreateForAuthenticatedUserMutation","useReposListInvitationsForAuthenticatedUserQuery","useReposAcceptInvitationForAuthenticatedUserMutation","useReposDeclineInvitationForAuthenticatedUserMutation","useReposListForUserQuery","isFetchBaseQueryError","obj","error","originalStatus","isGithubErrorResponse","message","documentation_url","githubApiErrorMessage","err","Number","isInteger","githubErr","isSerializedError","ghStorageSlice","createSlice","initialState","reducers","setToken","action","payload","processResult","errorMessage","newEngineState","storageEngine","updateState","init","storageActions","actions","store","configureStore","reducer","middleware","getDefaultMiddleware","pathURIEncode","map","p","encodeURIComponent","reduce","c","getSessionBranchName","fileInfo","f","pop","length","slice","join","replace","getName","sha1","ghStorageSelectors","ghUpdateState","listAllRepoBranches","reposApi","forceRefetch","isError","Error","branches","listAllPulls","pullsApi","r","loadFile","content","Base64","openSheet","location","expectedSessionBranchName","sheetBranch","filter","b","sessionBranch","sheetFileLocation","r1","engineState","mergeState","baseBranch","baseCommitSha","commit","isSessionBranchMerged","merged","sheetId","JSON","stringify","storageType","json","ghState","pulls","pull","commitRecord","record","updateArgs","contentObj","saveError","processRecord","Promise","resolve","reject","processState","unsubscribe","subscribe","getEngineState","sessionBranchName","gitDbApi","createSessionBranch","object","initGithubEngine","initPayload","loadSheet","addr","res","errMsg","autoSave","cutstomErr","customErrObj","resume","manualSave","filename","mergeError","sourceBranch","targetBranch","call","pr","number","pullUrl","html_url","title","r2","commit_title","commit_message","merge_method","r3","r4","mergeChanges","customCmd","cmd","ghClearSessionBranch","self","onmessage","e","requestId","engineType","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","chunkId","all","promises","u","miniCssF","prop","prototype","hasOwnProperty","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","push","bind","moreModules","runtime","next","then"],"sourceRoot":""}